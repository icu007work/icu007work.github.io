<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>米奇妙妙屋</title>
  
  <subtitle>偷得浮生半日闲</subtitle>
  <link href="https://icu007work.github.io/atom.xml" rel="self"/>
  
  <link href="https://icu007work.github.io/"/>
  <updated>2023-08-09T12:36:37.051Z</updated>
  <id>https://icu007work.github.io/</id>
  
  <author>
    <name>Rookie_l</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>语雀同款链接卡片—butterfly主题标签外挂</title>
    <link href="https://icu007work.github.io/archives/9765c01a.html"/>
    <id>https://icu007work.github.io/archives/9765c01a.html</id>
    <published>2023-08-03T07:02:03.000Z</published>
    <updated>2023-08-09T12:36:37.051Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考自：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.leonus.cn/favicon.ico">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(进一寸有进一寸的欢喜。);"></div>        <div class="tag-link-right">            <div class="tag-link-title">https://blog.leonus.cn/2022/link-card.html</div>            <div class="tag-link-sitename">Leonus</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>样式如下：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://icu007.work/wp-content/uploads/2022/08/icno.png">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(与君共赴，万里征程);"></div>        <div class="tag-link-right">            <div class="tag-link-title">https://icu007.work</div>            <div class="tag-link-sitename">Charlie_l</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="link-js"><a href="#link-js" class="headerlink" title="link.js"></a>link.js</h3><p>在 <code>\themes\butterfly\scripts\tag</code> 文件夹下面新建 <code>link.js</code> 并粘贴如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">JS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * link</span></span><br><span class="line"><span class="comment"> * &#123;% link url,title,favicon,desc %&#125;</span></span><br><span class="line"><span class="comment"> * &#123;% link 链接,标题,图标,介绍 %&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">link</span>(<span class="params">args</span>) &#123;</span><br><span class="line">    args = args.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="comment">// 获取参数</span></span><br><span class="line">    <span class="keyword">let</span> url = (args[<span class="number">0</span>] || <span class="string">&#x27;&#x27;</span>).<span class="title function_">trim</span>(),</span><br><span class="line">        title = (args[<span class="number">1</span>] || <span class="string">&#x27;点击直达链接&#x27;</span>).<span class="title function_">trim</span>(),</span><br><span class="line">        favicon = (args[<span class="number">2</span>] ? <span class="string">`&lt;img src=&quot;<span class="subst">$&#123;args[<span class="number">2</span>]&#125;</span>&quot; class=&quot;no-lightbox&quot;&gt;`</span> : defaultIcon).<span class="title function_">trim</span>(),</span><br><span class="line">        desc = (args[<span class="number">3</span>] || <span class="string">&#x27;&#x27;</span>).<span class="title function_">trim</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;a href=&quot;<span class="subst">$&#123;url&#125;</span>&quot; <span class="subst">$&#123;url.includes(<span class="string">&#x27;http&#x27;</span>)?<span class="string">&#x27;target=&quot;_blank&quot;&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span> title=&quot;<span class="subst">$&#123;title&#125;</span>&quot; referrerPolicy=&quot;no-referrer&quot; class=&quot;link_card&quot;&gt;&lt;div class=&quot;link_icon&quot;&gt;<span class="subst">$&#123;favicon&#125;</span>&lt;/div&gt;&lt;div class=&quot;link_content&quot;&gt;&lt;div class=&quot;link_title&quot;&gt;<span class="subst">$&#123;title&#125;</span>&lt;/div&gt;<span class="subst">$&#123;desc?<span class="string">`&lt;div class=&quot;link_desc&quot;&gt;<span class="subst">$&#123;desc&#125;</span>&lt;/div&gt;`</span>:<span class="string">&#x27;&#x27;</span>&#125;</span>&lt;/div&gt;&lt;/a&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">tag</span>.<span class="title function_">register</span>(<span class="string">&#x27;link&#x27;</span>, link, &#123; <span class="attr">ends</span>: <span class="literal">false</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="link-styl"><a href="#link-styl" class="headerlink" title="link.styl"></a>link.styl</h3><p>在 <code>\themes\butterfly\source\css\_tags</code> 文件夹下面新建 <code>link.styl</code> 并粘贴如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.link_card</span></span><br><span class="line">  <span class="attribute">display</span>: flex</span><br><span class="line">  margin: <span class="number">10px</span> <span class="number">0</span></span><br><span class="line">  color: <span class="built_in">var</span>(--font-color) <span class="meta">!important</span></span><br><span class="line">  text-decoration: none <span class="meta">!important</span></span><br><span class="line">  background: <span class="built_in">var</span>(--reward-pop)</span><br><span class="line">  border-radius: <span class="number">10px</span></span><br><span class="line">  padding: <span class="number">12px</span></span><br><span class="line">  &amp;:hover</span><br><span class="line">    background: <span class="number">#4976f5</span></span><br><span class="line">    color: white <span class="meta">!important</span></span><br><span class="line">  .link_icon,.link_content</span><br><span class="line">    height: <span class="number">4rem</span></span><br><span class="line">  .link_icon</span><br><span class="line">    img,svg</span><br><span class="line">      height: <span class="number">4rem</span></span><br><span class="line">      width: <span class="number">4rem</span></span><br><span class="line">  .link_content</span><br><span class="line">    margin-left: <span class="number">1rem</span></span><br><span class="line">    width: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">6rem</span>)</span><br><span class="line">    overflow: hidden</span><br><span class="line">    line-height: <span class="number">1.5</span></span><br><span class="line">    display: flex</span><br><span class="line">    flex-direction: column</span><br><span class="line">    justify-content: center</span><br><span class="line">    .link_title</span><br><span class="line">      font-weight: bold</span><br><span class="line">      font-size: <span class="number">1.2rem</span></span><br><span class="line">    .link_title,.link_desc</span><br><span class="line">      word-break: break-all</span><br><span class="line">      overflow:hidden</span><br><span class="line">      text-overflow: ellipsis</span><br><span class="line">    &amp;:<span class="built_in">not</span>(:<span class="built_in">has</span>(.link_desc)) .link_title</span><br><span class="line">      display:-webkit-box</span><br><span class="line">      -webkit-box-orient:vertical</span><br><span class="line">      -webkit-line-clamp:<span class="number">2</span></span><br><span class="line">    .link_desc</span><br><span class="line">      opacity: .<span class="number">6</span></span><br><span class="line">    .link_desc,&amp;:<span class="built_in">has</span>(.link_desc) .link_title</span><br><span class="line">      white-space: nowrap</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>注意：<code>内容不能有英文逗号</code>，不然会出bug</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用html是为了高亮代码，不必在意 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 参数如下： --&gt;</span></span><br><span class="line">&#123;% link 链接,标题,图标,介绍 %&#125;</span><br><span class="line"><span class="comment">&lt;!-- 示例如下： --&gt;</span></span><br><span class="line">&#123;% link https://blog.leonus.cn/,Leonus,https://blog.leonus.cn/favicon.ico,进一寸有进一寸的欢喜。 %&#125;</span><br><span class="line"><span class="comment">&lt;!-- 你也可以什么都不填，将会全部使用默认值，如下： --&gt;</span></span><br><span class="line">&#123;% card %&#125;</span><br><span class="line"><span class="comment">&lt;!-- 你也可以省略部分内容，如下： --&gt;</span></span><br><span class="line">&#123;% link https://blog.leonus.cn/ %&#125;</span><br><span class="line"><span class="comment">&lt;!-- 位置在后面的参数不填的话可以直接省略，但是如果中间的不想填必须留空，如下： --&gt;</span></span><br><span class="line">&#123;% link https://blog.leonus.cn/,,,进一寸有进一寸的欢喜。 %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>链接</td><td>如果连接中包含http则新标签打开，否则本标签页打开</td><td>无</td></tr><tr><td>标题</td><td>网站的标题</td><td>点击直达链接</td></tr><tr><td>图标</td><td>网站favicon<code>链接</code></td><td></td></tr><tr><td>介绍</td><td>网站的description</td><td>无</td></tr></tbody></table><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>有什么问题可以留言，也可以根据自身需求进行修改。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文参考自：&lt;/p&gt;
&lt;div calss=&#39;anzhiyu-tag-link&#39;&gt;&lt;a class=&quot;tag-Link&quot; target=&quot;_blank&quot; href=&quot;https://blog.leonus.cn/favicon.ico&quot;&gt;
    &lt;div class=&quot;t</summary>
      
    
    
    
    <category term="技术" scheme="https://icu007work.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Nginx反向代理服务器端口至二级域名</title>
    <link href="https://icu007work.github.io/archives/13767a3a.html"/>
    <id>https://icu007work.github.io/archives/13767a3a.html</id>
    <published>2023-04-12T10:59:50.000Z</published>
    <updated>2023-07-31T12:40:09.635Z</updated>
    
    <content type="html"><![CDATA[<p>要将 Nginx 配置为反向代理到另一个端口，需要进行以下步骤：</p><h2 id="一、安装-Nginx"><a href="#一、安装-Nginx" class="headerlink" title="一、安装 Nginx"></a>一、安装 Nginx</h2><p>如果还没有安装 Nginx，可以使用以下命令在 Ubuntu 上进行安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">复制代码sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><h2 id="二、配置-Nginx-反向代理"><a href="#二、配置-Nginx-反向代理" class="headerlink" title="二、配置 Nginx 反向代理"></a>二、配置 Nginx 反向代理</h2><h3 id="2-1-不使用-HTTPS"><a href="#2-1-不使用-HTTPS" class="headerlink" title="2.1 不使用 HTTPS"></a>2.1 不使用 HTTPS</h3><ul><li>例如需要反代我们服务器的8080端口且不适用HTTPS，可以进行以下操作。</li><li>在 Nginx 的配置文件(一般为Nginx安装目录下的 <code>nginx.conf</code> )中添加以下内容，将 HTTP 请求代理到服务器的 8080 端口。需要将 <code>example.com</code> 替换为域名或 IP 地址，<code>/</code> 后面的路径应该是需要代理的应用程序的路径。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name example.com; //需要更改为你的域名</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://localhost:8080/; //需要更改为要反代的端口</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-使用-HTTPS"><a href="#2-2-使用-HTTPS" class="headerlink" title="2.2 使用 HTTPS"></a>2.2 使用 HTTPS</h3><ul><li>使用HTTPS的情况下，需要先在服务器上安装SSL证书，可以通过Let’s Encrypt等服务获取免费的SSL证书。然后，可以按照以下步骤进行反向代理：</li><li>编辑Nginx配置文件<code>nginx.conf</code>，添加以下内容：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name your_domain_name.com;               #需要更改</span><br><span class="line"></span><br><span class="line">    ssl_certificate /path/to/your/cert.pem;         #需要更改</span><br><span class="line">    ssl_certificate_key /path/to/your/key.key;      #需要更改</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http://my_app;                     #需要更改</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 或者以下命令</span><br><span class="line">server </span><br><span class="line">    &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        listen       443;</span><br><span class="line">        server_name  your_domain_name.com;          #需要更改</span><br><span class="line">        ssl on;</span><br><span class="line">        ssl_certificate /path/to/your/cert.pem;</span><br><span class="line">        ssl_certificate_key /path/to/your/key.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  </span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  </span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        if ($host ~* ^\d+\.\d+\.\d+\.\d+$) &#123; </span><br><span class="line">           return 444; # 如果请求的是 IP 地址 返回空响应包，禁止访问</span><br><span class="line">           &#125;</span><br><span class="line">        location / &#123;</span><br><span class="line">                client_max_body_size 500M;</span><br><span class="line"></span><br><span class="line">                #proxy_redirect off;</span><br><span class="line">                proxy_set_header Host $proxy_host;</span><br><span class="line">                proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_pass http://localhost:8080;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>其中，<code>your_server_port</code>是你的服务器应用端口号，<code>your_domain_name.com</code>是你的域名，<code>/path/to/your/cert.pem</code>和<code>/path/to/your/key.key</code>分别是你的SSL证书和私钥文件的路径。该配置将来自NGINX监听的80端口的请求，重定向到443端口，并使用SSL证书对HTTPS请求进行加密。</li></ul><h2 id="三、重新加载-Nginx-配置"><a href="#三、重新加载-Nginx-配置" class="headerlink" title="三、重新加载 Nginx 配置"></a>三、重新加载 Nginx 配置</h2><ul><li>执行以下命令以重新加载 Nginx 配置：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t &amp;&amp; sudo service nginx reload</span><br><span class="line">// 或者执行以下命令重启 nginx</span><br><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><ul><li>现在，Nginx 将代理到服务器的 8080 端口。在浏览器中反代过的域名或 IP 地址，应该就能够访问应用程序了。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;要将 Nginx 配置为反向代理到另一个端口，需要进行以下步骤：&lt;/p&gt;
&lt;h2 id=&quot;一、安装-Nginx&quot;&gt;&lt;a href=&quot;#一、安装-Nginx&quot; class=&quot;headerlink&quot; title=&quot;一、安装 Nginx&quot;&gt;&lt;/a&gt;一、安装 Nginx&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="技术" scheme="https://icu007work.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Font-Awesome-Animation各个图标效果</title>
    <link href="https://icu007work.github.io/archives/82958ed6.html"/>
    <id>https://icu007work.github.io/archives/82958ed6.html</id>
    <published>2022-08-27T03:35:26.000Z</published>
    <updated>2023-07-31T12:40:09.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Font-Awesome-Animation各个图标效果"><a href="#Font-Awesome-Animation各个图标效果" class="headerlink" title="Font Awesome Animation各个图标效果"></a>Font Awesome Animation各个图标效果</h1><table><thead><tr><th>编号</th><th>动画</th><th>效果</th></tr></thead><tbody><tr><td>1</td><td>faa-wrench</td><td>faa-wrench</td></tr><tr><td>2</td><td>faa-ring</td><td>响铃</td></tr><tr><td>3</td><td>faa-horizontal</td><td>左右震动</td></tr><tr><td>4</td><td>faa-vertical</td><td>上下震动</td></tr><tr><td>5</td><td>faa-flash</td><td>若隐若现</td></tr><tr><td>6</td><td>faa-bounce</td><td>跳高高</td></tr><tr><td>7</td><td>faa-spin</td><td>顺时针旋转</td></tr><tr><td>8</td><td>faa-float</td><td>像气球一样悬浮</td></tr><tr><td>9</td><td>faa-pulse</td><td>像气球时而变大时而变小</td></tr><tr><td>10</td><td>faa-shake</td><td>摇头，和faa-wrench相似</td></tr><tr><td>11</td><td>faa-tada</td><td>时而靠近时而远离</td></tr><tr><td>12</td><td>faa-passing</td><td>从左边出现，从右边消失</td></tr><tr><td>13</td><td>faa-passing-reverse</td><td>和faa-passing相反</td></tr><tr><td>14</td><td>faa-burst</td><td>变大后很快消失</td></tr><tr><td>15</td><td>faa-falling</td><td>下降</td></tr><tr><td>16</td><td>faa-rising</td><td>上升</td></tr></tbody></table><blockquote><p>[IconName] animated 加载时生效<br>[IconName] animated-hover 鼠标悬停在icon生效</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Font-Awesome-Animation各个图标效果&quot;&gt;&lt;a href=&quot;#Font-Awesome-Animation各个图标效果&quot; class=&quot;headerlink&quot; title=&quot;Font Awesome Animation各个图标效果&quot;&gt;&lt;/a&gt;Fo</summary>
      
    
    
    
    <category term="资源" scheme="https://icu007work.github.io/categories/%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="随笔" scheme="https://icu007work.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>分析Android项目运行</title>
    <link href="https://icu007work.github.io/archives/7d2e59d3.html"/>
    <id>https://icu007work.github.io/archives/7d2e59d3.html</id>
    <published>2022-08-26T03:41:59.000Z</published>
    <updated>2023-07-31T12:40:09.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分析安卓项目如何运行"><a href="#分析安卓项目如何运行" class="headerlink" title="分析安卓项目如何运行"></a>分析安卓项目如何运行</h2><h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段话表示对HelloWorldActivity这个活动进行注册，<font color = "red"><strong> 没有 </strong></font> 在AndroidManifest.xml中<font color = "red"><strong> 注册的活动是不能使用的 </strong></font> 。其中<font color = "red"><strong> intent-filter里的两行代码尤为重要 </strong></font> 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这两行代码表示HelloWorldActivity是这个项目的主活动。</p><h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><p>活动是应用程序的门面，凡是在应用中看到的东西，都是放在活动中的。，所以我们看到的界面，就是MainActivity这个活动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MainActivity 继承自 AppCompatActivity，Activity是一个Android系统提供的活动基类，我们项目中所有活动都必须继承它或者它的子类才能拥有活动的特性（AppCompatActivity是Activity的子类）。</p><p>MainActivity有一个onCreate()方法,这个方法是每一个活动被创建时必定要执行的方法，但是也只有两行代码。并且我们并没有看到HelloWorld字样。</p><p>我们看不到HelloWorld的原因是因为Android程序设计是<font style="background:green" font color = white><strong> 逻辑与视图分离 </strong></font> ，不推荐直接在活动中直接编写界面。更多的做法是<font style="background:green" font color = white><strong> 在布局文件中编写界面，然后再在活动中引入进来 </strong></font> 。在onCreate()方法的第二行调用了<font style="background:green" font color = white><strong> setContentView(R.layout.activity_main)方法 </strong></font> ，这个方法给当前活动引入了一个布局，所以HelloWorld是在这里定义的。</p><p>其中布局文件都是定义在res&#x2F;layout 目录下的，展开layout目录，可以看到：activity_main.xml文件，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Hello World!&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用于在布局中显示文字的是一个TextView控件，而我们可以通过android:text&#x3D;”Hello World!”这句代码定义需要显示什么文字。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;分析安卓项目如何运行&quot;&gt;&lt;a href=&quot;#分析安卓项目如何运行&quot; class=&quot;headerlink&quot; title=&quot;分析安卓项目如何运行&quot;&gt;&lt;/a&gt;分析安卓项目如何运行&lt;/h2&gt;&lt;h3 id=&quot;AndroidManifest-xml&quot;&gt;&lt;a href=&quot;#An</summary>
      
    
    
    
    <category term="技术" scheme="https://icu007work.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>第一个Android程序</title>
    <link href="https://icu007work.github.io/archives/c521edc1.html"/>
    <id>https://icu007work.github.io/archives/c521edc1.html</id>
    <published>2022-08-26T03:40:36.000Z</published>
    <updated>2023-07-31T12:40:09.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建第一个Android项目"><a href="#创建第一个Android项目" class="headerlink" title="创建第一个Android项目"></a>创建第一个Android项目</h2><h3 id="创建HelloWorld项目"><a href="#创建HelloWorld项目" class="headerlink" title="创建HelloWorld项目"></a>创建HelloWorld项目</h3><p>先在Android上面new一个Project，输入应用名称、公司域名然后选择项目代码存放位置。然后再选择活动界面，给创建的活动和布局命名。然后等待项目创建成功。</p><h3 id="启动设备（模拟器或者实体设备）"><a href="#启动设备（模拟器或者实体设备）" class="headerlink" title="启动设备（模拟器或者实体设备）"></a>启动设备（模拟器或者实体设备）</h3><p>模拟器安装步骤：</p><ol><li><p>下载SDK：目前官网上已经没有单独的SDK下载安装包了。谷歌官网推荐的是下载包含有Android SDK的Android Studio。<a href="https://developer.android.com/studio/">官网下载</a>地址</p></li><li><p><font color = "red"><strong> 安装路径需记住 </strong></font> ：本人安装路径为：E:\Program Files\Android\SDK_Tools</p></li></ol><p><img src="https://m.360buyimg.com/babel/jfs/t1/87812/3/29255/39841/62b9474fE6fd09a54/b52fbb814d641d1f.png" alt="目录"></p><ol start="3"><li>双击打开AVD Manager.exe（选择下列文件安装）选择完成之后点install</li></ol><p><img src="https://m.360buyimg.com/babel/jfs/t1/36673/34/16367/135571/62b947d0E35bf8fde/e82391d638b98122.png" alt="下载"></p><ol start="4"><li>勾选左下角  Accept License，开始安装</li></ol><p><img src="https://m.360buyimg.com/babel/jfs/t1/216102/34/19510/57309/62b94867E901dfbef/32f93d3c8c72f9c3.png" alt="Accept"></p><ol start="5"><li>耐心等待其下载完成</li></ol><p><img src="https://m.360buyimg.com/babel/jfs/t1/213735/7/20495/57747/62b948a8Ef5d95be8/458f6cb626d76972.png" alt="下载"></p><ol start="6"><li>配置SDK环境</li></ol><p>“右键 我的电脑”—“属性”—“高级系统设置”—“环境变量”—“系统变量”—“新建”</p><p>ANDROID_SDK_HOME其值为E:\Program Files\Android\SDK_Tools</p><p><img src="https://m.360buyimg.com/babel/jfs/t1/14597/4/16956/49620/62b97c9eE81609139/5ae3ef33e9c23834.png" alt="环境变量"></p><p>编辑Path变量，新增如下两项，<font style="background:green" font color = white><strong> %ANDROID_SDK_HOME%\platform-tools </strong></font> 、<font style="background:green" font color = white><strong> %ANDROID_SDK_HOME%\tools </strong></font> </p><p><img src="https://m.360buyimg.com/babel/jfs/t1/119511/30/23462/35517/62b97cf2E1900381f/d8be8bb741150705.png" alt="Path"></p><h3 id="运行第一个项目"><a href="#运行第一个项目" class="headerlink" title="运行第一个项目"></a>运行第一个项目</h3><p><img src="https://m.360buyimg.com/babel/jfs/t1/8552/30/18256/147697/62b954f9Eb9ea1f86/c853c46249cc52c1.png" alt="运行"></p><p><img src="https://m.360buyimg.com/babel/jfs/t1/177838/11/25850/13873/62b91a90Ead9d07eb/fe87b0ca60bff876.png" alt="第一个Android项目"></p><h3 id="分析第一个Android程序"><a href="#分析第一个Android程序" class="headerlink" title="分析第一个Android程序"></a>分析第一个Android程序</h3><h4 id="Project目录"><a href="#Project目录" class="headerlink" title="Project目录"></a>Project目录</h4><p><img src="https://m.360buyimg.com/babel/jfs/t1/198246/23/25013/22163/62b95440Ea92a2960/08d623ec793aa4a3.png" alt="Project目录"></p><ol><li><p><font color = "red"><strong> .gradle和.idea </strong></font> ：Android Studio自动生成的目录，无须关心。</p></li><li><p><font color = "red"><strong> app </strong></font> ：项目中的代码、资源等内容 几乎都是放置在这个目录当中的，后续开发工作也是在这个目录当中进行的。</p></li><li><p><font color = "red"><strong> build </strong></font> ：包含了一些在编译时自动生成的文件。</p></li><li><p><font color = "red"><strong> gradle </strong></font> ：这个目录下包含gradle wrapper的配置文件，使用gradle wrapper的方式无须提前下载gradle，Android Studio会根据本地缓存情况来决定是否需要下载gradle。Android Studio默认没有开启gradle wrapper，如需打开，可点击导航栏 —&gt; File —&gt; Settings —&gt; Build， Execution, Deployment —&gt; Gradle,进行配置更改.</p></li><li><p><font color = "red"><strong> .gitgnore </strong></font> ：用来指定目录或文件排除在版本控制之外。</p></li><li><p><font color = "red"><strong> build.gradle </strong></font> ：这是项目的全局gradle构建脚本，通常情况下这个文件内容无须更改。</p></li><li><p><font color = "red"><strong> gradle.properties </strong></font> ：这是项目的全局gradle配置文件，在这里配置的属性会影响到项目中所有的gradle编译脚本。</p></li><li><p><font color = "red"><strong> gradlew和gradlew.bat </strong></font> ：这两个文件是用来在命令行界面执行gradle命令的，其中gradlew是在Linux和Mac系统中使用的，gradlew.bat是在Windows系统中使用的。</p></li><li><p><font color = "red"><strong> ProjectName.iml </strong></font> ：iml文件是所有Intellij IDEA项目都会自动生成的一个文件（Android Studio基于Intellij IDEA），用于标识这是一个Intellij IDEA项目，我们无需修改。</p></li><li><p><font color = "red"><strong> local.properties </strong></font> ：用于指定本机中的Android SDK路径，一般情况下无需修改，除非本机的SDK位置发生变化。</p></li><li><p><font color = "red"><strong> settings.gradle </strong></font> ：这个文件用于指定项目中所有引入的模块。通常情况下模块的引入是自动完成的，需要手动修改的情况较少。</p></li></ol><p><font style="background:blue" font color = white> 我们不难发现，除app目录外其他目录均为自动生成的目录，所以app目录才是我们以后工作的重点 </font> </p><hr><h4 id="app目录"><a href="#app目录" class="headerlink" title="app目录"></a>app目录</h4><p><img src="https://m.360buyimg.com/babel/jfs/t1/126318/30/23870/10698/62b9574eE8636e973/ca6126a62c59951b.png" alt="app目录"></p><ol><li><font color = "red"><strong> build </strong></font> ：与外层build目录相似，主要也是包含了一些在编译时自动生成的文件，不过它里面的内容更为繁杂</li><li><font color = "red"><strong> libs </strong></font> ：如果项目中使用了第三方jar包，就需要把这些jar包都放在libs目录下。放在这个目录的jar包将会被自动添加到构建路径当中。</li><li><font color = "red"><strong> androidTest </strong></font> ：此处用来编写AndroidTest测试用例，可以对项目进行一个自动化测试。</li><li><font color = "red"><strong> java </strong></font> ：java目录是放置所有java代码的地方，展开该目录就可以看到已经创建的目录。</li><li><font color = "red"><strong> res  </strong></font> ：项目中所使用到的图片、布局、字符串等资源都要存放在这个目录中。此目录还存在很多子目录：图片存放在drawable目录下，布局放在layout下，字符串放在values目录下。</li><li><font color = "red"><strong> AndroidManifest.xml </strong></font> ：这是整个Android项目的配置文件，在程序中定义的所有四大组件都需要在这个文件里注册，另外还可以在这个文件中给应用程序添加权限说明。</li><li><font color = "red"><strong> test </strong></font> ：此处用来编写Unit Test测试用例，是对项目项目进行自动化测试的另一种方式。</li><li><strong>.gitgnore</strong> ：这个文件用于将app模块内的指定目录或文件排除在版本控制之外，作用和外层的.gitgnore文件类似。</li><li><strong>app.iml</strong> ：Intellij IDEA项目自动生成的文件，无需关心。</li><li><strong>build.gradle</strong> ：是app模块的gradle构建脚本，这个文件中会指定很多项目构建相关的配置。</li><li><strong>proguard-rules.pro</strong> ：这个文件用于指定代码的混淆规则，当代码开发完成后打成安装包文件，如果不希望被别人破解，通常会将代码进行混淆，从而让破解者难以阅读。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;创建第一个Android项目&quot;&gt;&lt;a href=&quot;#创建第一个Android项目&quot; class=&quot;headerlink&quot; title=&quot;创建第一个Android项目&quot;&gt;&lt;/a&gt;创建第一个Android项目&lt;/h2&gt;&lt;h3 id=&quot;创建HelloWorld项目&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="技术" scheme="https://icu007work.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="随笔" scheme="https://icu007work.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="Android" scheme="https://icu007work.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>xray面板安装</title>
    <link href="https://icu007work.github.io/archives/25e76629.html"/>
    <id>https://icu007work.github.io/archives/25e76629.html</id>
    <published>2022-08-26T03:37:14.000Z</published>
    <updated>2023-07-31T12:40:09.628Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="一、升级yum，安装curl依赖包"><a href="#一、升级yum，安装curl依赖包" class="headerlink" title="一、升级yum，安装curl依赖包"></a>一、升级yum，安装curl依赖包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update -y &amp;&amp; yum install curl -y</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>yum update -y</code>为更新yum</p><p><code>yum install curl -y</code>为安装curl依赖包。</p><h2 id="二、重启系统"><a href="#二、重启系统" class="headerlink" title="二、重启系统"></a>二、重启系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="三、安装Xray面板"><a href="#三、安装Xray面板" class="headerlink" title="三、安装Xray面板"></a>三、安装Xray面板</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</span><br></pre></td></tr></table></figure><h2 id="四、centos安装宝塔面板"><a href="#四、centos安装宝塔面板" class="headerlink" title="四、centos安装宝塔面板"></a>四、centos安装宝塔面板</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;一、升级yum，安装curl依赖包&quot;&gt;&lt;a href=&quot;#一、升级yum，安装curl依赖包&quot; class=&quot;headerlink&quot; title=&quot;一、升级yum，安装curl依赖包&quot;&gt;&lt;/a&gt;一、升级yum，安装curl依赖包&lt;/h2&gt;</summary>
      
    
    
    
    <category term="技术" scheme="https://icu007work.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="随笔" scheme="https://icu007work.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>预装APP安装过程</title>
    <link href="https://icu007work.github.io/archives/3e55a450.html"/>
    <id>https://icu007work.github.io/archives/3e55a450.html</id>
    <published>2022-08-26T03:35:26.000Z</published>
    <updated>2023-07-31T12:40:09.717Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="一、将app上传到项目目录"><a href="#一、将app上传到项目目录" class="headerlink" title="一、将app上传到项目目录"></a>一、将app上传到项目目录</h2><p>以更新SQ47的ScannerTool为例</p><p>进入目录，若有安装目录则直接进入，若没有则新建目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> SQ47/vendor/urovo/prebuilt/apps/ScannerTool/</span><br></pre></td></tr></table></figure><h2 id="二、上传app"><a href="#二、上传app" class="headerlink" title="二、上传app"></a>二、上传app</h2><p>可使用Xftp，ftp文件传输工具上传，也可以使用磁盘映射直接拷贝。</p><h2 id="三、修改配置文件"><a href="#三、修改配置文件" class="headerlink" title="三、修改配置文件"></a>三、修改配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> SQ47/vendor/urovo/prebuilt/XX</span><br><span class="line">vim PREBUILT_SQ47_CN_XX_XX.csv</span><br></pre></td></tr></table></figure><p>然后找到ScannerTool的包名那一行，更新版本号即可。如图所示：</p><p><img src="https://m.360buyimg.com/babel/jfs/t1/68572/19/21316/127652/62f9af0fE1ace48d7/9be96eb761f1f84f.png" alt="ScannerTool"></p><p>&#x3D;&#x3D;其他软件更新或预装步骤同上&#x3D;&#x3D;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;一、将app上传到项目目录&quot;&gt;&lt;a href=&quot;#一、将app上传到项目目录&quot; class=&quot;headerlink&quot; title=&quot;一、将app上传到项目目录&quot;&gt;&lt;/a&gt;一、将app上传到项目目录&lt;/h2&gt;&lt;p&gt;以更新SQ47的Scann</summary>
      
    
    
    
    <category term="技术" scheme="https://icu007work.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="随笔" scheme="https://icu007work.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>记第公司开发环境搭建</title>
    <link href="https://icu007work.github.io/archives/12ce6b69.html"/>
    <id>https://icu007work.github.io/archives/12ce6b69.html</id>
    <published>2022-08-26T03:34:19.000Z</published>
    <updated>2023-07-31T12:40:09.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-adb安装"><a href="#一-adb安装" class="headerlink" title="一.adb安装"></a>一.adb安装</h2><ol><li><p>点击 <a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip?hl=zh-cn">下载连接 </a>即可下载适用于Windows的SDK Platform-Tools.</p></li><li><p>下载完成后解压，然后添加路径到环境变量。</p></li></ol><p><strong>解压路径为：D:\EdgeDownloads\platform-tools</strong>（保存下来）</p><p><img src="https://m.360buyimg.com/babel/jfs/t1/35970/17/16229/50128/62b57f5aEedce3be3/f77850d02f581624.png" alt="解压路径"></p><p>在环境变量中添加路径：找到图标 “我的电脑”–右击–点击 ”属性“–找到 ”高级系统设置“并点击进入环境变量设置页；点击”环境变量“–系统变量框下 找到“Path”–编辑–新建–将刚才复制的adb路径粘贴上去</p><p><img src="https://m.360buyimg.com/babel/jfs/t1/34968/34/16246/66294/62b58029Efe52db27/3c84c1290f3a39df.png" alt="环境变量"></p><ol start="3"><li>验证adb是否安装成功。</li></ol><p>win+r 输入cmd启用cmd窗口后输入：adb version 若弹出adb版本信息则adb安装成功。</p><p><img src="https://m.360buyimg.com/babel/jfs/t1/217622/5/19070/33510/62b5811bE4b276d67/1adb59476cf2b3db.png" alt="安装成功"></p><h2 id="二-JDK安装"><a href="#二-JDK安装" class="headerlink" title="二.JDK安装"></a>二.JDK安装</h2><ol><li>点击<a href="https://download.oracle.com/java/18/latest/jdk-18_windows-x64_bin.exe">下载链接</a> 即可下载JDK（Windows版本）其余版本可在：<a href="https://www.oracle.com/java/technologies/downloads/#jdk18-windows">Java Downloads | Oracle</a> 此页面下载。</li><li>下载好后双击安装</li></ol><p><img src="https://m.360buyimg.com/babel/jfs/t1/224016/16/13063/82679/62b582ecE34b670db/65fc5763fac034ee.png" alt="安装过程"></p><p>根据需求更改安装路径（需记住）：C:\Program Files\Java\jdk1.8.0_202\</p><p><img src="https://m.360buyimg.com/babel/jfs/t1/73197/27/20287/26502/62b58337E9b4aada3/ec12959677015922.png" alt="安装路径"></p><ol start="3"><li>安装完成后，在系统环境变量中添加JDK路径。</li></ol><p>在系统变量中新增Java_Home变量，其值为刚刚的安装路径：C:\Program Files\Java\jdk1.8.0_202\</p><p><img src="https://m.360buyimg.com/babel/jfs/t1/25209/20/17164/41333/62b583dfE53b1f2cb/be25cd34f2fbcf46.png" alt="系统变量"></p><p>然后双击系统变量中的Path变量添加如下两个值：</p><p>%Java_Home%\bin</p><p>%Java_Home%\jre\bin</p><p><img src="https://m.360buyimg.com/babel/jfs/t1/194805/18/25873/32389/62b58466Edf252e47/32b820e84845ac46.png" alt="Path"></p><ol start="3"><li>验证jdk是否安装成功。</li></ol><p>win+r 输入cmd启用cmd窗口后输入：java -version 若弹出java版本信息则java安装成功。</p><p><img src="https://m.360buyimg.com/babel/jfs/t1/220338/3/20872/33982/62b585daE026e6fef/8b0313fb4166d714.png" alt="安装成功"></p><h2 id="三-git安装"><a href="#三-git安装" class="headerlink" title="三.git安装"></a>三.git安装</h2><ol><li><p>点击 <a href="https://github.com/git-for-windows/git/releases/download/v2.36.1.windows.1/Git-2.36.1-64-bit.exe">下载链接</a> 即可下载git（Windows版本），或前往(<a href="https://git-scm.com/downloads">Git - Downloads (git-scm.com)</a>) 下载其他版本</p></li><li><p>下载完成后双击打开一路next<del>（不是）</del></p></li></ol><p><img src="https://m.360buyimg.com/babel/jfs/t1/28240/39/17697/49484/62b5879cE17933744/c32143ea4b297e77.png" alt="安装步骤01"></p><ol start="3"><li>配置环境变量</li></ol><p>双击系统变量中的Path变量添加如下两个值（Git安装路径）：</p><p>E:\Program Files\Git</p><p>E:\Program Files\Git\git-bash.exe</p><p><img src="https://m.360buyimg.com/babel/jfs/t1/36714/16/16257/30239/62b5890cEab9e3bff/b76c9706c23776bc.png" alt="环境变量"></p><ol start="4"><li>查看是否安装成功</li></ol><p>打开 git bash 输入：git version（若出现版本号则证明安装成功）</p><p><img src="https://m.360buyimg.com/babel/jfs/t1/79345/1/19277/14474/62b58963E52b5d30f/af0006c312fac373.png" alt="安装成功"></p><h2 id="四-Xshell安装"><a href="#四-Xshell安装" class="headerlink" title="四.Xshell安装"></a>四.Xshell安装</h2><ol><li>点击 <a href="https://www.xshell.com/zh/downloading/?token=NV9aZnBRYkhnaFBLYXBPRWpMeWNJd0BDTW9sNWh4aE9nc3k2dm14cTJvMHhR">下载链接</a> 即可下载Xshell个人免费版。</li><li>下载完成后点击安装。</li><li>个人安装时所遇到的问题：安装后点击打开，弹出以下窗口：应用程序无法正常启动(0xc000007b)，请单击确定关闭应用程序.</li><li>解决办法，点击 <a href="https://develope.lanzoug.com/file/?BmAHOQEwUmMDCgA4Cz5TP1FuBz8FHlM4VyJTMFJtWi8JUQIKXFNTYgguUGcHOlEiVSdUFFFgBmxQNlQ8XGMBZQZiBw8BGVJiAzwAIgs2Uz1RZQcrBXRTZlcqU3NSaFoyCWUCMFxeU24IOlA7B2RRY1U6VGRROAY2UGVUYFwmAWYGdQdtAW1SNANnAGALa1NrUTsHMQVoU3dXIFMlUjNaaQk5AmdcM1MoCG5QMAd8UWJVPVR+UTwGZVBjVDZcNwE4BjEHZgE+UjQDNgA0CztTZlE7BzMFa1NgV2hTY1JrWmoJbAJhXDlTMgg9UDYHZVEzVThUMFEgBjNQLVR0XHUBcwZjByIBNVJiA2gAZwtrU2tRPAc6BWtTZld2UyFSZ1o2CWwCM1w8UzYIaFAzB2VRYFU5VGRROwY2UGJUfFwuASYGYAc8AStSOwNkAGALalNkUTsHNAVuU2VXYlNtUihaLgl5AiJcPFM2CGhQMwdmUWhVOVRjUTsGM1BuVHRcdQFpBnYHbQFoUjUDewBnC2xTYFElBzAFb1NlV35TZ1I/Wmw=">下载链接</a> 下载DirectX修复工具增强版，下载所需依赖。</li><li>修复完成后即可打开。</li></ol><h2 id="五-记恢复电脑path环境变量方法"><a href="#五-记恢复电脑path环境变量方法" class="headerlink" title="五.记恢复电脑path环境变量方法."></a>五.记恢复电脑path环境变量方法.</h2><ol><li>在系统变量中看是否存在Path一项，如果被删除或者丢失，就可能不存在Path了。</li><li>丢失找回方法：</li><li>点击新建，变量名输入为：Path，变量值输入为C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common。再点击确定即可解决。</li></ol><p><img src="https://m.360buyimg.com/babel/jfs/t1/17580/37/17684/44528/62b58b54Eeadc3bda/07524f2f1fc04971.png" alt="找回Path"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-adb安装&quot;&gt;&lt;a href=&quot;#一-adb安装&quot; class=&quot;headerlink&quot; title=&quot;一.adb安装&quot;&gt;&lt;/a&gt;一.adb安装&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;点击 &lt;a href=&quot;https://dl.google.com/android</summary>
      
    
    
    
    <category term="资源" scheme="https://icu007work.github.io/categories/%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="随笔" scheme="https://icu007work.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>记第一次完成业务需求</title>
    <link href="https://icu007work.github.io/archives/55cbdc7c.html"/>
    <id>https://icu007work.github.io/archives/55cbdc7c.html</id>
    <published>2022-08-26T03:31:28.000Z</published>
    <updated>2023-07-31T12:40:09.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一次完成业务需求"><a href="#第一次完成业务需求" class="headerlink" title="第一次完成业务需求"></a>第一次完成业务需求</h2><h3 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h3><p>SQ45C：系统上禁用4G网络。</p><p>SQ51S：1.新增两个内置apk，apk见附件。 2.OS基于：SQ51S_EN_JANAM_WE__ DS __ R01 _ U _220310 _01</p><h3 id="一、拉代码"><a href="#一、拉代码" class="headerlink" title="一、拉代码"></a>一、拉代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">连接服务器命令：</span></span><br><span class="line">ssh 服务器 </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>拉取代码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo init -u ssh:服务器分支.repo/manifests -b 代码分支</span><br></pre></td></tr></table></figure><p><font color = "red"><strong> 拉代码要拉取dev分支下的代码。 </strong></font> </p><ul><li>同步代码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo <span class="built_in">sync</span> -c -j16</span><br></pre></td></tr></table></figure><h3 id="二、根据业务需求查找commit"><a href="#二、根据业务需求查找commit" class="headerlink" title="二、根据业务需求查找commit"></a>二、根据业务需求查找commit</h3><p>根据业务需求前往代码库查找，例如：禁用4G网络则在仓库搜索WIFIONLY</p><p><img src="https://m.360buyimg.com/babel/jfs/t1/203157/34/24925/43201/62babe01Eb19a86ec/f38419d34238ddac.png" alt="wifionly"></p><hr><h3 id="三、根据commit更改代码"><a href="#三、根据commit更改代码" class="headerlink" title="三、根据commit更改代码"></a>三、根据commit更改代码</h3><p><img src="https://m.360buyimg.com/babel/jfs/t1/49492/3/19524/22657/62babeddE0b084ed1/683447184811e927.png" alt="更改代码"></p><p>根据服务器上的提交来修改代码完成需求。</p><h3 id="四、编译代码"><a href="#四、编译代码" class="headerlink" title="四、编译代码"></a>四、编译代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编译命令 </span></span><br><span class="line"><span class="built_in">source</span> build/envsetup.sh 项目名称（比如SQ45C） &amp;&amp; setenv &amp;&amp; make update-api &amp;&amp; make -j8 2&gt;&amp;1 |<span class="built_in">tee</span> build.log</span><br></pre></td></tr></table></figure><p>代码修改完成后进行编译。</p><hr><h3 id="五、刷机测试"><a href="#五、刷机测试" class="headerlink" title="五、刷机测试"></a>五、刷机测试</h3><h2 id="过程中遇到的问题"><a href="#过程中遇到的问题" class="headerlink" title="过程中遇到的问题"></a>过程中遇到的问题</h2><h3 id="拉代码时选错分支"><a href="#拉代码时选错分支" class="headerlink" title="拉代码时选错分支"></a>拉代码时选错分支</h3><p>在拉取45c代码时，拉的是bsp分支的代码。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>切换回dev分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#repo项目切换分支</span></span><br><span class="line">repo forall -c <span class="string">&quot;git clean -d -f;git reset --hard HEAD&quot;</span> -j8</span><br><span class="line">repo init -u ssh:服务器分支 -b 代码分支</span><br><span class="line">repo <span class="built_in">sync</span> -c -d -j8</span><br><span class="line">repo start 代码分支 --all</span><br></pre></td></tr></table></figure><hr><h3 id="刷机报错"><a href="#刷机报错" class="headerlink" title="刷机报错"></a>刷机报错</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gungleVersion</span><br><span class="line">Signature verification failed</span><br><span class="line">error:21</span><br></pre></td></tr></table></figure><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>签名后重新刷入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -Xmx2048m -Djava.library.path=out/host/linux-x86/lib64 -jar out/host/linux-x86/framework/signapk.jar -w vendor/urovo/security/PDA/urovo-none-signed/testkey.x509.pem vendor/urovo/security/PDA/urovo-none-signed/testkey.pk8 out/dist/full_k62_t2145eir_v1_ga_ybx_sq45c-ota-2112071830.zip out/dist/sq45c-ota.zip </span><br><span class="line"></span><br><span class="line">java -Xmx2048m -Djava.library.path=out/host/linux-x86/lib64 -jar out/host/linux-x86/framework/signapk.jar -w testkey.x509.pem&lt;签名证书,保存这公钥&gt; testkey.pk8&lt;签名证书，保存着私钥&gt; base.zip&lt;签名前的os&gt; target.zip&lt;签名后的os&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="无法开机"><a href="#无法开机" class="headerlink" title="无法开机"></a>无法开机</h3><p>签名后重新刷入，开机卡第一屏无法正常开机。</p><h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h4><p>不使用adb sideload刷入，使用线刷工具刷入刷机包即可正常开机。</p><h3 id="小tips："><a href="#小tips：" class="headerlink" title="小tips："></a>小tips：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用vim xxx.java + 行号可以跳到指定行号。</span></span><br><span class="line">vim xxx.java + 行号</span><br></pre></td></tr></table></figure><p><font style="background:green" font color = white><strong> 联发科的机器代码路径在：vendor\mediatek\proprietary\packages\apps\MtkSettings\src\com\android，修改代码时需注意代码路径。 </strong></font> </p><hr><h3 id="编译通过之后提交代码"><a href="#编译通过之后提交代码" class="headerlink" title="编译通过之后提交代码"></a>编译通过之后提交代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在已修改文件的上一级文件夹添加追踪，将文件放入暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件被追踪之后即可提交代码。</span></span><br><span class="line">git commit</span><br><span class="line"></span><br><span class="line"><span class="comment">#提交完代码后可以push到远端。</span></span><br><span class="line">git push caf HEAD:refs/for/+分支路径</span><br><span class="line"><span class="comment">#eg：</span></span><br><span class="line">git push caf HEAD:refs/for/dev/mt6762/SQ45C/11.0.0-100.0.0</span><br></pre></td></tr></table></figure><h3 id="提交代码格式规范"><a href="#提交代码格式规范" class="headerlink" title="提交代码格式规范"></a>提交代码格式规范</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#严格按照所给提示填写，#后面为提示文字</span></span><br><span class="line"><span class="comment">#产品名称：</span></span><br><span class="line">Product:</span><br><span class="line"><span class="comment">#客户定制：通用为XX</span></span><br><span class="line">Customer:</span><br><span class="line"><span class="comment">#模块：一般填Other</span></span><br><span class="line">Module:</span><br><span class="line"><span class="comment">#Bug ID(禅道对应Bug ID,可选)：一般填0000</span></span><br><span class="line">Bug ID:</span><br><span class="line"><span class="comment">#关键字：一般填修改的关键字</span></span><br><span class="line">Key Word:</span><br><span class="line"><span class="comment">#详细描述:与上述一致</span></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请为您的变更输入提交说明。以 &#x27;#&#x27; 开始的行将被忽略，而一个空的提交</span></span><br><span class="line"><span class="comment"># 说明将会终止提交。</span></span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://m.360buyimg.com/babel/jfs/t1/19168/33/17319/56325/62be6536E0abbfdaa/78e0b5a553270528.png" alt="提交代码规范"></p><hr><h3 id="UFS操作"><a href="#UFS操作" class="headerlink" title="UFS操作"></a>UFS操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在要执行操作的文件下检出PDA_UFS</span></span><br><span class="line">git checkout PDA_UFS </span><br><span class="line"></span><br><span class="line"><span class="comment">#把文件pull下来</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>ufs参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果忘记了，执行./ufs.sh 即可重新查看</span></span><br><span class="line">./ufs.sh</span><br></pre></td></tr></table></figure><p><img src="https://m.360buyimg.com/babel/jfs/t1/26509/31/17694/29285/62be681eE0fc2a695/529f27b2653f482c.png" alt="参数"></p><p>ufs配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#├── etc</span></span><br><span class="line"><span class="comment">#│   └── default_Settings_property.xml</span></span><br><span class="line"><span class="comment">#├── media</span></span><br><span class="line"><span class="comment">#│   ├── bootanimation.zip</span></span><br><span class="line"><span class="comment">#│   └── logo.bin</span></span><br><span class="line"><span class="comment">#└── ufs.prop</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一般配置文件有：etc/default_Settings_property.xml此配置文件用于存放数据库信息还有别的一些杂七杂八的信息; etc/app_remove.txt,这里用于配置需要卸载的内置应用包名。</span></span><br><span class="line"><span class="comment">#media/bootanimation.zip  &amp;  media/logo.bin  此目录用于存放定制客户的开机动画。</span></span><br><span class="line"><span class="comment">#ufs.prop 此文件用于存放用户的一些定制属性。</span></span><br></pre></td></tr></table></figure><p><img src="https://m.360buyimg.com/babel/jfs/t1/173612/14/24493/7379/62be68d6E0c6dcb38/25da6fe35a6b0b7f.png" alt="配置文件"></p><hr><p><font style="background:blue" font color = white><strong> 当处理客户定制时，将客户所需的功能对应填写好配置文件。一切准备就绪后可在PDA_UFS根目录下执行.sh可执行文件，随后1-out目录下会生成一个ota更新包，可使用adb将更新包刷入设备。随后开机即可完成定制需求。 </strong></font> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#eg：./ufs.sh 0-commit/SQ45C/111 01 O SQ45C 111 false / 11 false</span></span><br><span class="line"><span class="comment">#SQ45C is mtk project</span></span><br><span class="line"><span class="comment">#jopenjdk version &quot;1.8.0_40&quot;</span></span><br><span class="line"><span class="comment">#OpenJDK Runtime Environment (build 1.8.0_40-b25)</span></span><br><span class="line"><span class="comment">#OpenJDK 64-Bit Server VM (build 25.40-b25, mixed mode)</span></span><br><span class="line"><span class="comment">#CUSIDR: ---/home/ssd7/lcr_work/PDA_UFS/0-commit----- SQ45C/111_d</span></span><br><span class="line"><span class="comment">#11.220630.01</span></span><br><span class="line"><span class="comment">#==========================================================</span></span><br><span class="line"><span class="comment">#Version: 111_V11.220630.01-220630</span></span><br><span class="line"><span class="comment">#Signed: O</span></span><br><span class="line"><span class="comment">#Output: SQ45C_O_111_XX_11.220630.01.zip</span></span><br><span class="line"><span class="comment">#==========================================================</span></span><br><span class="line"><span class="comment">#**********************************************************</span></span><br><span class="line"><span class="comment">#...................................................</span></span><br><span class="line"><span class="comment">#...................................................</span></span><br><span class="line"><span class="comment">#...................................................</span></span><br><span class="line"><span class="comment">#...................................................</span></span><br><span class="line"><span class="comment">#...................................................</span></span><br><span class="line"><span class="comment">#Tring to sign whole file...</span></span><br><span class="line"><span class="comment">#================== Success ========================</span></span><br><span class="line"><span class="comment">#Output: 1-out/SQ45C_O_111_XX_11.220630.01.zip</span></span><br><span class="line"><span class="comment">#===================================================</span></span><br></pre></td></tr></table></figure><ul><li>有道离线词典<a href="http://download.huzheng.org/zh_CN/">下载站</a></li></ul><h2 id="工作中遇到的一些小问题"><a href="#工作中遇到的一些小问题" class="headerlink" title="工作中遇到的一些小问题"></a>工作中遇到的一些小问题</h2><h3 id="adb连接不上设备"><a href="#adb连接不上设备" class="headerlink" title="adb连接不上设备"></a>adb连接不上设备</h3><ol><li>已确定驱动正常安装。</li><li>打开cmd命令行执行adb kill-server和adb start-server还是无法得到解决。输入 adb devices报错：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 报错信息</span></span><br><span class="line"><span class="comment"># * daemon not running. starting it now on port 5037 *</span></span><br><span class="line"><span class="comment"># ADB server didn&#x27;t ACK</span></span><br><span class="line"><span class="comment"># * failed to start daemon *</span></span><br></pre></td></tr></table></figure><ol start="3"><li>执行下列命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb nodaemon server</span><br><span class="line"><span class="comment">#报错：出现下面错误</span></span><br><span class="line">cannot <span class="built_in">bind</span> <span class="string">&#x27;tcp:5037&#x27;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>查询哪个程序或进程占用了5037端口</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | findstr <span class="string">&quot;5037&quot;</span></span><br><span class="line"><span class="comment">#如果5037被占用 会出现占用5037端口程序的一些信息</span></span><br><span class="line">  TCP    127.0.0.1:5037         0.0.0.0:0              LISTENING       15256</span><br><span class="line">  TCP    127.0.0.1:5037         127.0.0.1:58161        ESTABLISHED     15256</span><br><span class="line">  TCP    127.0.0.1:58161        127.0.0.1:5037         ESTABLISHED     1472</span><br></pre></td></tr></table></figure><ol start="5"><li>找到占用5037端口的程序或进程之后就好办了，打开任务管理器，结束这个进程。然后再使用adb连接上设备就可以了。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一次完成业务需求&quot;&gt;&lt;a href=&quot;#第一次完成业务需求&quot; class=&quot;headerlink&quot; title=&quot;第一次完成业务需求&quot;&gt;&lt;/a&gt;第一次完成业务需求&lt;/h2&gt;&lt;h3 id=&quot;业务需求&quot;&gt;&lt;a href=&quot;#业务需求&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="技术" scheme="https://icu007work.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="随笔" scheme="https://icu007work.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="git" scheme="https://icu007work.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git-push时冲突解决方法</title>
    <link href="https://icu007work.github.io/archives/80c83deb.html"/>
    <id>https://icu007work.github.io/archives/80c83deb.html</id>
    <published>2022-08-26T01:10:27.000Z</published>
    <updated>2023-07-31T12:40:09.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、冲突原因"><a href="#一、冲突原因" class="headerlink" title="一、冲突原因"></a>一、冲突原因</h2><h3 id="1-1-多人同时修改同一文件"><a href="#1-1-多人同时修改同一文件" class="headerlink" title="1.1 多人同时修改同一文件"></a>1.1 多人同时修改同一文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">liaochongrong@urovo002-07:/home/ssd7/lcr_work/SQ45S$ git cherry-pick -n 4a7c5af22778e57440fdf09921b25e1a40a6d5e0</span><br><span class="line"></span><br><span class="line">error: 不能应用 4a7c5af... Product:SQ45S</span><br><span class="line">提示：冲突解决完毕后，用 &#x27;git add &lt;路径&gt;&#x27; 或 &#x27;git rm &lt;路径&gt;&#x27;</span><br><span class="line">提示：命令标记修正后的文件</span><br><span class="line"></span><br><span class="line">liaochongrong@urovo002-07:/home/ssd7/lcr_work/SQ45S$ git status</span><br><span class="line">位于分支 Pie_SQ45S_Release</span><br><span class="line">您的分支与上游分支 &#x27;origin/Pie_SQ45S_Release&#x27; 一致。</span><br><span class="line">未合并的路径：</span><br><span class="line">  （使用 &quot;git reset HEAD &lt;文件&gt;...&quot; 以取消暂存）</span><br><span class="line">  （使用 &quot;git add &lt;文件&gt;...&quot; 标记解决方案）</span><br><span class="line"></span><br><span class="line">    双方修改：   build/buildprop.mk</span><br><span class="line"></span><br><span class="line">尚未暂存以备提交的变更：</span><br><span class="line">  （使用 &quot;git add &lt;文件&gt;...&quot; 更新要提交的内容）</span><br><span class="line">  （使用 &quot;git checkout -- &lt;文件&gt;...&quot; 丢弃工作区的改动）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-2-缺少change-id"><a href="#1-2-缺少change-id" class="headerlink" title="1.2 缺少change-id"></a>1.2 缺少change-id</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">liaochongrong@urovo002-07:/home/ssd7/lcr_work/SQ45S$ git push origin HEAD:refs/for/Pie_SQ45S_Release</span><br><span class="line">对象计数中: 4, 完成.</span><br><span class="line">Delta compression using up to 64 threads.</span><br><span class="line">压缩对象中: 100% (4/4), 完成.</span><br><span class="line">写入对象中: 100% (4/4), 656 bytes | 0 bytes/s, 完成.</span><br><span class="line">Total 4 (delta 3), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (3/3)</span><br><span class="line">remote: Counting objects: 4, done</span><br><span class="line">remote: Processing changes: refs: 1, done    </span><br><span class="line">remote: ERROR: [19bc4b1] missing Change-Id in commit message footer</span><br><span class="line">remote: </span><br><span class="line">remote: Hint: To automatically insert Change-Id, install the hook:</span><br><span class="line">remote:   gitdir=$(git rev-parse --git-dir); scp -p -P 29418 liaochongrong@192.168.8.215:hooks/commit-msg $&#123;gitdir&#125;/hooks/</span><br><span class="line">remote: And then amend the commit:</span><br><span class="line">remote:   git commit --amend</span><br><span class="line">remote: </span><br><span class="line">To ssh://192.168.8.215:29418/NoUcode/SQ45S</span><br><span class="line"> ! [remote rejected] HEAD -&gt; refs/for/Pie_SQ45S_Release ([19bc4b1] missing Change-Id in commit message footer)</span><br><span class="line">error: 无法推送一些引用到 &#x27;ssh://192.168.8.215:29418/NoUcode/SQ45S&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://m.360buyimg.com/babel/jfs/t1/61562/20/19916/87101/630746a4E781cd8f2/30ce7c00b6bce0a7.png" alt="差异"></p><h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><h3 id="2-1-多人修改"><a href="#2-1-多人修改" class="headerlink" title="2.1 多人修改"></a>2.1 多人修改</h3><ul><li>通过 <code>git status</code>命令找到双方共同修改的文件，然后编辑文件，把多余的代码去掉即可。</li><li>可通过 <code>git diff 文件目录</code>来查看显示已写入暂存区和已经被修改但尚未写入暂存区文件的区别</li></ul><p><img src="https://m.360buyimg.com/babel/jfs/t1/132834/9/26175/55311/63074527Ebe1d9bb2/5731e9aaa5eb446d.png" alt="差异"></p><ul><li>如图，删除标识代码，此冲突即可解决。</li></ul><h3 id="2-2-缺少change-id"><a href="#2-2-缺少change-id" class="headerlink" title="2.2 缺少change-id"></a>2.2 缺少change-id</h3><ul><li>其实这个冲突的解决方法，git已经提示过我们了。就是这一段</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">remote: Hint: To automatically insert Change-Id, install the hook:</span><br><span class="line">remote:   gitdir=$(git rev-parse --git-dir); scp -p -P 29418 liaochongrong@192.168.8.215:hooks/commit-msg $&#123;gitdir&#125;/hooks/</span><br><span class="line">remote: And then amend the commit:</span><br><span class="line">remote:   git commit --amend</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>所以我们只需要执行 <code>gitdir=$(git rev-parse --git-dir); scp -p -P 29418 liaochongrong@192.168.8.215:hooks/commit-msg $&#123;gitdir&#125;/hooks/</code>以及 <code>git commit --amend</code>这两行命令即可。</li><li>当然如果不放心还可以reset 已有的提交：<code>git reset --soft 3bf39e60e2cad62f3ada0414f3cef64f386ccce3</code>，最后那一串为 commit id，reset完了之后，再重新进行提交操作。操作完成后即可看到change-id已经生成了。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、冲突原因&quot;&gt;&lt;a href=&quot;#一、冲突原因&quot; class=&quot;headerlink&quot; title=&quot;一、冲突原因&quot;&gt;&lt;/a&gt;一、冲突原因&lt;/h2&gt;&lt;h3 id=&quot;1-1-多人同时修改同一文件&quot;&gt;&lt;a href=&quot;#1-1-多人同时修改同一文件&quot; class=&quot;</summary>
      
    
    
    
    <category term="技术" scheme="https://icu007work.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="随笔" scheme="https://icu007work.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="git" scheme="https://icu007work.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>WP备份</title>
    <link href="https://icu007work.github.io/archives/b6be31da.html"/>
    <id>https://icu007work.github.io/archives/b6be31da.html</id>
    <published>2022-08-25T14:43:48.000Z</published>
    <updated>2023-07-31T12:40:09.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="argon主题选项"><a href="#argon主题选项" class="headerlink" title="argon主题选项"></a>argon主题选项</h2><h3 id="文本附加内容"><a href="#文本附加内容" class="headerlink" title="文本附加内容"></a>文本附加内容</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">您当前正在 - %link% .页面，阅读由“%author%” 撰写的《%title%》</span><br><span class="line">非常感谢您对我们的网站感兴趣并访问。在您使用本网站之前，请您仔细阅读本声明的所有条款。</span><br><span class="line"></span><br><span class="line">版权声明：</span><br><span class="line">1、本博客属个人所有，不涉及商业目的。</span><br><span class="line">2、本博客内容均为本人编写，图片版权属于原作者，图片仅供大家欣赏和分享，切勿做为商业目的使用。如果侵害了您的合法权益，请您及时与我们，我们会在第一时间删除相关内容！</span><br><span class="line">3、本博客所有原创作品，包括文字、资料、图片、网页格式，转载时请标注作者与来源。非经允许，不得用于赢利目的。</span><br><span class="line">4、本博客受中国知识产权、互联网法规和知识共享条例保护和保障，任何人不得进行旨在破坏或牟取私利的行为。</span><br><span class="line">5、做新时代合格网民，弘扬互联网精神：开放、平等、 协作 、分享；共同构建文明、清朗的网络环境</span><br><span class="line">6、本声明未涉及的问题参见国家有关法律法规，当本声明与国家法律法规冲突时，以国家法律法规为准。</span><br><span class="line">7、当您阅读到这里的时候，即表明已阅读并接受了上述各项条款;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="页脚内容"><a href="#页脚内容" class="headerlink" title="页脚内容"></a>页脚内容</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>Copyright  2022 Xiheya<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span>, All Rights Reserved.<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>本站已<span class="language-xml"><span class="tag">&lt;<span class="name">del</span>&gt;</span></span>稳定运行<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">del</span>&gt;</span></span>:<span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;blog_running_days&quot;</span> <span class="attr">class</span>=<span class="string">&quot;odometer&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> days , <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;blog_running_hours&quot;</span> <span class="attr">class</span>=<span class="string">&quot;odometer&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> h , <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;blog_running_mins&quot;</span> <span class="attr">class</span>=<span class="string">&quot;odometer&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> m , <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;blog_running_secs&quot;</span> <span class="attr">class</span>=<span class="string">&quot;odometer&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> s<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">no-pjax</span>&gt;</span></span></span><br><span class="line">var blog<span class="emphasis">_running_</span>days=document.getElementById(&quot;blog<span class="emphasis">_running_</span>days&quot;);</span><br><span class="line">var blog<span class="emphasis">_running_</span>hours=document.getElementById(&quot;blog<span class="emphasis">_running_</span>hours&quot;);</span><br><span class="line">var blog<span class="emphasis">_running_</span>mins=document.getElementById(&quot;blog<span class="emphasis">_running_</span>mins&quot;);</span><br><span class="line">var blog<span class="emphasis">_running_</span>secs=document.getElementById(&quot;blog<span class="emphasis">_running_</span>secs&quot;);</span><br><span class="line">function refresh<span class="emphasis">_blog_</span>running<span class="emphasis">_time()&#123;</span></span><br><span class="line"><span class="emphasis">    var time = new Date() - new Date(2021, 10, 16, 5, 20, 0);</span></span><br><span class="line"><span class="emphasis">    var d=parseInt(time/24/60/60/1000);</span></span><br><span class="line"><span class="emphasis">    var h=parseInt(time%(24*60*60*1000)/60/60/1000);</span></span><br><span class="line"><span class="emphasis">    var m=parseInt(time%(60*60*1000)/60/1000);</span></span><br><span class="line"><span class="emphasis">    var s=parseInt(time%(60*1000)/1000);</span></span><br><span class="line"><span class="emphasis">    blog_</span>running<span class="emphasis">_days.innerHTML=d;</span></span><br><span class="line"><span class="emphasis">    blog_</span>running<span class="emphasis">_hours.innerHTML=h;</span></span><br><span class="line"><span class="emphasis">    blog_</span>running<span class="emphasis">_mins.innerHTML=m;</span></span><br><span class="line"><span class="emphasis">    blog_</span>running<span class="emphasis">_secs.innerHTML=s;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis">refresh_</span>blog<span class="emphasis">_running_</span>time();</span><br><span class="line">if (typeof(bottomTimeIntervalHasSet) == &quot;undefined&quot;)&#123;</span><br><span class="line"><span class="code">    var bottomTimeIntervalHasSet = true;</span></span><br><span class="line"><span class="code">    setInterval(function()&#123;refresh_blog_running_time();&#125;,500);</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="主题颜色"><a href="#主题颜色" class="headerlink" title="主题颜色"></a>主题颜色</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#9a92b9</span></span><br><span class="line"></span><br><span class="line">banner副标题：记录我的日常生活&amp;学习笔记</span><br><span class="line">页面背景：https://img30.360buyimg.com/pop/jfs/t1/128389/8/25215/1839159/622820daEea902288/cdc24c6bd0f9c593.jpg</span><br></pre></td></tr></table></figure><hr><h3 id="左侧栏"><a href="#左侧栏" class="headerlink" title="左侧栏"></a>左侧栏</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">左侧栏标题</span><br><span class="line">与君共赴，万里征程。</span><br><span class="line"></span><br><span class="line">左侧栏子标题（格言）</span><br><span class="line">--hitokoto--</span><br><span class="line"></span><br><span class="line">左侧栏作者名称</span><br><span class="line">未可知.</span><br><span class="line"></span><br><span class="line">左侧栏作者头像地址</span><br><span class="line">https://img30.360buyimg.com/pop/jfs/t1/131661/35/25896/114014/62246b27Ec3b050cb/373a661d7463f92a.png</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="留言板与友链"><a href="#留言板与友链" class="headerlink" title="留言板与友链"></a>留言板与友链</h2><h3 id="留言板内容："><a href="#留言板内容：" class="headerlink" title="留言板内容："></a>留言板内容：</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">留言规则</span><br><span class="line"></span><br><span class="line">留言者应遵守国家相关法律法规，不得发表违反中华人民共和国宪法、法律和有关政策的言论;</span><br><span class="line">留言者承担因留言行为而直接或间接引起的法律责任;</span><br><span class="line">本博客拥有发布、编辑、删除公众留言的权利，凡不符合本须知规定的留言将予以删除;</span><br><span class="line">如果你有任何问题或是要求，可以在这里给我发送消息;</span><br><span class="line">如在本博客目留言，即表明已阅读并接受了上述各项条款;</span><br></pre></td></tr></table></figure><hr><h3 id="友链内容"><a href="#友链内容" class="headerlink" title="友链内容"></a>友链内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[friendlinks style=&quot;1-square&quot; sort=&quot;rand&quot;/]  </span><br><span class="line">//方形头像，随机排序</span><br></pre></td></tr></table></figure><p>友链格式 :</p><blockquote><p>博客名称：Rookie_L’s Blog</p><p>描述：一个小菜鸡自建的blog，主要用于记录自己的生活日常&amp;学习笔记</p><p>站点：<a href="https://solstice23.top/">https://solstice23.top</a></p><p>Avatar (头像)：<a href="https://solstice23.top/friendlink_image/avatar/">https://solstice23.top/friendlink_image/avatar/</a></p></blockquote><hr><h2 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h2><h3 id="顶部导航标签"><a href="#顶部导航标签" class="headerlink" title="顶部导航标签"></a>顶部导航标签</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-home&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 首页</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-comments&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 留言板</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-link&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 友情链接</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-clock-o&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 归档</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-star&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span>分类 <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-caret-down&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left:3px;&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-tags&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 标签<span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-caret-down&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left:3px;&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h3 id="左侧栏菜单导航"><a href="#左侧栏菜单导航" class="headerlink" title="左侧栏菜单导航"></a>左侧栏菜单导航</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">url：https://docs.oracle.com/javase/8/docs/api/</span><br><span class="line">标签：<span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-question-circle&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> API帮助文档</span><br><span class="line"></span><br><span class="line">url：https://leetcode-cn.com/</span><br><span class="line">标签：<span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-code&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> LeetCode</span><br><span class="line"></span><br><span class="line">url：https://codetop.cc/home</span><br><span class="line">标签：<span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-codepen&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> CodeTop</span><br><span class="line"></span><br><span class="line">url：https://github.com/</span><br><span class="line">标签：<span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-github-alt&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> GayHub</span><br><span class="line"></span><br><span class="line">url：https://www.programmercarl.com/</span><br><span class="line">标签：<span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-eye&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 代码随想录</span><br><span class="line"></span><br><span class="line">url：https://www.runoob.com/</span><br><span class="line">标签：<span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-child&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 笨鸟先飞</span><br></pre></td></tr></table></figure><hr><h3 id="左侧个人链接："><a href="#左侧个人链接：" class="headerlink" title="左侧个人链接："></a>左侧个人链接：</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> URL：https://cloud.icu007.work/ 标签： <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-cloud&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 可道云</span><br><span class="line"><span class="bullet">2.</span> URL：mailto:rookie<span class="emphasis">_l@icu007.work 标签：<span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-envelope&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 联系我</span></span><br><span class="line"><span class="emphasis">3. URL：https://alist.icu007.work/ 标签：<span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-hdd-o&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 分享盘</span></span><br><span class="line"><span class="emphasis">4. URL：https://drive.icu007.work/ 标签： <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-download&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 下载盘</span></span><br><span class="line"><span class="emphasis">5. URL：https://baidu.icu007.work 标签： <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-question&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 百度一下</span></span><br><span class="line"><span class="emphasis">6. URL： http://hiheya.github.io 标签： <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-user&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 子站</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;argon主题选项&quot;&gt;&lt;a href=&quot;#argon主题选项&quot; class=&quot;headerlink&quot; title=&quot;argon主题选项&quot;&gt;&lt;/a&gt;argon主题选项&lt;/h2&gt;&lt;h3 id=&quot;文本附加内容&quot;&gt;&lt;a href=&quot;#文本附加内容&quot; class=&quot;head</summary>
      
    
    
    
    <category term="随想" scheme="https://icu007work.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
    <category term="WP" scheme="https://icu007work.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>记一次office无法联网解决方法</title>
    <link href="https://icu007work.github.io/archives/eacc0609.html"/>
    <id>https://icu007work.github.io/archives/eacc0609.html</id>
    <published>2022-08-25T14:43:38.000Z</published>
    <updated>2023-07-31T12:40:09.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="登录onedrive显示无法连接服务器解决方法"><a href="#登录onedrive显示无法连接服务器解决方法" class="headerlink" title="登录onedrive显示无法连接服务器解决方法"></a>登录onedrive显示无法连接服务器解决方法</h2><p>今天更新了一下office三件套，但是更新完之后打开word显示无法连接服务器于是上网搜索后得之可以重置网络。具体操作如下：</p><ol><li>Cmd + r ：依次输入</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netsh int ip reset c:\resetlog.txt</span><br><span class="line">netsh winsock reset</span><br><span class="line">shutdown -r -t 0</span><br></pre></td></tr></table></figure><ol start="2"><li>命令行解析：<ol><li>netsh int ip reset c:\resetlog.txt 和 netsh winsock reset为重置网络</li><li>shutdown -r -t 0 为0s后重启电脑。</li></ol></li><li>重启电脑后再打开word就可以连上网啦！</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;登录onedrive显示无法连接服务器解决方法&quot;&gt;&lt;a href=&quot;#登录onedrive显示无法连接服务器解决方法&quot; class=&quot;headerlink&quot; title=&quot;登录onedrive显示无法连接服务器解决方法&quot;&gt;&lt;/a&gt;登录onedrive显示无法连接服</summary>
      
    
    
    
    <category term="生活" scheme="https://icu007work.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="随笔" scheme="https://icu007work.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之结构型模式</title>
    <link href="https://icu007work.github.io/archives/eea0cb26.html"/>
    <id>https://icu007work.github.io/archives/eea0cb26.html</id>
    <published>2022-08-25T14:43:05.000Z</published>
    <updated>2023-07-31T12:40:09.714Z</updated>
    
    <content type="html"><![CDATA[<h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题。</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>适配器模式</li><li>代理模式</li><li>桥接模式</li><li>装饰模式</li><li>组合模式</li><li>外观模式</li><li>享元模式</li></ul><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><ul><li>将一个类的接口转换成客户希望的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。</li><li>角色分析<ul><li>目标接口：客户所期待的接口，目标可以是具体的或抽象的类，也可以是接口。</li><li>需要适配的类：需要适配的类或适配者类。</li><li>适配器：通过包装一个需要适配的对象，把原接口转换成目标对象。</li></ul></li></ul><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ol><li>一个对象适配器可以把多个不同的适配者适配到同一个目标</li><li>可以适配一个适配者的子类，由于适配器和适配者之间是关联关系，根据“里氏代换原则”，适配者的子类也可以通过该适配器进行适配</li></ol><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol><li>对于Java、C#等不支持多重类继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者；</li><li>对于Java、C#等语言中，类适配模式中的目标抽象类只能为借口，不能为类，其使用有一定局限性。</li></ol><h5 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h5><ol><li>系统需要使用一些现有的类，而这些类的接口（方法名）不符合系统的需要，甚至没有这些类的源代码。</li><li>想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</li></ol><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>以网线适配器为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design_patterns.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/20/ 23:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//客户端类：电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="comment">//我们的电脑需要连接上转接器才可以上网</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">net</span><span class="params">(NetToUsb adapter)</span>&#123;</span><br><span class="line">        <span class="comment">//上网的具体实现，找一个转接头</span></span><br><span class="line">        adapter.handleRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//电脑</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        <span class="comment">//网线</span></span><br><span class="line">        <span class="type">Adaptee</span> <span class="variable">adaptee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adaptee</span>();</span><br><span class="line">        <span class="comment">//适配器</span></span><br><span class="line">        <span class="type">Adapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adapter</span>();</span><br><span class="line"></span><br><span class="line">        computer.net(adapter);</span><br><span class="line">        System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">        <span class="type">Adapter2</span> <span class="variable">adapter2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adapter2</span>(adaptee);</span><br><span class="line"></span><br><span class="line">        computer.net(adapter2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * //要被适配的类：网线</span></span><br><span class="line"><span class="comment"> * public class Adaptee &#123;</span></span><br><span class="line"><span class="comment"> *     public void request()&#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;连接网线开始上网&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * //接口转换器的抽象实现</span></span><br><span class="line"><span class="comment"> * public interface NetToUsb &#123;</span></span><br><span class="line"><span class="comment"> *     //作用：处理请求  网线---》USB</span></span><br><span class="line"><span class="comment"> *     public void handleRequest();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * // 1. 继承（类适配器，单继承有局限性）</span></span><br><span class="line"><span class="comment"> * public class Adapter extends Adaptee implements NetToUsb&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void handleRequest() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;我是通过类适配器实现的上网功能（继承）&quot;);</span></span><br><span class="line"><span class="comment"> *         super.request();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * // 2. 组合（对象适配器，常用）</span></span><br><span class="line"><span class="comment"> * public class Adapter2 implements NetToUsb&#123;</span></span><br><span class="line"><span class="comment"> *     private Adaptee adaptee;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Adapter2(Adaptee adaptee) &#123;</span></span><br><span class="line"><span class="comment"> *         this.adaptee = adaptee;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void handleRequest() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;我是通过对象适配器实现的上网功能（组合）&quot;);</span></span><br><span class="line"><span class="comment"> *         adaptee.request();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="https://img30.360buyimg.com/pop/jfs/t1/107257/36/27047/109837/62374e62Ea757324d/0bd6719328a41c3b.png" alt="适配器模式"></p><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><p><img src="https://img30.360buyimg.com/pop/jfs/t1/114080/12/24410/24486/62374f63Efae75338/75cd37914c79fc4b.png" alt="流程图"></p><hr><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为（Handle and Body）模式或接口（Interface）模式。</p><h4 id="实例模型"><a href="#实例模型" class="headerlink" title="实例模型"></a>实例模型</h4><p><img src="https://img30.360buyimg.com/pop/jfs/t1/222427/23/13634/246693/623821c8E65a1f2a6/61a2c6e9171b642d.png" alt="桥接模式"></p><p>分析：这个场景中有两个变化的维度：品牌，类型。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design_patterns.bridge;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/21/ 15:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Desktop</span>(<span class="keyword">new</span> <span class="title class_">Apple</span>());</span><br><span class="line">        computer.info();</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Laptop</span>(<span class="keyword">new</span> <span class="title class_">Lenovo</span>());</span><br><span class="line">        computer1.info();</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pad</span>(<span class="keyword">new</span> <span class="title class_">Apple</span>());</span><br><span class="line">        computer2.info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * public interface Brand &#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     void info();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class Apple implements Brand&#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void info() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.print(&quot;苹果&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class Lenovo implements Brand&#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void info() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.print(&quot;联想&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public abstract class Computer &#123;</span></span><br><span class="line"><span class="comment"> *     //组合 品牌</span></span><br><span class="line"><span class="comment"> *     protected Brand brand;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Computer(Brand brand) &#123;</span></span><br><span class="line"><span class="comment"> *         this.brand = brand;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *     //自带品牌</span></span><br><span class="line"><span class="comment"> *     public void info()&#123;</span></span><br><span class="line"><span class="comment"> *         brand.info();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * class Desktop extends Computer &#123;</span></span><br><span class="line"><span class="comment"> *     public Desktop(Brand brand) &#123;</span></span><br><span class="line"><span class="comment"> *         super(brand);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void info() &#123;</span></span><br><span class="line"><span class="comment"> *         super.info();</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;台式机&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * class Laptop extends Computer &#123;</span></span><br><span class="line"><span class="comment"> *     public Laptop(Brand brand) &#123;</span></span><br><span class="line"><span class="comment"> *         super(brand);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void info() &#123;</span></span><br><span class="line"><span class="comment"> *         super.info();</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;笔记本&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * class Pad extends Computer &#123;</span></span><br><span class="line"><span class="comment"> *     public Pad(Brand brand) &#123;</span></span><br><span class="line"><span class="comment"> *         super(brand);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void info() &#123;</span></span><br><span class="line"><span class="comment"> *         super.info();</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;平板&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://img30.360buyimg.com/pop/jfs/t1/185665/15/22072/110802/62382823E3f9573ed/9961e3f416e429b1.png" alt="桥接模式"></p><hr><h4 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h4><p><img src="https://img30.360buyimg.com/pop/jfs/t1/221646/10/13223/30157/62382a32E4b3d5add/64702d17712c4a28.png" alt="结构图"></p><hr><h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ul><li>桥接模式偶尔类似于多继承方案，但是多继承方案违背了类的单一职责原则，复用性比较差，类的个数也非常多，桥接模式是比多集成方案更好的解决方法，极大的减少了子类的个数，从而降低了管理和维护成本。</li><li>桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。符合<strong>开闭原则</strong>，就像一座桥，可以把两个变化的维度连接起来。</li></ul><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ul><li>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li><li>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性</li></ul><h4 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h4><ol><li><p>如果一个系统需要在构建的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响，在程序运作时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合</p></li><li><p>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</p></li><li><p>虽然在系统中使用继承时没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</p></li><li><p>场景</p><ol><li>Java语言通过Java虚拟机实现了平台无关性，</li><li>AWT的Peer架构</li><li>JDBC驱动程序也是桥接模式的应用之一。</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;结构型模式&quot;&gt;&lt;a href=&quot;#结构型模式&quot; class=&quot;headerlink&quot; title=&quot;结构型模式&quot;&gt;&lt;/a&gt;结构型模式&lt;/h2&gt;&lt;h3 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作</summary>
      
    
    
    
    <category term="技术" scheme="https://icu007work.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://icu007work.github.io/tags/Java/"/>
    
    <category term="设计模式" scheme="https://icu007work.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之创建者模式</title>
    <link href="https://icu007work.github.io/archives/f5bc3448.html"/>
    <id>https://icu007work.github.io/archives/f5bc3448.html</id>
    <published>2022-08-25T14:42:54.000Z</published>
    <updated>2023-07-31T12:40:09.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GOF23"><a href="#GOF23" class="headerlink" title="GOF23"></a>GOF23</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><ul><li>单例模式</li><li>工厂模式</li><li>抽象工厂模式</li><li>建造者模式</li><li>原型模式</li></ul><h3 id="结构性模式"><a href="#结构性模式" class="headerlink" title="结构性模式"></a>结构性模式</h3><ul><li>适配器模式</li><li>桥接模式</li><li>装饰模式</li><li>组合模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ul><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><ul><li>模板方法模式</li><li>命令模式</li><li>迭代器模式</li><li>观察者模式</li><li>中介者模式</li><li>备忘录模式</li><li>解释器模式</li><li>状态模式</li><li>策略模式</li><li>职责链模式</li><li>访问者模式</li></ul><h2 id="创建型模式-1"><a href="#创建型模式-1" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="饿汉单例模式"><a href="#饿汉单例模式" class="headerlink" title="饿汉单例模式"></a>饿汉单例模式</h4><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.single;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/15/ 16:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//饿汉单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hungry</span> &#123;</span><br><span class="line">    <span class="comment">//可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data1 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data2 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data3 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data4 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Hungry</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Hungry</span> <span class="variable">HUNGRY</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hungry</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Hungry <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HUNGRY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h5><p> 可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。</p><hr><h4 id="懒汉式单例"><a href="#懒汉式单例" class="headerlink" title="懒汉式单例"></a>懒汉式单例</h4><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.single;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 10:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMan</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构造器私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyMan</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.实例化对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan lazyMan;            <span class="comment">//给lazyMan加上volatile可以避免指令重排  保证其原子性操作。</span></span><br><span class="line">    <span class="comment">//双重检测锁模式的  懒汉式单例   DLC懒汉式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>)&#123;</span><br><span class="line">                    lazyMan = <span class="keyword">new</span> <span class="title class_">LazyMan</span>();            <span class="comment">//不是一个原子性操作</span></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     *    1.分配内存空间</span></span><br><span class="line"><span class="comment">                     *    2.执行构造方法，初始化对象</span></span><br><span class="line"><span class="comment">                     *    3.把这个对象指向这个空间</span></span><br><span class="line"><span class="comment">                     *    就有可能会出现指令重排现象</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     *    正常：123</span></span><br><span class="line"><span class="comment">                     *    异常：132</span></span><br><span class="line"><span class="comment">                     *    当A线程进来时 执行了132---先分配内存空间，然后把对象指向这个空间 先占用这个空间，最后再初始化对象，给其赋值</span></span><br><span class="line"><span class="comment">                     *    恰巧此时B线程进来了，他执行123操作，但是因为A线程先占用了空间，让B线程误以为对象不为null，所以他会不执行if语句，直接return一个lazyMan对象</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ol><li>懒汉模式对象如果不加volatile就会出现指令重排。</li><li>而我们要保证其多线程安全，就需要加上双重锁</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">    <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>)&#123;</span><br><span class="line">        lazyMan = <span class="keyword">new</span> <span class="title class_">LazyMan</span>();            <span class="comment">//不是一个原子性操作</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.single;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 15:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Holder</span> &#123;</span><br><span class="line">    <span class="comment">//1.构造器私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Holder</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从静态内部类里返回HOLDER；</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Holder <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.HOLDER;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Holder</span> <span class="variable">HOLDER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Holder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>单例不安全，因为有反射。反射会破坏单例</p></blockquote><p>所以为了解决这个问题我们使用枚举来实现单例模式。</p><h4 id="枚举单例模式"><a href="#枚举单例模式" class="headerlink" title="枚举单例模式"></a>枚举单例模式</h4><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.single;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 15:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingle</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="keyword">public</span> EnumSingle <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为反射不能破解枚举，所以我们使用枚举来实现单例模式。</p><hr><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>实现了创建者和调用者的分离</li><li>详细分类：<ul><li>简单工厂模式</li><li>工厂方法模式</li><li>抽象工厂模式</li></ul></li><li>OOP七大原则<ul><li>开闭原则：一个软件的实体应当对扩展开放，对修改关闭。</li><li>依赖倒转原则：要针对接口编程，不要针对实现编程。</li><li>迪米特法则：只与你直接的朋友通信，而避免和陌生人通信。</li></ul></li><li>核心本质<ul><li>实例化对象不适用new，用工厂方法代替</li><li>将选择实现类，创建对象统一管理和控制，从而将调用者跟我们的实现类解耦</li></ul></li><li>三种模式：<ul><li>简单工厂模式<ul><li>用来生产同一等级结构中的任意产品（对于增加新的产品，需要球盖已有代码）</li></ul></li><li>工厂方法模式<ul><li>用来生产同一等级结构中的固定产品（支持增加任意产品）</li></ul></li><li>抽象工厂模式<ul><li>围绕一个超级工厂创建其他工厂。该工厂又称为其他工厂的工厂。</li></ul></li></ul></li></ul><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><h5 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.factory.simple;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 15:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Car car = new WuLing();</span></span><br><span class="line"><span class="comment">//        Car car1 = new Tesla();</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> CarFactory.getCar(<span class="string">&quot;五菱&quot;</span>);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car1</span> <span class="operator">=</span> CarFactory.getCar(<span class="string">&quot;特斯拉&quot;</span>);</span><br><span class="line">        car.name();</span><br><span class="line">        car1.name();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public interface Car &#123;</span></span><br><span class="line"><span class="comment"> *     void name();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class WuLing implements Car &#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void name() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;wuling&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class Tesla implements Car&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void name() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;Tesla!&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class CarFactory &#123;</span></span><br><span class="line"><span class="comment"> *     //方法一</span></span><br><span class="line"><span class="comment"> *     public static Car getCar(String car)&#123;</span></span><br><span class="line"><span class="comment"> *         if (car.equals(&quot;五菱&quot;))&#123;</span></span><br><span class="line"><span class="comment"> *             return new WuLing();</span></span><br><span class="line"><span class="comment"> *         &#125;else if (car.equals(&quot;特斯拉&quot;))&#123;</span></span><br><span class="line"><span class="comment"> *             return new Tesla();</span></span><br><span class="line"><span class="comment"> *         &#125;else &#123;</span></span><br><span class="line"><span class="comment"> *             return null;</span></span><br><span class="line"><span class="comment"> *         &#125;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *     //方法二</span></span><br><span class="line"><span class="comment"> *     public static Car getWuLing()&#123;</span></span><br><span class="line"><span class="comment"> *         return new WuLing();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *     public static Car getTesla()&#123;</span></span><br><span class="line"><span class="comment"> *         return new Tesla();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h5><blockquote><p>未实现开闭原则</p></blockquote><h5 id="实现结果"><a href="#实现结果" class="headerlink" title="实现结果"></a>实现结果</h5><p><img src="https://img30.360buyimg.com/pop/jfs/t1/89206/33/25588/96647/623197b2E30d11e56/4f8a3f7e68535bd5.png" alt="简单工厂模式"></p><h5 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h5><p><img src="https://img30.360buyimg.com/pop/jfs/t1/218618/28/14571/19961/62319e3bEae8dc9d7/b5e3fbf93cf17d9f.png" alt="流程图"></p><hr><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><h5 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.factory.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiheya.factory.simple.CarFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 15:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TeslaFactory</span>().getCar();</span><br><span class="line">        car.name();</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WuLingFactory</span>().getCar();</span><br><span class="line">        car1.name();</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaZhongFactory</span>().getCar();</span><br><span class="line">        car2.name();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * public interface Car &#123;</span></span><br><span class="line"><span class="comment"> *     void name();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public interface CarFactory &#123;</span></span><br><span class="line"><span class="comment"> *     Car getCar();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class DaZhong implements Car &#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void name() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;DaZhong!&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class DaZhongFactory implements CarFactory&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public Car getCar() &#123;</span></span><br><span class="line"><span class="comment"> *         return new DaZhong();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class Tesla implements Car &#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void name() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;Tesla!&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class TeslaFactory implements CarFactory&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public Car getCar() &#123;</span></span><br><span class="line"><span class="comment"> *         return new Tesla();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class WuLing implements Car &#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void name() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;wuling&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class WuLingFactory implements CarFactory&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public Car getCar() &#123;</span></span><br><span class="line"><span class="comment"> *         return new WuLing();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="弊端-1"><a href="#弊端-1" class="headerlink" title="弊端"></a>弊端</h5><blockquote><p>虽然实现了代码的开闭原则，并且可以动态拓展。但是工厂方法模式实现成本太高了。</p></blockquote><h5 id="实现结果-1"><a href="#实现结果-1" class="headerlink" title="实现结果"></a>实现结果</h5><p><img src="https://img30.360buyimg.com/pop/jfs/t1/145431/15/24425/109114/62319c34E3ae4bf73/066ed1f8e33301e1.png" alt="工厂方法模式"></p><h5 id="流程图-1"><a href="#流程图-1" class="headerlink" title="流程图"></a>流程图</h5><p><img src="https://img30.360buyimg.com/pop/jfs/t1/94722/17/25678/27668/62319f54E48e302d2/cc9aa3b7cceb910a.png" alt="工厂方法模式"></p><hr><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li><p>简单工厂模式（静态工厂模式）</p><ul><li>虽然某种程度上不符合设计原则，但实际使用最多！</li></ul></li><li><p>工厂方法模式</p><ul><li>不修改已有类的前提下，通过新的工厂类实现扩展</li></ul></li><li><p>抽象工厂模式</p><ul><li>不可以增加产品，可以增加产品族！</li></ul></li><li><p>应用场景</p><ul><li>JDK中的Calendar的getInstance方法</li><li>JDBC中的Connection对象的获取</li><li>Spring中IOC容器创建管理bean对象</li><li>反射中Class对象的newInstance方法</li></ul><hr></li></ul><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><ul><li>定义：抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们的类</li><li>适用场景<ul><li>客户端（应用层）不依赖于产品类实例如何被创建、实现的细节</li><li>强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复代码。</li><li>提供一个产品类的库，所有产品以同样的接口出现，从而使得客户端不依赖于具体的实现</li></ul></li><li>优点<ul><li>具体产品在应用层的代码隔离，无需关心创建的细节</li><li>将一个系列的产品统一到一起创建</li></ul></li><li>缺点<ul><li>规定了所有可能被创建的产品集合，产品簇中扩展新的产品困难；</li><li>增加了系统的抽象性和理解难度。</li></ul></li></ul><h5 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.factory.abstract1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 17:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==============小米系列产品================&quot;</span>);</span><br><span class="line">        <span class="type">XiaomiFactory</span> <span class="variable">xiaomiFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XiaomiFactory</span>();</span><br><span class="line">        <span class="type">IPhoneProduct</span> <span class="variable">xiaomi</span> <span class="operator">=</span> xiaomiFactory.iphoneProduct();</span><br><span class="line">        xiaomi.callup();</span><br><span class="line">        xiaomi.sendSMS();</span><br><span class="line">        <span class="type">IRouterProduct</span> <span class="variable">xiaomiRouter</span> <span class="operator">=</span> xiaomiFactory.irouterProduct();</span><br><span class="line">        xiaomiRouter.openWifi();</span><br><span class="line">        xiaomiRouter.setting();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==============华为系列产品================&quot;</span>);</span><br><span class="line">        <span class="type">HuaweiFactory</span> <span class="variable">huaweiFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuaweiFactory</span>();</span><br><span class="line">        <span class="type">IPhoneProduct</span> <span class="variable">huawei</span> <span class="operator">=</span> huaweiFactory.iphoneProduct();</span><br><span class="line">        huawei.callup();</span><br><span class="line">        huawei.sendSMS();</span><br><span class="line">        <span class="type">IRouterProduct</span> <span class="variable">huaweiRouter</span> <span class="operator">=</span> huaweiFactory.irouterProduct();</span><br><span class="line">        huaweiRouter.openWifi();</span><br><span class="line">        huaweiRouter.setting();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * //抽象产品工厂</span></span><br><span class="line"><span class="comment"> * public interface IProductFactory &#123;</span></span><br><span class="line"><span class="comment"> *     //生产手机</span></span><br><span class="line"><span class="comment"> *     IPhoneProduct iphoneProduct();</span></span><br><span class="line"><span class="comment"> *     //生产路由器</span></span><br><span class="line"><span class="comment"> *     IRouterProduct irouterProduct();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //手机产品接口</span></span><br><span class="line"><span class="comment"> * public interface IPhoneProduct &#123;</span></span><br><span class="line"><span class="comment"> *     void start();</span></span><br><span class="line"><span class="comment"> *     void shutdown();</span></span><br><span class="line"><span class="comment"> *     void callup();</span></span><br><span class="line"><span class="comment"> *     void sendSMS();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //路由器产品接口</span></span><br><span class="line"><span class="comment"> * public interface IRouterProduct &#123;</span></span><br><span class="line"><span class="comment"> *     void start();</span></span><br><span class="line"><span class="comment"> *     void shutdown();</span></span><br><span class="line"><span class="comment"> *     void openWifi();</span></span><br><span class="line"><span class="comment"> *     void setting();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //华为工厂</span></span><br><span class="line"><span class="comment"> * public class HuaweiFactory implements IProductFactory&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public IPhoneProduct iphoneProduct() &#123;</span></span><br><span class="line"><span class="comment"> *         return new HuaweiPhone();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public IRouterProduct irouterProduct() &#123;</span></span><br><span class="line"><span class="comment"> *         return new HuaweiRouter();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //华为手机</span></span><br><span class="line"><span class="comment"> * public class HuaweiPhone implements IPhoneProduct&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void start() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;Huawei  start&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void shutdown() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;Huawei  shutdown&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void callup() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;Huawei   callup&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void sendSMS() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;Huawei sendSMS&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //华为路由器</span></span><br><span class="line"><span class="comment"> * public class HuaweiRouter implements IRouterProduct&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void start() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;启动华为路由器&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void shutdown() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;关闭华为路由器&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void openWifi() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;华为由器打开WiFi&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void setting() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;配置华为路由器&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //小米工厂</span></span><br><span class="line"><span class="comment"> * public class XiaomiFactory implements IProductFactory&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public IPhoneProduct iphoneProduct() &#123;</span></span><br><span class="line"><span class="comment"> *         return new XiaomiPhone();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public IRouterProduct irouterProduct() &#123;</span></span><br><span class="line"><span class="comment"> *         return new XiaomiRouter();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //小米手机</span></span><br><span class="line"><span class="comment"> * public class XiaomiPhone implements IPhoneProduct&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void start() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;xiaomi  start&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void shutdown() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;xiaomi  shutdown&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void callup() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;xiaomi   callup&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void sendSMS() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;xiaomi sendSMS&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //小米路由器</span></span><br><span class="line"><span class="comment"> * public class XiaomiRouter implements IRouterProduct&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void start() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;启动小米路由器&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void shutdown() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;关闭小米路由器&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void openWifi() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;小米路由器打开WiFi&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void setting() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;配置小米路由器&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="https://img30.360buyimg.com/pop/jfs/t1/132049/2/24786/137045/6231a961Eca4445cb/d6f57afda625beaa.png" alt="运行结果"></p><h5 id="流程图-2"><a href="#流程图-2" class="headerlink" title="流程图"></a>流程图</h5><p><img src="https://img30.360buyimg.com/pop/jfs/t1/147939/28/21156/588841/6231a9c8E57004dc1/53b9464f0c5c03a1.png" alt="流程图"></p><hr><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><ul><li>建造者模式也属于创建类模式，它提供了一种创建对象的最佳方式。</li><li>它将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示。</li></ul><h4 id="主要作用"><a href="#主要作用" class="headerlink" title="主要作用"></a>主要作用</h4><p>在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。</p><ul><li>用户只需要给出指定复杂对象的类型和内容，建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来）</li><li>例子：<ul><li>工厂（建造者模式）：负责制造汽车（组装过程和细节在工厂内）</li><li>汽车购买者（用户）：你只需要说出你需要的型号（对象的类型和内容），然后直接购买就可以使用了（不需要知道汽车是怎么组装的（车轮、车门、发动机、方向盘等等））</li></ul></li></ul><h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design_patterns.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/19/ 15:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//新建一个指挥</span></span><br><span class="line">        <span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>();</span><br><span class="line">        <span class="comment">//指挥 工人盖房子</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">build</span> <span class="operator">=</span> director.build(<span class="keyword">new</span> <span class="title class_">Worker</span>());</span><br><span class="line">        System.out.println(build.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * //抽象的建造者方法：盖房子</span></span><br><span class="line"><span class="comment"> * public abstract class Builder &#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     abstract void builderA();               //地基</span></span><br><span class="line"><span class="comment"> *     abstract void builderB();               //钢筋工程</span></span><br><span class="line"><span class="comment"> *     abstract void builderC();               //铺电线</span></span><br><span class="line"><span class="comment"> *     abstract void builderD();               //粉刷</span></span><br><span class="line"><span class="comment"> *     //完工：得到产品</span></span><br><span class="line"><span class="comment"> *     abstract Product getProduct();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class Product &#123;</span></span><br><span class="line"><span class="comment"> *     private String buildA;</span></span><br><span class="line"><span class="comment"> *     private String buildB;</span></span><br><span class="line"><span class="comment"> *     private String buildC;</span></span><br><span class="line"><span class="comment"> *     private String buildD;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getBuildA() &#123;</span></span><br><span class="line"><span class="comment"> *         return buildA;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getBuildB() &#123;</span></span><br><span class="line"><span class="comment"> *         return buildB;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getBuildC() &#123;</span></span><br><span class="line"><span class="comment"> *         return buildC;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getBuildD() &#123;</span></span><br><span class="line"><span class="comment"> *         return buildD;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setBuildA(String buildA) &#123;</span></span><br><span class="line"><span class="comment"> *         this.buildA = buildA;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setBuildB(String buildB) &#123;</span></span><br><span class="line"><span class="comment"> *         this.buildB = buildB;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setBuildC(String buildC) &#123;</span></span><br><span class="line"><span class="comment"> *         this.buildC = buildC;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setBuildD(String buildD) &#123;</span></span><br><span class="line"><span class="comment"> *         this.buildD = buildD;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public String toString() &#123;</span></span><br><span class="line"><span class="comment"> *         return &quot;Product&#123;&quot; +</span></span><br><span class="line"><span class="comment"> *                 &quot;buildA=&#x27;&quot; + buildA + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &quot;, buildB=&#x27;&quot; + buildB + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &quot;, buildC=&#x27;&quot; + buildC + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &quot;, buildD=&#x27;&quot; + buildD + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //具体的建造者：工人</span></span><br><span class="line"><span class="comment"> * public class Worker extends Builder&#123;</span></span><br><span class="line"><span class="comment"> *     private Product product;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Worker() &#123;</span></span><br><span class="line"><span class="comment"> *         product = new Product();  //工人负责创建产品</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     void builderA() &#123;</span></span><br><span class="line"><span class="comment"> *         product.setBuildA(&quot;打好了地基&quot;);</span></span><br><span class="line"><span class="comment"> *         System.out.println(product.getBuildA());</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     void builderB() &#123;</span></span><br><span class="line"><span class="comment"> *         product.setBuildB(&quot;铺好了钢筋&quot;);</span></span><br><span class="line"><span class="comment"> *         System.out.println(product.getBuildB());</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     void builderC() &#123;</span></span><br><span class="line"><span class="comment"> *         product.setBuildC(&quot;铺好了电线&quot;);</span></span><br><span class="line"><span class="comment"> *         System.out.println(product.getBuildC());</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     void builderD() &#123;</span></span><br><span class="line"><span class="comment"> *         product.setBuildD(&quot;粉好了墙壁&quot;);</span></span><br><span class="line"><span class="comment"> *         System.out.println(product.getBuildD());</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     Product getProduct() &#123;</span></span><br><span class="line"><span class="comment"> *         return product;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //指挥：核心，负责构建一个工程，工程如何创建 由他决定。</span></span><br><span class="line"><span class="comment"> * public class Director &#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * //    指挥工人建造房子</span></span><br><span class="line"><span class="comment"> *     public Product build(Builder builder)&#123;</span></span><br><span class="line"><span class="comment"> *         builder.builderA();</span></span><br><span class="line"><span class="comment"> *         builder.builderB();</span></span><br><span class="line"><span class="comment"> *         builder.builderC();</span></span><br><span class="line"><span class="comment"> *         builder.builderD();</span></span><br><span class="line"><span class="comment"> *         //建造完成后返回一个房子；</span></span><br><span class="line"><span class="comment"> *         return builder.getProduct();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://img30.360buyimg.com/pop/jfs/t1/94001/3/25084/96682/6235853fE63d92745/47a444b879117310.png" alt="建造者模式"></p><hr><ul><li>上面示例是Builder模式的常规用法，导演类Director在Builder模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用着返回完整的产品类，但是有些情况下需要简化系统结构，可以把Director和抽象建造者进行结合。</li><li>通过静态内部类方式实现零件无序装配构造，这种方式使用更加灵活，更符合定义。内部有复杂对象的默认实现，使用时可以根据用户需求自由定义更改内容，并且无需改变具体的构造方式。就可以生产出不同复杂产品。</li><li>比如:麦当劳的套餐，服务员（具体建造者）可以随意搭配任意几种产品（零件）组成一款套餐（产品），然后出售给客户。彼地种方式少了指挥者，主要是因为第二种方式把指挥者交给用户来操作，使得产品的创建更加简单灵活。</li></ul><h4 id="无指挥类的建造者模式"><a href="#无指挥类的建造者模式" class="headerlink" title="无指挥类的建造者模式"></a>无指挥类的建造者模式</h4><h5 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design_patterns.builder.demo02;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/20/ 20:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//服务员</span></span><br><span class="line">        <span class="type">Worker</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>();</span><br><span class="line">        <span class="comment">//链式编程，在原来的基础上可以自由组合，如果组合，则返回默认套餐。</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> worker.buildA(<span class="string">&quot;炸鸡&quot;</span>).buildB(<span class="string">&quot;芬达&quot;</span>).getProduct();</span><br><span class="line"></span><br><span class="line">        System.out.println(product.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * //建造者</span></span><br><span class="line"><span class="comment"> * public abstract class Builder &#123;</span></span><br><span class="line"><span class="comment"> *     abstract Builder buildA(String msg);  //汉堡</span></span><br><span class="line"><span class="comment"> *     abstract Builder buildB(String msg);  //薯条</span></span><br><span class="line"><span class="comment"> *     abstract Builder buildC(String msg);  //可乐</span></span><br><span class="line"><span class="comment"> *     abstract Builder buildD(String msg);  //甜点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     abstract Product getProduct();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * public class Product &#123;</span></span><br><span class="line"><span class="comment"> *     private String BuildA = &quot;汉堡&quot;;</span></span><br><span class="line"><span class="comment"> *     private String BuildB = &quot;可乐&quot;;</span></span><br><span class="line"><span class="comment"> *     private String BuildC = &quot;薯条&quot;;</span></span><br><span class="line"><span class="comment"> *     private String BuildD = &quot;甜点&quot;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getBuildA() &#123;</span></span><br><span class="line"><span class="comment"> *         return BuildA;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setBuildA(String buildA) &#123;</span></span><br><span class="line"><span class="comment"> *         BuildA = buildA;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getBuildB() &#123;</span></span><br><span class="line"><span class="comment"> *         return BuildB;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setBuildB(String buildB) &#123;</span></span><br><span class="line"><span class="comment"> *         BuildB = buildB;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getBuildC() &#123;</span></span><br><span class="line"><span class="comment"> *         return BuildC;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setBuildC(String buildC) &#123;</span></span><br><span class="line"><span class="comment"> *         BuildC = buildC;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getBuildD() &#123;</span></span><br><span class="line"><span class="comment"> *         return BuildD;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setBuildD(String buildD) &#123;</span></span><br><span class="line"><span class="comment"> *         BuildD = buildD;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public String toString() &#123;</span></span><br><span class="line"><span class="comment"> *         return &quot;Product&#123;&quot; +</span></span><br><span class="line"><span class="comment"> *                 &quot;BuildA=&#x27;&quot; + BuildA + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &quot;, BuildB=&#x27;&quot; + BuildB + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &quot;, BuildC=&#x27;&quot; + BuildC + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &quot;, BuildD=&#x27;&quot; + BuildD + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * //具体的建造者</span></span><br><span class="line"><span class="comment"> * public class Worker extends Builder&#123;</span></span><br><span class="line"><span class="comment"> *     private Product product;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Worker() &#123;</span></span><br><span class="line"><span class="comment"> *         product = new Product();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     Builder buildA(String msg) &#123;</span></span><br><span class="line"><span class="comment"> *         product.setBuildA(msg);</span></span><br><span class="line"><span class="comment"> *         return this;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     Builder buildB(String msg) &#123;</span></span><br><span class="line"><span class="comment"> *         product.setBuildB(msg);</span></span><br><span class="line"><span class="comment"> *         return this;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     Builder buildC(String msg) &#123;</span></span><br><span class="line"><span class="comment"> *         product.setBuildC(msg);</span></span><br><span class="line"><span class="comment"> *         return this;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     Builder buildD(String msg) &#123;</span></span><br><span class="line"><span class="comment"> *         product.setBuildD(msg);</span></span><br><span class="line"><span class="comment"> *         return this;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     Product getProduct() &#123;</span></span><br><span class="line"><span class="comment"> *         return product;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="https://img30.360buyimg.com/pop/jfs/t1/95436/33/25998/129820/623725c5E304641cc/e61ca442119d51a6.png" alt="建造者模式2"></p><hr><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>产品的建造和表示分离，实现了解耦。使用建造者模式可以使客户端不必知道产品内部组成的细节。</li><li>将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰.</li><li>具体的建造者类之间是相互独立的，这有利于系统的扩展。增加新的具体建造者无需修改原有类库的代码，符合“开闭原则”</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式，因此其适用范围受到一定的限制。</li><li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造类来实现这种变化，导致系统变得很庞大。</li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>需要生产的产品对象有复杂的内部结构，这些产品对象具有共性。</li><li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品、</li><li>适合于一个具有较多的零件（属性）的产品（对象）的创建过程。</li></ul><h4 id="建造者与抽象工厂模式的比较"><a href="#建造者与抽象工厂模式的比较" class="headerlink" title="建造者与抽象工厂模式的比较"></a>建造者与抽象工厂模式的比较</h4><ul><li>与抽象工厂模式相比，建造者模式返回一个组装好的完整产品，而抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族。</li><li>在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。</li><li>如果将抽象工厂模式堪称汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。</li></ul><hr><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol><li>实现一个接口：Cloneable;</li><li>重写一个方法：clone();</li><li>主要用于：Spring Bean：单例模式，原型模式</li><li>原型模式+工厂模式 &#x3D;&#x3D;&#x3D;&gt; new &lt;&#x3D;&gt; 原型模式</li></ol><h4 id="浅克隆模式"><a href="#浅克隆模式" class="headerlink" title="浅克隆模式"></a>浅克隆模式</h4><h5 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design_patterns.prototype.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/20/ 21:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bilibili</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="comment">//原型对象 v1</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">Video</span> <span class="variable">v1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Video</span>(<span class="string">&quot;xiheya&quot;</span>,date);</span><br><span class="line">        <span class="comment">//克隆对象 v2</span></span><br><span class="line">        <span class="type">Video</span> <span class="variable">v2</span> <span class="operator">=</span>(Video) v1.clone();</span><br><span class="line">        System.out.println(<span class="string">&quot;v1--&gt;&quot;</span> + v1);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1:hashcode--&gt;&quot;</span> + v1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;v2--&gt;&quot;</span> + v2);</span><br><span class="line">        System.out.println(<span class="string">&quot;v2:hashcode--&gt;&quot;</span> + v2.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">        date.setTime(<span class="number">123456</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1--&gt;&quot;</span> + v1);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1:hashcode--&gt;&quot;</span> + v1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;v2--&gt;&quot;</span> + v2);</span><br><span class="line">        System.out.println(<span class="string">&quot;v2:hashcode--&gt;&quot;</span> + v2.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * //原型模式的实现：</span></span><br><span class="line"><span class="comment"> * // 1.实现一个接口：Cloneable;</span></span><br><span class="line"><span class="comment"> * // 2.重写一个方法：clone();</span></span><br><span class="line"><span class="comment"> * // Video</span></span><br><span class="line"><span class="comment"> * public class Video implements Cloneable&#123;</span></span><br><span class="line"><span class="comment"> *     private String name;</span></span><br><span class="line"><span class="comment"> *     private Date creatTime;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     protected Object clone() throws CloneNotSupportedException &#123;</span></span><br><span class="line"><span class="comment"> *         return super.clone();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Video() &#123;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Video(String name, Date creatTime) &#123;</span></span><br><span class="line"><span class="comment"> *         this.name = name;</span></span><br><span class="line"><span class="comment"> *         this.creatTime = creatTime;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getName() &#123;</span></span><br><span class="line"><span class="comment"> *         return name;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setName(String name) &#123;</span></span><br><span class="line"><span class="comment"> *         this.name = name;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Date getCreatTime() &#123;</span></span><br><span class="line"><span class="comment"> *         return creatTime;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setCreatTime(Date creatTime) &#123;</span></span><br><span class="line"><span class="comment"> *         this.creatTime = creatTime;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public String toString() &#123;</span></span><br><span class="line"><span class="comment"> *         return &quot;Video&#123;&quot; +</span></span><br><span class="line"><span class="comment"> *                 &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &quot;, creatTime=&quot; + creatTime +</span></span><br><span class="line"><span class="comment"> *                 &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><p><img src="https://img30.360buyimg.com/pop/jfs/t1/191225/6/21536/243142/62372fb1Ef35280ba/f93ef2d79ffa0c9f.png" alt="原型模式"></p><hr><h4 id="深克隆模式"><a href="#深克隆模式" class="headerlink" title="深克隆模式"></a>深克隆模式</h4><h5 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design_patterns.prototype.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/20/ 21:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bilibili</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="comment">//原型对象 v1</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">Video</span> <span class="variable">v1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Video</span>(<span class="string">&quot;xiheya&quot;</span>,date);</span><br><span class="line">        <span class="comment">//克隆对象 v2</span></span><br><span class="line">        <span class="type">Video</span> <span class="variable">v2</span> <span class="operator">=</span>(Video) v1.clone();</span><br><span class="line">        System.out.println(<span class="string">&quot;v1--&gt;&quot;</span> + v1);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1:hashcode--&gt;&quot;</span> + v1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;v2--&gt;&quot;</span> + v2);</span><br><span class="line">        System.out.println(<span class="string">&quot;v2:hashcode--&gt;&quot;</span> + v2.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">        date.setTime(<span class="number">123456</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1--&gt;&quot;</span> + v1);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1:hashcode--&gt;&quot;</span> + v1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;v2--&gt;&quot;</span> + v2);</span><br><span class="line">        System.out.println(<span class="string">&quot;v2:hashcode--&gt;&quot;</span> + v2.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * //原型模式的实现：</span></span><br><span class="line"><span class="comment"> * // 1.实现一个接口：Cloneable;</span></span><br><span class="line"><span class="comment"> * // 2.重写一个方法：clone();</span></span><br><span class="line"><span class="comment"> * // Video</span></span><br><span class="line"><span class="comment"> * public class Video implements Cloneable&#123;</span></span><br><span class="line"><span class="comment"> *     private String name;</span></span><br><span class="line"><span class="comment"> *     private Date creatTime;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     protected Object clone() throws CloneNotSupportedException &#123;</span></span><br><span class="line"><span class="comment"> *         Object obj = super.clone();</span></span><br><span class="line"><span class="comment"> *         //深克隆，序列化与反序列化</span></span><br><span class="line"><span class="comment"> *         Video v = (Video) obj;</span></span><br><span class="line"><span class="comment"> *         v.creatTime = (Date) this.creatTime.clone();//将对象的属性也序列化</span></span><br><span class="line"><span class="comment"> *         return obj;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Video() &#123;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Video(String name, Date creatTime) &#123;</span></span><br><span class="line"><span class="comment"> *         this.name = name;</span></span><br><span class="line"><span class="comment"> *         this.creatTime = creatTime;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getName() &#123;</span></span><br><span class="line"><span class="comment"> *         return name;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setName(String name) &#123;</span></span><br><span class="line"><span class="comment"> *         this.name = name;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Date getCreatTime() &#123;</span></span><br><span class="line"><span class="comment"> *         return creatTime;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setCreatTime(Date creatTime) &#123;</span></span><br><span class="line"><span class="comment"> *         this.creatTime = creatTime;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public String toString() &#123;</span></span><br><span class="line"><span class="comment"> *         return &quot;Video&#123;&quot; +</span></span><br><span class="line"><span class="comment"> *                 &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &quot;, creatTime=&quot; + creatTime +</span></span><br><span class="line"><span class="comment"> *                 &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h5><p><img src="https://img30.360buyimg.com/pop/jfs/t1/129250/34/26723/177940/62373361E5f6f1c33/0b4b92fbad3950d6.png" alt="深克隆模式"></p><hr><h4 id="浅克隆与深克隆对比"><a href="#浅克隆与深克隆对比" class="headerlink" title="浅克隆与深克隆对比"></a>浅克隆与深克隆对比</h4><ol><li>浅克隆:克隆出来的对象和原型共同指向一个对象，克隆对象只是引用了这个对象。</li><li>深克隆：克隆出来的对象会把原型的属性也克隆出来。</li></ol><p><img src="https://img30.360buyimg.com/pop/jfs/t1/95695/34/23907/24394/623733c6E93986210/edce85c15f17f777.png" alt="对比"></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;GOF23&quot;&gt;&lt;a href=&quot;#GOF23&quot; class=&quot;headerlink&quot; title=&quot;GOF23&quot;&gt;&lt;/a&gt;GOF23&lt;/h2&gt;&lt;h3 id=&quot;创建型模式&quot;&gt;&lt;a href=&quot;#创建型模式&quot; class=&quot;headerlink&quot; title=&quot;创建型</summary>
      
    
    
    
    <category term="技术" scheme="https://icu007work.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://icu007work.github.io/tags/Java/"/>
    
    <category term="设计模式" scheme="https://icu007work.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="https://icu007work.github.io/archives/735e5788.html"/>
    <id>https://icu007work.github.io/archives/735e5788.html</id>
    <published>2022-08-25T14:42:35.000Z</published>
    <updated>2023-07-31T12:40:09.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 17:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        bubbleSort(arr);</span><br><span class="line">        System.out.print(<span class="string">&quot;finish: [&quot;</span> );</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : arr) &#123;</span><br><span class="line">            System.out.print(x + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> -i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png" alt="冒泡排序"></p><hr><h2 id="冒泡排序的优化"><a href="#冒泡排序的优化" class="headerlink" title="冒泡排序的优化"></a>冒泡排序的优化</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 17:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        bubbleSort(arr);</span><br><span class="line">        System.out.print(<span class="string">&quot;finish: [&quot;</span> );</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : arr) &#123;</span><br><span class="line">            System.out.print(x + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;              <span class="comment">//确定冒泡次数</span></span><br><span class="line">            <span class="comment">//如果在某一次冒泡排序过程中，没有交换元素，则说明该数组已经有序。</span></span><br><span class="line">            <span class="comment">//冒泡步骤</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> -i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png" alt="冒泡排序"></p><hr><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 17:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,-<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        selectSort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;          <span class="comment">//开始选择排序</span></span><br><span class="line">            <span class="comment">//初始 min = arr[i]; mindex = i;</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">mindex</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length - <span class="number">1</span> ; j++)&#123;</span><br><span class="line">                <span class="comment">//将min与其后面的数比较，如果min大于他后面的数  就更新min，及其下标</span></span><br><span class="line">                <span class="keyword">if</span> (min &gt; arr[j])&#123;</span><br><span class="line">                    min = arr[j];</span><br><span class="line">                    mindex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果 最小值的下标不等于 i 则交换 这两个元素的值</span></span><br><span class="line">            <span class="keyword">if</span> (mindex != i)&#123;</span><br><span class="line">                arr[mindex] = arr[i];</span><br><span class="line">                arr[i] = min;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/123581/35/24365/104905/6231b4aeEc88a0c04/b12977f679277cdd.png" alt="选择排序"></p><hr><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 18:08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        insertSort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//初始化insertdex  和  insertvalue</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">insertdex</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="type">int</span> <span class="variable">insertvalue</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            <span class="keyword">while</span> (insertdex &gt; <span class="number">0</span> &amp;&amp; insertvalue &lt; arr[insertdex - <span class="number">1</span>])&#123;      <span class="comment">//while循环，当insertdex &gt; 0 以及 insertvalue 小于 其前一个值时进入循环</span></span><br><span class="line">                <span class="comment">// 将 前一个值 赋值给 下标为 insertdex的数组空间内</span></span><br><span class="line">                arr[insertdex] = arr[insertdex - <span class="number">1</span>];</span><br><span class="line">                <span class="comment">// 下标往前移一位</span></span><br><span class="line">                insertdex--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当下标等于0  或者前面的数据均没有比insertvalue小时  结束循环，将insertvalue的值赋给 arr[insertdex]</span></span><br><span class="line">            arr[insertdex] = insertvalue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/96545/33/24065/115846/6231b9afE8789b655/9be8b857b6f51639.png" alt="插入排序"></p><hr><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 19:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr =&#123;<span class="number">1</span>,<span class="number">3</span>,-<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        quickSort(arr,<span class="number">0</span>,arr.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">        <span class="comment">//递归退出条件</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左指针与右指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> right;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r &amp;&amp; arr[r] &gt;= arr[left])r--;            <span class="comment">//右边的元素与arr[left]比较，直到出现一个比arr[left]小的数，r指针停止左移</span></span><br><span class="line">            <span class="keyword">while</span> (l &lt; r &amp;&amp; arr[l] &lt;= arr[left])l++;            <span class="comment">//左边的元素与arr[left]比较，直到出现一个比arr[left]大的数，l指针停止右移</span></span><br><span class="line">            <span class="keyword">if</span> (l == r)&#123;                                        <span class="comment">//当两个指针相遇时交换 arr[l]（arr[r]） 与 arr[left]的数据</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[l];</span><br><span class="line">                arr[l] = arr[left];</span><br><span class="line">                arr[left] = temp;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;                                              <span class="comment">//两个指针不相等时则交换 两指针内的数据 </span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[r];</span><br><span class="line">                arr[r] = arr[l];</span><br><span class="line">                arr[l] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(arr,left,l-<span class="number">1</span>);                           <span class="comment">//通过递归，将左边的元素进行快排</span></span><br><span class="line">        quickSort(arr,r+<span class="number">1</span>,right);                           <span class="comment">//通过递归，将右边的元素进行快排。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/221661/14/12935/99046/6231ce97E12e84d0b/b13bbf3d96137ee8.png" alt="快速排序"></p><hr><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 23:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">        mergeSort(arr,<span class="number">0</span>, arr.length - <span class="number">1</span>, temp);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span>[] temp)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//分</span></span><br><span class="line">            mergeSort(arr,<span class="number">0</span>,mid,temp);          <span class="comment">//将左边部分继续分</span></span><br><span class="line">            mergeSort(arr,mid+<span class="number">1</span>,right,temp);    <span class="comment">//将右边部分继续分</span></span><br><span class="line">            <span class="comment">//合</span></span><br><span class="line">            merge(arr,left,mid,right,temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//合</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right, <span class="type">int</span>[] temp)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> mid+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;                          <span class="comment">//临时数组下标索引</span></span><br><span class="line">        <span class="comment">//先将两部分合并</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt;= arr[j])&#123;</span><br><span class="line">                temp[t] = arr[i];</span><br><span class="line">                i++;t++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                temp[t] = arr[j];</span><br><span class="line">                j++;t++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果左边没有合并完全，则接着i继续合并</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid)&#123;</span><br><span class="line">            temp[t] = arr[i];</span><br><span class="line">            t++;i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果右边没有合并完全，则接着j继续合并</span></span><br><span class="line">        <span class="keyword">while</span> (j &lt;= right)&#123;</span><br><span class="line">            temp[t] = arr[j];</span><br><span class="line">            t++;j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//接着将temp中的数组填充到指定位置</span></span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">templeft</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="keyword">while</span> (templeft &lt;= right)&#123;</span><br><span class="line">            arr[templeft] = temp[t];</span><br><span class="line">            t++;templeft++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-5"><a href="#运行结果-5" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/6243/24/13518/120086/62320facE5b1eee5f/7044dbeb5270949a.png" alt="归并排序"></p><hr><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/17/ 0:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedixSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">10023</span>,<span class="number">3225</span>,<span class="number">302</span>,<span class="number">155</span>,<span class="number">9</span>,<span class="number">3326</span>,<span class="number">33</span>,<span class="number">5987</span>,<span class="number">663</span>,<span class="number">15596</span>&#125;;</span><br><span class="line">        redixSort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">redixSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[][] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][arr.length - <span class="number">1</span>];               <span class="comment">//桶里面所存的具体数值</span></span><br><span class="line">        <span class="type">int</span>[] bucketElementCounts = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];                    <span class="comment">//每个桶所存的元素个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(max &lt; arr[i]) max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxCount</span> <span class="operator">=</span> (max + <span class="string">&quot;&quot;</span>).length();                         <span class="comment">//获取最大数的位数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxCount; i++) &#123;</span><br><span class="line">            <span class="comment">//把数组中的数都放在桶里面</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; arr.length; k++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> arr[k] / (<span class="type">int</span>) Math.pow(<span class="number">10</span>, i) % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">                bucket[value][bucketElementCounts[value]] = arr[k];</span><br><span class="line">                bucketElementCounts[value]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; bucketElementCounts.length; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(bucketElementCounts[k] != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; bucketElementCounts[k]; x++) &#123;</span><br><span class="line">                        arr[index] = bucket[k][x];</span><br><span class="line">                        index++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                bucketElementCounts[k] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-6"><a href="#运行结果-6" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/117860/3/21960/155113/62321b0aE741709bc/ce49136a8a12e016.png" alt="基数排序"></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h2&gt;&lt;h3 id=&quot;代码：&quot;&gt;&lt;a href=&quot;#代码：&quot; class=&quot;headerlink&quot; title=&quot;代码：&quot;&gt;&lt;/a&gt;代码</summary>
      
    
    
    
    <category term="技术" scheme="https://icu007work.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://icu007work.github.io/tags/Java/"/>
    
    <category term="排序算法" scheme="https://icu007work.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java基础小结</title>
    <link href="https://icu007work.github.io/archives/9e3ebe18.html"/>
    <id>https://icu007work.github.io/archives/9e3ebe18.html</id>
    <published>2022-08-25T14:42:17.000Z</published>
    <updated>2023-07-31T12:40:09.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向过程-面向对象"><a href="#面向过程-面向对象" class="headerlink" title="面向过程 &amp; 面向对象"></a>面向过程 &amp; 面向对象</h2><h3 id="面向过程思想—-自上而下"><a href="#面向过程思想—-自上而下" class="headerlink" title="面向过程思想—&gt;自上而下"></a>面向过程思想—&gt;自上而下</h3><p>面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</p><ul><li>步骤清晰简单，第一步做什么，第二步做什么……</li><li>面向过程适合处理一些较为简单的问题</li></ul><h3 id="面向对象思想—-自下而上"><a href="#面向对象思想—-自下而上" class="headerlink" title="面向对象思想—&gt;自下而上"></a>面向对象思想—&gt;自下而上</h3><p><strong>面向对象</strong>就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。</p><ul><li>物以类聚，<strong>分类</strong>的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li><li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题。</li></ul><p><strong>对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</strong></p><h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><ul><li>面向对象编程（Object_Oriented Programming， OOP）</li><li>面向对象编程的本质就是：<strong>以类的方式组织代码，以对象的形式（封装）数据</strong></li><li>抽象 —&gt;将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，<strong>那就是他们都是狗</strong>。</li><li>三大特征<ul><li><strong>封装</strong></li><li><strong>继承</strong></li><li><strong>多态</strong></li></ul></li><li>从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象</li><li>从代码运行的角度考虑，是先有类后有对象。类是对象的模板。</li></ul><h2 id="回顾方法及加深"><a href="#回顾方法及加深" class="headerlink" title="回顾方法及加深"></a>回顾方法及加深</h2><h3 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h3><ul><li>修饰符</li><li>返回类型</li><li><strong>break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别</strong></li><li>方法名：注意规范就可以（首字母小写驼峰法），见名知意</li><li>参数列表：（参数类型，参数名）……</li><li>异常抛出：</li></ul><h3 id="方法的调用-递归"><a href="#方法的调用-递归" class="headerlink" title="方法的调用:递归"></a>方法的调用:递归</h3><ul><li>静态方法</li><li>非静态方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.xiheya.oop;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author &#123;xiheya&#125;</span><br><span class="line"> * @Date: 2022/03/12/ 22:30</span><br><span class="line"> * @Description</span><br><span class="line"> */</span><br><span class="line">public class Demo02 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Demo02 demo02 = new Demo02();</span><br><span class="line">        int sum = demo02.add(1, 2);            //实例化对象demo02后，才可以调用非静态方法add</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        System.out.println(add(1, 2, 3));   //而静态方法add则可以直接调用</span><br><span class="line">    &#125;</span><br><span class="line">    public static int add(int a,int b, int c)&#123;      //静态方法，main方法中可以直接调用。</span><br><span class="line">        return a+b+c;</span><br><span class="line">    &#125;</span><br><span class="line">    public int add(int a,int b)&#123;                    //非静态方法，调用的话需要实例化对象后才能调用。</span><br><span class="line">        return a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><hr><ul><li>形参和实参</li><li>值传递和引用传递</li></ul><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.xiheya.oop;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author &#123;xiheya&#125;</span><br><span class="line"> * @Date: 2022/03/12/ 21:52</span><br><span class="line"> * @Description</span><br><span class="line"> */</span><br><span class="line">// 值传递和引用传递</span><br><span class="line">public class Demo01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int a = 1;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        change(a);                          //调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响</span><br><span class="line">        System.out.println(a);              //可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。</span><br><span class="line">        Person person = new Person();       //实例化一个类，new一个Person类。</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">        changeName(person);                 //由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，</span><br><span class="line">        System.out.println(person.name);    //这就是引用传递（实质上还是值传递）</span><br><span class="line">    &#125;</span><br><span class="line">    public static void change(int a)&#123;</span><br><span class="line">        a = 10;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void changeName(Person person)&#123;</span><br><span class="line">        //person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性</span><br><span class="line">        person.name = &quot;xiheya&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png" alt="值传递与引用传递"></p><hr><ul><li>this关键字</li></ul><h2 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h2><ul><li>类是一种抽象的数据类型，它是对某一类事物整体描述&#x2F;定义，但是并不能代表某一个具体的事物。<ul><li>动物、植物、手机、电脑</li><li>Person类、Pet类、Car类等，这些类都是用来描述&#x2F;定义某一类具体的事物应该具备的特点和行为</li></ul></li><li>对象是抽象概念的具体实例<ul><li>eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例</li><li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。</li></ul></li></ul><h2 id="创建和初始化对象"><a href="#创建和初始化对象" class="headerlink" title="创建和初始化对象"></a>创建和初始化对象</h2><ul><li><strong>使用new关键字创建对象</strong></li><li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</li><li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ul><li>1.必须和类的名字相同</li><li>2.必须没有返回类型，也不能写void</li></ul></li><li><strong>构造器方法必须掌握</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;面向过程-面向对象&quot;&gt;&lt;a href=&quot;#面向过程-面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向过程 &amp;amp; 面向对象&quot;&gt;&lt;/a&gt;面向过程 &amp;amp; 面向对象&lt;/h2&gt;&lt;h3 id=&quot;面向过程思想—-自上而下&quot;&gt;&lt;a href=&quot;#面</summary>
      
    
    
    
    <category term="技术" scheme="https://icu007work.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://icu007work.github.io/tags/Java/"/>
    
    <category term="Java基础语法" scheme="https://icu007work.github.io/tags/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java异常02</title>
    <link href="https://icu007work.github.io/archives/1b27ed3d.html"/>
    <id>https://icu007work.github.io/archives/1b27ed3d.html</id>
    <published>2022-08-25T14:42:06.000Z</published>
    <updated>2023-07-31T12:40:09.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><h3 id="try-catch关键字"><a href="#try-catch关键字" class="headerlink" title="try catch关键字"></a>try catch关键字</h3><ul><li>try：监控类型</li><li>catch：想要捕获的异常，可以捕获异常</li><li>finally：可以处理善后工作，（可以不要finally）</li><li>使用 try catch关键字可以在出现异常时实现程序不终止，继续跑完程序。我们只需要在try catch中处理这些异常就可以了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/14/ 9:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//假设要捕获多个异常：我们要从小到大的去捕获</span></span><br><span class="line">        <span class="comment">// 快捷键 Ctrl + Alt + T  快速捕获异常。</span></span><br><span class="line">        <span class="keyword">try</span>&#123;                                    <span class="comment">//try  监控类型</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123;         <span class="comment">//catch（想要捕获的异常类型0  捕获异常）</span></span><br><span class="line">            System.out.println(<span class="string">&quot;程序出现异常，b不能为0&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;                              <span class="comment">//处理善后工作。可以不要finally，假设IO，资源 关闭</span></span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="throw-和-throws关键字"><a href="#throw-和-throws关键字" class="headerlink" title="throw 和 throws关键字"></a>throw 和 throws关键字</h3><ul><li>throw关键字一般是在方法体内主动抛出异常</li><li>throws关键字一般是在方法名中抛出异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Test</span>().test(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span> <span class="params">(<span class="type">int</span> a , <span class="type">int</span> b)</span><span class="keyword">throws</span> ArithmeticException&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ul><li>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需要继承Exception类即可。</li><li>在程序中使用自定义异常类，大体可以分为以下几个步骤：<ul><li>创建自定义异常类。</li><li>在方法中通过throw关键字抛出异常对象。</li><li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步。</li><li>再出现异常方法的调用者中捕获并处理异常。</li></ul></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.exception.demo02;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/15/ 0:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span> <span class="keyword">throws</span> MyException &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test(<span class="number">11</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;my exception&quot;</span>+ e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class MyException extends Exception&#123;</span></span><br><span class="line"><span class="comment">    private int detail;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public MyException(int a) &#123;</span></span><br><span class="line"><span class="comment">        this.detail = a;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public String toString() &#123;</span></span><br><span class="line"><span class="comment">        return &quot;MyException&#123;&quot; +</span></span><br><span class="line"><span class="comment">                &quot;detail=&quot; + detail +</span></span><br><span class="line"><span class="comment">                &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><hr><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/219736/2/14797/107450/622f6d4cEb0febe5b/e9410796da6a5f89.png" alt="自定义异常"></p><hr><h3 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h3><ul><li>处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理</li><li>在多重catch块后面，可以加一个catch（Exception）来处理可能会被漏掉的异常。</li><li>对于不确定的代码，也可以加上一个try-catch，处理潜在的异常。</li><li>尽量去处理异常，切忌只是简单地调用printStackTrace()去打印输出</li><li>具体如何处理异常，要根据不同的业务需求和异常类型去决定</li><li>尽量添加finally语句块去释放占用的资源。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;捕获异常&quot;&gt;&lt;a href=&quot;#捕获异常&quot; class=&quot;headerlink&quot; title=&quot;捕获异常&quot;&gt;&lt;/a&gt;捕获异常&lt;/h2&gt;&lt;h3 id=&quot;try-catch关键字&quot;&gt;&lt;a href=&quot;#try-catch关键字&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="技术" scheme="https://icu007work.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://icu007work.github.io/tags/Java/"/>
    
    <category term="Java异常" scheme="https://icu007work.github.io/tags/Java%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Java异常01</title>
    <link href="https://icu007work.github.io/archives/822ebc87.html"/>
    <id>https://icu007work.github.io/archives/822ebc87.html</id>
    <published>2022-08-25T14:42:03.000Z</published>
    <updated>2023-07-31T12:40:09.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>实际工作中，遇到的情况不可能是非常完美的。比如：你写的某个模块，用户输入不一定符合你的要求、你的程序要打开某个文件，这个文件可能不存在或者文件格式不对，你要读取数据库的数据，数据可能是空的等。我们的程序在跑着，内存或硬盘可能就满了。等等</li><li>软件程序再运行过程中，非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是：Exception，意思是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理，而不至于程序崩溃？</li><li>异常指程序运行中出现的不期而至的各种状况，如：文件找不到、网络连接失败、非法参数等。</li><li>异常发生在程序运行期间，他影响了程序正常的程序执行流程</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="简单分类"><a href="#简单分类" class="headerlink" title="简单分类"></a>简单分类</h4><p>需要掌握以下三种类型的异常</p><ol><li>检查性异常：最具代表的检查性异常时用户错误或问题引起的异常，这是程序羊无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单的忽略</li><li>运行时异常：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li><li><strong>错误ERROR</strong>：错误不是异常，而是脱离程序员控制的问题，错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，他们在编译时也检查不到的。</li></ol><h3 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h3><ul><li>Java把异常当作对象来处理，并定义一个基类java.lang,Throwable作为所有异常的超类</li><li>在Java API中已经定义了许多异常类，这些异常类分为两大类：<strong>错误ERROR</strong>和<strong>异常Exception</strong></li></ul><p><img src="https://img30.360buyimg.com/pop/jfs/t1/185417/8/21799/155982/622e14c1E0fbc4c54/bbd56e3a7d9a2d3a.png" alt="异常体系结构"></p><h4 id="ERROR"><a href="#ERROR" class="headerlink" title="ERROR"></a>ERROR</h4><ul><li>Error类对象是由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li><li>Java虚拟机运行时错误（Virtual MachineError），当JVM不再有继续执行操作所需的内存资源时将出现 <strong>OutOfMemoryError</strong>。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止；</li><li>还有发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误时不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数时程序运行时不允许出现的状况。</li></ul><h4 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h4><ul><li>在Exception分支中有一个重要的子类RuntimeException（运行时异常）<ul><li>ArrayIndexOutOfBoundsException（数组下标越界异常）</li><li>NullPointerException（空指针异常）</li><li>ArithmeticException（算数异常）</li><li>MissingResourceException（丢失资源）</li><li>ClassNotFoundException（找不到类）等异常</li></ul></li><li>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；</li><li>Error和Exception的区别：Error通常时灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机（JVM）一般会选择终止线程；Exception通常情况下时可以被程序处理的，并且在程序中应该尽可能地去处理这些异常。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;ul&gt;
&lt;</summary>
      
    
    
    
    <category term="技术" scheme="https://icu007work.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://icu007work.github.io/tags/Java/"/>
    
    <category term="Java异常" scheme="https://icu007work.github.io/tags/Java%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Java面向对象04</title>
    <link href="https://icu007work.github.io/archives/bc05bf18.html"/>
    <id>https://icu007work.github.io/archives/bc05bf18.html</id>
    <published>2022-08-25T14:41:51.000Z</published>
    <updated>2023-07-31T12:40:09.611Z</updated>
    
    <content type="html"><![CDATA[<h2 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h2><h3 id="静态变量与静态方法"><a href="#静态变量与静态方法" class="headerlink" title="静态变量与静态方法"></a>静态变量与静态方法</h3><ul><li>静态的变量  多线程中会用到(包含static关键字)</li><li>非静态的变量（不包含static关键字）</li><li>非静态方法中可以直接调用静态方法,而静态方法中无法调用非静态方法.</li><li>如果变量是静态变量我们就可以直接通过类名去访问这个变量,而非静态变量不可以直接通过类名来访问。</li><li>静态方法可以直接被调用，非静态方法需要实例化类对象之后，才可以通过对象来调用。</li></ul><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo07;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 20:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> age;                 <span class="comment">//静态的变量  多线程中会用到</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;                   <span class="comment">//非静态的变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;                      <span class="comment">//非静态方法</span></span><br><span class="line">        go();                               <span class="comment">//非静态方法中可以直接调用静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>&#123;                <span class="comment">//静态方法</span></span><br><span class="line">        <span class="comment">//run();                            而静态方法中无法调用非静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(s1.score);       <span class="comment">//可以看到非静态变量需要实例化类对象之后，才可以通过对象来访问。</span></span><br><span class="line">        System.out.println(s1.age);</span><br><span class="line"></span><br><span class="line">        System.out.println(Student.age);    <span class="comment">//如果变量是静态变量我们就可以直接通过类名去访问这个变量</span></span><br><span class="line">        <span class="comment">//System.out.println(Student.score);  而非静态变量不可以直接通过类名来访问。</span></span><br><span class="line">        go();                               <span class="comment">//静态方法可以直接被调用</span></span><br><span class="line">        <span class="comment">//run();</span></span><br><span class="line">        s1.run();                           <span class="comment">//非静态方法需要实例化类对象之后，才可以通过对象来调用。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p><strong>在程序运行过程中，先执行父类，再执行子类。先执行静态代码块（且静态代码块只执行一次），然后再执行匿名代码块。最后再执行构造方法。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo07;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 21:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img30.360buyimg.com/pop/jfs/t1/95087/34/23979/100331/622deca3E97877a38/3c8b3745c1e813d3.png" alt="静态代码块"></p><hr><h3 id="静态导入包（不常用）"><a href="#静态导入包（不常用）" class="headerlink" title="静态导入包（不常用）"></a>静态导入包（不常用）</h3><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line">System.out.println(random());</span><br><span class="line">System.out.println(PI);</span><br></pre></td></tr></table></figure><p>当包被静态导入之后，在程序中就可以直接通过包内的方法名来调用这个方法。但是并不常用。</p><hr><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li><strong><em>abstract</em>修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类。</strong></li><li><strong>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。</strong></li><li>抽象类，不能用new关键字来创建对象，它是用来让子类继承的</li><li>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。</li><li>子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。</li><li>抽象类存在的意义：抽象出来，提高开发效率。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo08;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 21:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//用abstract 关键字修饰的类叫做抽象类，</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">    <span class="comment">//abstract 是一个约束，抽象方法 只有方法名字，没有方法的实现（没有方法体）  抽象方法由子类实现。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//1.不能new这个抽象类，只能靠子类去实现</span></span><br><span class="line">    <span class="comment">//2.抽象类中可以写普通方法</span></span><br><span class="line">    <span class="comment">//3.抽象方法必须在抽象类中</span></span><br><span class="line">    <span class="comment">//抽象的抽象：约束。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Action</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承抽象类，就一定要实现抽象类里面的抽象方法。不然这个类就变成抽象类，然后让子类来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo08;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 22:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//继承抽象类，就一定要实现抽象类里面的抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li><p>普通类：只有具体实现</p></li><li><p>抽象类：具体实现和规范（抽象方法）都有</p></li><li><p>接口：只有规范！自己无法写方法<del>专业的约束！约束和实现分离：面向接口编程</del></p></li><li><p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是……则必须能……”的思想。<strong>eg：如果你是天使，则必须能飞。如果你是汽车，则必须能跑。如果你是好人，则必须干掉坏人；如果你是坏人，则必须欺负好人。</strong></p></li><li><p><strong>接口的本质是契约</strong>，就像我们人间的法律一样，制定好后大家都遵守。</p></li><li><p>接口的精髓，是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计模式都只针对具备了抽象能力的语言（比如c++、Java、c#等）就是因为设计模式所研究的，时间上就是如何合理的去抽象。</p></li></ul><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo09;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 22:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类是继承  extends</span></span><br><span class="line"><span class="comment">// 类也可以实现接口 implements 接口</span></span><br><span class="line"><span class="comment">// 实现了接口的类，就必须重写接口中的方法</span></span><br><span class="line"><span class="comment">// 接口就间接的实现了多继承。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>,TimeService&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">timer</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public interface TimeService &#123;</span></span><br><span class="line"><span class="comment">    void timer();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// interface 定义的关键字 ， 接口都需要有实现类</span></span><br><span class="line"><span class="comment">public interface UserService &#123;</span></span><br><span class="line"><span class="comment">    //接口中所有属性类型 都是 public static final（但我们通常不在接口中定义属性）</span></span><br><span class="line"><span class="comment">    public static final int AGE = 99;</span></span><br><span class="line"><span class="comment">    //接口中所有定义其实默认都是抽象的 public abstract</span></span><br><span class="line"><span class="comment">    public abstract void add();</span></span><br><span class="line"><span class="comment">    void delete();</span></span><br><span class="line"><span class="comment">    void update();</span></span><br><span class="line"><span class="comment">    void query();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><hr><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>接口是一个约束</li><li>定义一些方法，让不同人实现。</li><li>方法的默认属性是 public abstract</li><li>常量的默认属性是public static final</li><li>接口不能被实例化<del>接口中没有构造方法</del></li><li>implements可以实现多个接口</li><li>必须要重写接口中的方法</li></ol><hr><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对于A类来说就称为内部类，而A类相对于B类来说就是外部类了。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.in();</span><br><span class="line">        inner.gerAge();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class Outer &#123;</span></span><br><span class="line"><span class="comment">    private int age = 10;</span></span><br><span class="line"><span class="comment">    public void out()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;I&#x27;m the outer&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public class Inner&#123;</span></span><br><span class="line"><span class="comment">        public void in()&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;I&#x27;m the inner&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        public void gerAge()&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(age);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><p>内部类可以获得外部类的私有属性</p></li><li><p>要通过外部类来实例化内部类。</p><p>Outer outer &#x3D; new Outer();<br>Outer.Inner inner &#x3D; outer.new Inner();</p></li></ul><hr><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.in();</span><br><span class="line">        inner.gerAge();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class Outer &#123;</span></span><br><span class="line"><span class="comment">    private int age = 10;</span></span><br><span class="line"><span class="comment">    public void out()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;I&#x27;m the outer&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public static class Inner1&#123;</span></span><br><span class="line"><span class="comment">        public void in()&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;I&#x27;m the inner1&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="comment">//局部内部类</span></span><br><span class="line">            <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span>&#123;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//匿名内部类：没有名字初始化类，不用将实例保存到变量中</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Apple</span>().eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat apple&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;static-关键字&quot;&gt;&lt;a href=&quot;#static-关键字&quot; class=&quot;headerlink&quot; title=&quot;static 关键字&quot;&gt;&lt;/a&gt;static 关键字&lt;/h2&gt;&lt;h3 id=&quot;静态变量与静态方法&quot;&gt;&lt;a href=&quot;#静态变量与静态方法&quot; c</summary>
      
    
    
    
    <category term="技术" scheme="https://icu007work.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://icu007work.github.io/tags/Java/"/>
    
    <category term="Java面向对象" scheme="https://icu007work.github.io/tags/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java面向对象03</title>
    <link href="https://icu007work.github.io/archives/22612abb.html"/>
    <id>https://icu007work.github.io/archives/22612abb.html</id>
    <published>2022-08-25T14:41:48.000Z</published>
    <updated>2023-07-31T12:40:09.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li>该露的露，该藏的藏<ul><li>我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用</li></ul></li><li>封装（数据的隐藏）<ul><li>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。</li></ul></li><li>记住这句话：<strong>属性私有，get&#x2F;set</strong></li><li>封装的作用：<ul><li>1.提高程序的安全性，保护数据</li><li>2.隐藏代码的实现细节</li><li>3.统一接口</li><li>4.系统可维护性增加了</li></ul></li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 12:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="comment">//    属性私有</span></span><br><span class="line">    <span class="keyword">private</span> String name;        <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;            <span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> sex;           <span class="comment">//性别</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> id, <span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class Application &#123;</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">        Student Tom = new Student();</span></span><br><span class="line"><span class="comment">        System.out.println(Tom.getName());</span></span><br><span class="line"><span class="comment">        Tom.setName(&quot;Tom&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(Tom.getName());</span></span><br><span class="line"><span class="comment">        System.out.println(Tom.getId());</span></span><br><span class="line"><span class="comment">        Tom.setId(1234);</span></span><br><span class="line"><span class="comment">        System.out.println(Tom.getId());</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/213402/8/14777/201552/622d7354Ebfb0538a/f6e46e96693a982f.png" alt="封装"></p><hr><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</li><li><strong>extends</strong>的意思是”扩展“。子类是父类的扩展。</li><li><strong>Java中类只有单继承，没有多继承！</strong></li><li>继承是类和类之间的一种关系，除此之外，类和类之间的关系还有依赖、组合、聚合等。</li><li>继承关系的两个类，一个为子类（派生类）、一个为父类（基类）。子类继承父类，使用关键字extends来表示。</li><li>object类</li><li>super</li><li>方法重写</li></ul><p><strong>子类继承了父类，就会拥有父类的全部方法，前提是方法属性为<br>在Java中所有类都默认直接或间接继承Object；快捷键：ctrl+H</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 12:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//在Java中所有类都默认直接或间接继承Object</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;say some thing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为</span></span><br><span class="line"><span class="comment">//快捷键：ctrl+H</span></span><br><span class="line"><span class="comment">public class Teacher extends Person&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class Application &#123;</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">//        Student Tom = new Student();</span></span><br><span class="line"><span class="comment">//        System.out.println(Tom.getName());</span></span><br><span class="line"><span class="comment">//        Tom.setName(&quot;Tom&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(Tom.getName());</span></span><br><span class="line"><span class="comment">//        System.out.println(Tom.getId());</span></span><br><span class="line"><span class="comment">//        Tom.setId(1234);</span></span><br><span class="line"><span class="comment">//        System.out.println(Tom.getId());</span></span><br><span class="line"><span class="comment">        Teacher teacher = new Teacher();</span></span><br><span class="line"><span class="comment">        teacher.speak();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><img src="https://img30.360buyimg.com/pop/jfs/t1/91867/18/23639/150759/622d908dEc5b63cc7/e997d4b885bc1b6e.png" alt="继承"></p><p>可以看到Teacher类没有speak方法，但是实例化的teacher对象却可以调用speak方法，原因就是Teacher继承了Person类，而Person类中定义了speak方法。</p><hr><h3 id="super关键字："><a href="#super关键字：" class="headerlink" title="super关键字："></a>super关键字：</h3><p>super关键字可以在子类调用父类。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 12:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//在Java中所有类都默认直接或间接继承Object</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person类的构造方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;say some thing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为</span></span><br><span class="line"><span class="comment">//快捷键：ctrl+H</span></span><br><span class="line"><span class="comment">public class Teacher extends Person&#123;</span></span><br><span class="line"><span class="comment">    public Teacher() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Teache的构造方法执行了&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public void test()&#123;</span></span><br><span class="line"><span class="comment">        print();</span></span><br><span class="line"><span class="comment">        this.print();</span></span><br><span class="line"><span class="comment">        super.print();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    public void print()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Teacher&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class Application &#123;</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">//        Student Tom = new Student();</span></span><br><span class="line"><span class="comment">//        System.out.println(Tom.getName());</span></span><br><span class="line"><span class="comment">//        Tom.setName(&quot;Tom&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(Tom.getName());</span></span><br><span class="line"><span class="comment">//        System.out.println(Tom.getId());</span></span><br><span class="line"><span class="comment">//        Tom.setId(1234);</span></span><br><span class="line"><span class="comment">//        System.out.println(Tom.getId());</span></span><br><span class="line"><span class="comment">        Teacher teacher = new Teacher();</span></span><br><span class="line"><span class="comment">        teacher.speak();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4><p><img src="https://img30.360buyimg.com/pop/jfs/t1/216992/40/14624/218209/622d97e7E8a269e74/ba7d7393e715a8e8.png" alt="super"></p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/207922/37/19475/234785/622d98a0E30c65ddb/2813111d970d715e.png" alt="构造方法"></p><p>可以看到，当对象被实例化之后，会调用构造器方法，如果有父类则先调用父类的构造器方法。这是因为子类的构造方法中：默认添加了super();关键字，所以会先调用父类的构造器方法！同时，调用父类的构造器必须放在第一行。</p><hr><h4 id="super注意点"><a href="#super注意点" class="headerlink" title="super注意点"></a>super注意点</h4><ol><li>super调用父类的构造方法，必须在构造方法的第一个</li><li>super必须只能出现在子类的方法或者构造方法中</li><li>super和this不能同时调用构造方法</li></ol><p>super与this的区别</p><ol><li>代表的对象不同：<ol><li>this：本身调用者这个对象</li><li>super：代表父类对象的应用</li></ol></li><li>前提：<ol><li>this：没有继承也可以使用</li><li>super：只能在继承条件才可以使用</li></ol></li><li>构造方法：<ol><li>this();本类的构造</li><li>super():父类的构造</li></ol></li></ol><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p><strong>静态方法是类的方法，而非静态方法是对象的方法。</strong> 有static时，对象调用的是自身类的方法，没有static时，对象调用的是自身对象的方法。</p><p><strong>静态方法和非静态方法差别很大</strong></p><ol><li>静态方法：方法的调用只和左边定义的数据类型有关</li><li>非静态：非静态方法才存在重写。</li></ol><p><strong>只有非静态的 public属性的方法才能被重写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 15:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;b---&gt;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class A extends B&#123;</span></span><br><span class="line"><span class="comment">    public void test()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;a---&gt;test&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class Application &#123;</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">        A a = new A();</span></span><br><span class="line"><span class="comment">        B b = new A();</span></span><br><span class="line"><span class="comment">        a.test();</span></span><br><span class="line"><span class="comment">        b.test();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 15:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;b---&gt;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class A extends B&#123;</span></span><br><span class="line"><span class="comment">    public void test()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;a---&gt;test&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class Application &#123;</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">        A a = new A();</span></span><br><span class="line"><span class="comment">        B b = new A();</span></span><br><span class="line"><span class="comment">        a.test();</span></span><br><span class="line"><span class="comment">        b.test();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://img30.360buyimg.com/pop/jfs/t1/213987/27/14642/174096/622da1edE609d5ba6/147aba0b6b34adc1.png" alt="方法重写"></p><hr><h4 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h4><p><strong>重写：需要有继承关系，子类重写父类的方法！</strong></p><ol><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符：范围可以扩大. public&gt;protected&gt;default&gt;private</li><li>抛出的异常：范围可以被缩小，但不能扩大。eg父类抛出的异常为：Exception，那么子类抛出的异常范围就需要比Exception要小。可以抛出为：ClassNotFoundException</li></ol><p><strong>重写：子类的方法和父类必须要一致，方法体不同。</strong></p><p><strong>为什么要重写</strong>：</p><ol><li>父类的功能，子类不一定需要，或者不一定满足</li></ol><hr><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li>动态编译：类型”可扩展性更强</li><li>多态即同一个方法可以根据发送对象的不同而采用多种不同的行为方式。</li><li>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多</li><li>多态存在的条件<ul><li>有继承关系</li><li>子类重写父类方法</li><li>父类引用指向子类对象</li></ul></li><li><strong>注意：多态是方法的多态，属性没有多态</strong></li><li>instanceof</li></ul><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo06;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 15:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class Student extends Person&#123;</span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public void run() &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Student run&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public void eat()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Student eat&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class Application &#123;</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">        //一个对象的实际类型是确定的</span></span><br><span class="line"><span class="comment">        // 可以指向的引用类型就不确了 父类的引用可以指向子类</span></span><br><span class="line"><span class="comment">        // Student 能调用的方法都是自己的，或者继承父类的、</span></span><br><span class="line"><span class="comment">        Student s1 = new Student();</span></span><br><span class="line"><span class="comment">        //Person 父类型，可以指向子类，但是不能调用子类独有的方法</span></span><br><span class="line"><span class="comment">        Person s2 = new Student();</span></span><br><span class="line"><span class="comment">        Object s3 = new Student();</span></span><br><span class="line"><span class="comment">        //对象执行哪些方法，主要看对象左边的类型，和右边关系不大</span></span><br><span class="line"><span class="comment">        // 子类重写了父类的方法，则执行子类的方法。</span></span><br><span class="line"><span class="comment">        s1.run();</span></span><br><span class="line"><span class="comment">        s2.run();</span></span><br><span class="line"><span class="comment">        ((Student)s2).eat();</span></span><br><span class="line"><span class="comment">        s1.eat();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/147128/13/24014/189407/622daf0dEbda502a0/b1b1cc4e335d0d70.png" alt="多态"></p><hr><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>多态是方法的多态；属性没有多态。</li><li>父类和子类，有联系 （类型转换异常–ClassCastException）</li><li>存在条件：继承关系，方法需要重写，父类引用指向子类对象。Father f1 &#x3D; new Son();</li><li><strong>哪些方法不能重写？</strong><ol><li>static方法，static代码块属于类，对象被创建时一同被执行</li><li><strong>final：常量 被final修饰的方法不能被重写，被final修饰的类不能被继承；被final修饰的变量一经赋值后续不能更改。</strong></li><li>private方法： 私有属性不能被继承</li></ol></li></ol><h3 id="instanceof关键字"><a href="#instanceof关键字" class="headerlink" title="instanceof关键字"></a>instanceof关键字</h3><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiheya.oop.demo06.Teacher;</span><br><span class="line"><span class="keyword">import</span> com.xiheya.oop.demo06.Student;</span><br><span class="line"><span class="keyword">import</span> com.xiheya.oop.demo06.Person;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 11:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//X instanceof Y:能不能编译通过主要看X和Y是否存在父子关系。</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Student);     <span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Person);       <span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Object);       <span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Teacher);      <span class="comment">//false</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> String);       <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Student);      <span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Person);       <span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Object);       <span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Teacher);      <span class="comment">//false</span></span><br><span class="line">        <span class="comment">//System.out.println(person instanceof String);     //编译报错</span></span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Student);     <span class="comment">//true</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Person);      <span class="comment">//true</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Object);      <span class="comment">//true</span></span><br><span class="line">        <span class="comment">//System.out.println(student instanceof Teacher);   //编译报错</span></span><br><span class="line">        <span class="comment">//System.out.println(student instanceof String);    //编译报错</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//类型之间的转换  父-------》子</span></span><br><span class="line">        <span class="comment">// 高-------------------低（强制转换）。</span></span><br><span class="line"><span class="comment">//        Person obj = new Student();</span></span><br><span class="line"><span class="comment">//        //student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型</span></span><br><span class="line"><span class="comment">//        ((Student) obj).go();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //类型之间的转换  子-------》父</span></span><br><span class="line"><span class="comment">//        Student student = new Student();</span></span><br><span class="line"><span class="comment">//        //由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。</span></span><br><span class="line"><span class="comment">//        Person person = student;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.父类引用指向子类的对象</span></span><br><span class="line"><span class="comment">2.把子类转换为父类：向上转型：（自动转换）</span></span><br><span class="line"><span class="comment">3.把父类转换为子类：向下转型：（强制转换）</span></span><br><span class="line"><span class="comment">4.方便方法的调用，减少代码重复率，简洁</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://img30.360buyimg.com/pop/jfs/t1/144913/10/23289/20567/622dbb9aE35c557d0/d9d1e32d67c5dbf0.png" alt="instanceof"></p><hr><h3 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h3><ol><li><p>父类引用指向子类的对象</p></li><li><p>把子类转换为父类：向上转型：（自动转换）</p></li><li><p>把父类转换为子类：向下转型：（强制转换）</p></li><li><p>方便方法的调用，减少代码重复率，简洁</p></li><li><p>由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。</p></li><li><p>student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型</p></li><li><p>类型之间的转换<br>高——————-低（强制转换）</p><p>低——————-高（自动转换）</p></li></ol><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类型之间的转换  父-------》子</span></span><br><span class="line">        <span class="comment">// 高-------------------低（强制转换）。</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型</span></span><br><span class="line">        ((Student) obj).go();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类型之间的转换  子-------》父</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> student;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.父类引用指向子类的对象</span></span><br><span class="line"><span class="comment">2.把子类转换为父类：向上转型：（自动转换）</span></span><br><span class="line"><span class="comment">3.把父类转换为子类：向下转型：（强制转换）</span></span><br><span class="line"><span class="comment">4.方便方法的调用，减少代码重复率，简洁</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;封装&quot;&gt;&lt;a href=&quot;#封装&quot; class=&quot;headerlink&quot; title=&quot;封装&quot;&gt;&lt;/a&gt;封装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;该露的露，该藏的藏&lt;ul&gt;
&lt;li&gt;我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉</summary>
      
    
    
    
    <category term="技术" scheme="https://icu007work.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://icu007work.github.io/tags/Java/"/>
    
    <category term="Java面向对象" scheme="https://icu007work.github.io/tags/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
</feed>

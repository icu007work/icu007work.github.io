<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>语雀同款链接卡片—butterfly主题标签外挂</title>
      <link href="/archives/9765c01a.html"/>
      <url>/archives/9765c01a.html</url>
      
        <content type="html"><![CDATA[<p>本文参考自：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.leonus.cn/favicon.ico">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(进一寸有进一寸的欢喜。);"></div>        <div class="tag-link-right">            <div class="tag-link-title">https://blog.leonus.cn/2022/link-card.html</div>            <div class="tag-link-sitename">Leonus</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>样式如下：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://icu007.work/wp-content/uploads/2022/08/icno.png">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(与君共赴，万里征程);"></div>        <div class="tag-link-right">            <div class="tag-link-title">https://icu007.work</div>            <div class="tag-link-sitename">Charlie_l</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="link-js"><a href="#link-js" class="headerlink" title="link.js"></a>link.js</h3><p>在 <code>\themes\butterfly\scripts\tag</code> 文件夹下面新建 <code>link.js</code> 并粘贴如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">JS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * link</span></span><br><span class="line"><span class="comment"> * &#123;% link url,title,favicon,desc %&#125;</span></span><br><span class="line"><span class="comment"> * &#123;% link 链接,标题,图标,介绍 %&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">link</span>(<span class="params">args</span>) &#123;</span><br><span class="line">    args = args.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="comment">// 获取参数</span></span><br><span class="line">    <span class="keyword">let</span> url = (args[<span class="number">0</span>] || <span class="string">&#x27;&#x27;</span>).<span class="title function_">trim</span>(),</span><br><span class="line">        title = (args[<span class="number">1</span>] || <span class="string">&#x27;点击直达链接&#x27;</span>).<span class="title function_">trim</span>(),</span><br><span class="line">        favicon = (args[<span class="number">2</span>] ? <span class="string">`&lt;img src=&quot;<span class="subst">$&#123;args[<span class="number">2</span>]&#125;</span>&quot; class=&quot;no-lightbox&quot;&gt;`</span> : defaultIcon).<span class="title function_">trim</span>(),</span><br><span class="line">        desc = (args[<span class="number">3</span>] || <span class="string">&#x27;&#x27;</span>).<span class="title function_">trim</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;a href=&quot;<span class="subst">$&#123;url&#125;</span>&quot; <span class="subst">$&#123;url.includes(<span class="string">&#x27;http&#x27;</span>)?<span class="string">&#x27;target=&quot;_blank&quot;&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span> title=&quot;<span class="subst">$&#123;title&#125;</span>&quot; referrerPolicy=&quot;no-referrer&quot; class=&quot;link_card&quot;&gt;&lt;div class=&quot;link_icon&quot;&gt;<span class="subst">$&#123;favicon&#125;</span>&lt;/div&gt;&lt;div class=&quot;link_content&quot;&gt;&lt;div class=&quot;link_title&quot;&gt;<span class="subst">$&#123;title&#125;</span>&lt;/div&gt;<span class="subst">$&#123;desc?<span class="string">`&lt;div class=&quot;link_desc&quot;&gt;<span class="subst">$&#123;desc&#125;</span>&lt;/div&gt;`</span>:<span class="string">&#x27;&#x27;</span>&#125;</span>&lt;/div&gt;&lt;/a&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">tag</span>.<span class="title function_">register</span>(<span class="string">&#x27;link&#x27;</span>, link, &#123; <span class="attr">ends</span>: <span class="literal">false</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="link-styl"><a href="#link-styl" class="headerlink" title="link.styl"></a>link.styl</h3><p>在 <code>\themes\butterfly\source\css\_tags</code> 文件夹下面新建 <code>link.styl</code> 并粘贴如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.link_card</span></span><br><span class="line">  <span class="attribute">display</span>: flex</span><br><span class="line">  margin: <span class="number">10px</span> <span class="number">0</span></span><br><span class="line">  color: <span class="built_in">var</span>(--font-color) <span class="meta">!important</span></span><br><span class="line">  text-decoration: none <span class="meta">!important</span></span><br><span class="line">  background: <span class="built_in">var</span>(--reward-pop)</span><br><span class="line">  border-radius: <span class="number">10px</span></span><br><span class="line">  padding: <span class="number">12px</span></span><br><span class="line">  &amp;:hover</span><br><span class="line">    background: <span class="number">#4976f5</span></span><br><span class="line">    color: white <span class="meta">!important</span></span><br><span class="line">  .link_icon,.link_content</span><br><span class="line">    height: <span class="number">4rem</span></span><br><span class="line">  .link_icon</span><br><span class="line">    img,svg</span><br><span class="line">      height: <span class="number">4rem</span></span><br><span class="line">      width: <span class="number">4rem</span></span><br><span class="line">  .link_content</span><br><span class="line">    margin-left: <span class="number">1rem</span></span><br><span class="line">    width: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">6rem</span>)</span><br><span class="line">    overflow: hidden</span><br><span class="line">    line-height: <span class="number">1.5</span></span><br><span class="line">    display: flex</span><br><span class="line">    flex-direction: column</span><br><span class="line">    justify-content: center</span><br><span class="line">    .link_title</span><br><span class="line">      font-weight: bold</span><br><span class="line">      font-size: <span class="number">1.2rem</span></span><br><span class="line">    .link_title,.link_desc</span><br><span class="line">      word-break: break-all</span><br><span class="line">      overflow:hidden</span><br><span class="line">      text-overflow: ellipsis</span><br><span class="line">    &amp;:<span class="built_in">not</span>(:<span class="built_in">has</span>(.link_desc)) .link_title</span><br><span class="line">      display:-webkit-box</span><br><span class="line">      -webkit-box-orient:vertical</span><br><span class="line">      -webkit-line-clamp:<span class="number">2</span></span><br><span class="line">    .link_desc</span><br><span class="line">      opacity: .<span class="number">6</span></span><br><span class="line">    .link_desc,&amp;:<span class="built_in">has</span>(.link_desc) .link_title</span><br><span class="line">      white-space: nowrap</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>注意：<code>内容不能有英文逗号</code>，不然会出bug</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用html是为了高亮代码，不必在意 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 参数如下： --&gt;</span></span><br><span class="line">&#123;% link 链接,标题,图标,介绍 %&#125;</span><br><span class="line"><span class="comment">&lt;!-- 示例如下： --&gt;</span></span><br><span class="line">&#123;% link https://blog.leonus.cn/,Leonus,https://blog.leonus.cn/favicon.ico,进一寸有进一寸的欢喜。 %&#125;</span><br><span class="line"><span class="comment">&lt;!-- 你也可以什么都不填，将会全部使用默认值，如下： --&gt;</span></span><br><span class="line">&#123;% card %&#125;</span><br><span class="line"><span class="comment">&lt;!-- 你也可以省略部分内容，如下： --&gt;</span></span><br><span class="line">&#123;% link https://blog.leonus.cn/ %&#125;</span><br><span class="line"><span class="comment">&lt;!-- 位置在后面的参数不填的话可以直接省略，但是如果中间的不想填必须留空，如下： --&gt;</span></span><br><span class="line">&#123;% link https://blog.leonus.cn/,,,进一寸有进一寸的欢喜。 %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>链接</td><td>如果连接中包含http则新标签打开，否则本标签页打开</td><td>无</td></tr><tr><td>标题</td><td>网站的标题</td><td>点击直达链接</td></tr><tr><td>图标</td><td>网站favicon<code>链接</code></td><td></td></tr><tr><td>介绍</td><td>网站的description</td><td>无</td></tr></tbody></table><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>有什么问题可以留言，也可以根据自身需求进行修改。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Nginx反向代理服务器端口至二级域名</title>
      <link href="/archives/13767a3a.html"/>
      <url>/archives/13767a3a.html</url>
      
        <content type="html"><![CDATA[<p>要将 Nginx 配置为反向代理到另一个端口，需要进行以下步骤：</p><h2 id="一、安装-Nginx"><a href="#一、安装-Nginx" class="headerlink" title="一、安装 Nginx"></a>一、安装 Nginx</h2><p>如果还没有安装 Nginx，可以使用以下命令在 Ubuntu 上进行安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">复制代码sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><h2 id="二、配置-Nginx-反向代理"><a href="#二、配置-Nginx-反向代理" class="headerlink" title="二、配置 Nginx 反向代理"></a>二、配置 Nginx 反向代理</h2><h3 id="2-1-不使用-HTTPS"><a href="#2-1-不使用-HTTPS" class="headerlink" title="2.1 不使用 HTTPS"></a>2.1 不使用 HTTPS</h3><ul><li>例如需要反代我们服务器的8080端口且不适用HTTPS，可以进行以下操作。</li><li>在 Nginx 的配置文件(一般为Nginx安装目录下的 <code>nginx.conf</code> )中添加以下内容，将 HTTP 请求代理到服务器的 8080 端口。需要将 <code>example.com</code> 替换为域名或 IP 地址，<code>/</code> 后面的路径应该是需要代理的应用程序的路径。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name example.com; //需要更改为你的域名</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://localhost:8080/; //需要更改为要反代的端口</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-使用-HTTPS"><a href="#2-2-使用-HTTPS" class="headerlink" title="2.2 使用 HTTPS"></a>2.2 使用 HTTPS</h3><ul><li>使用HTTPS的情况下，需要先在服务器上安装SSL证书，可以通过Let’s Encrypt等服务获取免费的SSL证书。然后，可以按照以下步骤进行反向代理：</li><li>编辑Nginx配置文件<code>nginx.conf</code>，添加以下内容：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name your_domain_name.com;               #需要更改</span><br><span class="line"></span><br><span class="line">    ssl_certificate /path/to/your/cert.pem;         #需要更改</span><br><span class="line">    ssl_certificate_key /path/to/your/key.key;      #需要更改</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http://my_app;                     #需要更改</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 或者以下命令</span><br><span class="line">server </span><br><span class="line">    &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        listen       443;</span><br><span class="line">        server_name  your_domain_name.com;          #需要更改</span><br><span class="line">        ssl on;</span><br><span class="line">        ssl_certificate /path/to/your/cert.pem;</span><br><span class="line">        ssl_certificate_key /path/to/your/key.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  </span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  </span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        if ($host ~* ^\d+\.\d+\.\d+\.\d+$) &#123; </span><br><span class="line">           return 444; # 如果请求的是 IP 地址 返回空响应包，禁止访问</span><br><span class="line">           &#125;</span><br><span class="line">        location / &#123;</span><br><span class="line">                client_max_body_size 500M;</span><br><span class="line"></span><br><span class="line">                #proxy_redirect off;</span><br><span class="line">                proxy_set_header Host $proxy_host;</span><br><span class="line">                proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_pass http://localhost:8080;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>其中，<code>your_server_port</code>是你的服务器应用端口号，<code>your_domain_name.com</code>是你的域名，<code>/path/to/your/cert.pem</code>和<code>/path/to/your/key.key</code>分别是你的SSL证书和私钥文件的路径。该配置将来自NGINX监听的80端口的请求，重定向到443端口，并使用SSL证书对HTTPS请求进行加密。</li></ul><h2 id="三、重新加载-Nginx-配置"><a href="#三、重新加载-Nginx-配置" class="headerlink" title="三、重新加载 Nginx 配置"></a>三、重新加载 Nginx 配置</h2><ul><li>执行以下命令以重新加载 Nginx 配置：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t &amp;&amp; sudo service nginx reload</span><br><span class="line">// 或者执行以下命令重启 nginx</span><br><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><ul><li>现在，Nginx 将代理到服务器的 8080 端口。在浏览器中反代过的域名或 IP 地址，应该就能够访问应用程序了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Font-Awesome-Animation各个图标效果</title>
      <link href="/archives/82958ed6.html"/>
      <url>/archives/82958ed6.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="ca49ea4e6b2e163c41943e6d4088503e0bad743f947534be1b4b08aaf573d806">4630436162ade97ba2718b7d0c4b3b63cb3a3f659c5ca08b4bca0f5845928186d60d6b44f35333dfcdb5d68b77a4115e27f69914aa13f0d526237093837906edd4db4af16e401f54d17ab765a4640fbbff7024eacaa05660e465fe10965fdcc6e2dfe13d6e044eed5e5d7ae457afd454757b567b8fc9f6d43e8a6d869d17610ab9565f2908a7157ed9225989f5724bf0a180869151f0781f62268ab4db1191d99c1e144d566b8e009b14cca676d7d3435996eead3858cb060eb42cdd567d60db17f0d2cc82333895f69cd1501d73c94e146397bb4d0438d714af76ab77ef346b6b390a9c170c9cbd909040abaf98fbfc958eec1dfea9f0479d398fd278f34dff736d279d94874d7bc6f8dd757698fcaa2840809037e89c4e1855e324eda163acd48473cab5e75f9a03ecde1893581e30756cc3b1c77ef5632fd2599eb6f7860ec5743bb0d6c0b5e140e3c8f6ff301613877f3d44de935b47284eccf5522ed8751990a7a576a95bb812a1d1c51fc0953cfde2cb7ed2eaa5882b9f4eb36bf644b49b39d3e48bc2a5daf4b4104ca7cf6daa1118a8d763163bc2a81192abe9b3bce80b9dde24a60feb7b748ac73491343e98be0afdcb62203f3132d725577a27751dc3f3d110a299f0c320cc598014a5537d7da5484cad762de37c474fe048a418412ee995532a29cb26d898563474190432bfc05e2f1309eabc6c902a105cb377b0b5164bf4247fdc6d34c8457f5b03d19035069d37bb6fc04c2d9301e9b6a019900f59d93bcf23dc3ac5217974e6602a7337126aaa54ca89cac49d05e5e61c49c096d5565f78950c944d28ca7a0ccd6a4de4e0052b8124450805221f921c87b12e4ce22223d03a6b5d0444f42a9ce24c636a498cdad75eac3a3b9ed7e3ac20c3b404b149845c8607d7f3a5298ae2edaf979aaf00e6089cf733421af8dcc152eb3c11e6338d49e7b3ece5f74b3e88a932970d465ec2662288d1a08dec5954e94d08ef40df8395411417bad5612526f963898f9f26bd90fd00d641a983142c708d97d8702063b82799e60d95f606fbf217b0453d6e927509a10366b0ab2e8bc5ba35404f22eb6c65b110bd345ba22e721dec3d29675ab2ad8c434f4a8f208ce9d9909e752c7b3e92b37939366a234c5b7770c09c083d7b043fe7e8ae66a0a16e0107bcb029177fd9f45df2ed15cf78a7eea181c13e43dabfb1051f605acf2336dbffe68303da22cb50dadac3256d7aa861068c338a6f86d21653f0367e9b9f8cd926181eadfd5a8ffa5b79ee48311a8a62a03426728498ea04ef73e3e5bd22ad0197b408397e11fd0438f1145d067e1b184450d2421c56f78d84a058c40d5d6c6fbc505e55d6b0270972affa919310bf3687e483f7ceb884400add1a74e331399c7a1e0755ec7dd442a796582a68224fab8a1924e7d8796fa0753b7e8671f345621c972c9481866b50da3f787d85bafe8df7ec297db3d17a2fd5373ee0655ebfb46e8719fc05416a621f4130efedf3c3b180842a5e7625dc7d264c31dce176751a99ff6edacece691cd7230bcf2b82c213f2455ba26d0690a7fed79102c22abf580f2aaa1a70df53b18d89a466ef8d9b0472677470316e834e97f8d488757026d2888a72f12601055f462cb26091d7edb4866eafc20b205b8564329fc0490114231033367e2779fdec370bd906192b5b37fe72af0ab7491f7cf631dae4c44880b46f8e4156477ddd7e376f454e3e6468451416c49bb3cb535fb7221c2721e946c76378c9ec3545d067d685f1f4ad4138f54c0d6c7db58bae32d2500013cb5fe3dfc34e3c3d59216564ef3b3d2c080425e416c9b0d7628ee75f3d98f5e5fbb0de097758e8b19d1bf8daa159711d9521b223f140c36709334980de195645b336be9851b36067f25532a8637e004849e895bdd8ceb8c1eba3a3a93b4176b8b46c20e47b69844b39111dbfb2b018cff733d6986e61c3c67057d85c73a71eb4ddddd97d7e6f87e2c25cf93858442857468d067fc03e3fdb939372b3d88bacbefd3a4fd9877caa2d301e7aa64a9032efc5062b3a61ae1e9a4b56c2b06c370a12db877793fac8f94388c9b6268baeb35f88e30aaea674c3b64baaec28083f57911d88eb7c5ec9fd9c0ee725cb3fe465c6ac3edadfe6ccf7c0e4e926e6019fa5400786c59c71d4409d1cc0122bd27523adca0a11de9317b24f97ec484fc04bdfb48bcb565495de5617ae5440efa5f7845a739505d9d0697c19f1115369b9d49758633cc98869</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分析Android项目运行</title>
      <link href="/archives/7d2e59d3.html"/>
      <url>/archives/7d2e59d3.html</url>
      
        <content type="html"><![CDATA[<h2 id="分析安卓项目如何运行"><a href="#分析安卓项目如何运行" class="headerlink" title="分析安卓项目如何运行"></a>分析安卓项目如何运行</h2><h3 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段话表示对HelloWorldActivity这个活动进行注册，<font color = "red"><strong> 没有 </strong></font> 在AndroidManifest.xml中<font color = "red"><strong> 注册的活动是不能使用的 </strong></font> 。其中<font color = "red"><strong> intent-filter里的两行代码尤为重要 </strong></font> 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这两行代码表示HelloWorldActivity是这个项目的主活动。</p><h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><p>活动是应用程序的门面，凡是在应用中看到的东西，都是放在活动中的。，所以我们看到的界面，就是MainActivity这个活动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MainActivity 继承自 AppCompatActivity，Activity是一个Android系统提供的活动基类，我们项目中所有活动都必须继承它或者它的子类才能拥有活动的特性（AppCompatActivity是Activity的子类）。</p><p>MainActivity有一个onCreate()方法,这个方法是每一个活动被创建时必定要执行的方法，但是也只有两行代码。并且我们并没有看到HelloWorld字样。</p><p>我们看不到HelloWorld的原因是因为Android程序设计是<font style="background:green" font color = white><strong> 逻辑与视图分离 </strong></font> ，不推荐直接在活动中直接编写界面。更多的做法是<font style="background:green" font color = white><strong> 在布局文件中编写界面，然后再在活动中引入进来 </strong></font> 。在onCreate()方法的第二行调用了<font style="background:green" font color = white><strong> setContentView(R.layout.activity_main)方法 </strong></font> ，这个方法给当前活动引入了一个布局，所以HelloWorld是在这里定义的。</p><p>其中布局文件都是定义在res&#x2F;layout 目录下的，展开layout目录，可以看到：activity_main.xml文件，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Hello World!&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用于在布局中显示文字的是一个TextView控件，而我们可以通过android:text&#x3D;”Hello World!”这句代码定义需要显示什么文字。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一个Android程序</title>
      <link href="/archives/c521edc1.html"/>
      <url>/archives/c521edc1.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建第一个Android项目"><a href="#创建第一个Android项目" class="headerlink" title="创建第一个Android项目"></a>创建第一个Android项目</h2><h3 id="创建HelloWorld项目"><a href="#创建HelloWorld项目" class="headerlink" title="创建HelloWorld项目"></a>创建HelloWorld项目</h3><p>先在Android上面new一个Project，输入应用名称、公司域名然后选择项目代码存放位置。然后再选择活动界面，给创建的活动和布局命名。然后等待项目创建成功。</p><h3 id="启动设备（模拟器或者实体设备）"><a href="#启动设备（模拟器或者实体设备）" class="headerlink" title="启动设备（模拟器或者实体设备）"></a>启动设备（模拟器或者实体设备）</h3><p>模拟器安装步骤：</p><ol><li><p>下载SDK：目前官网上已经没有单独的SDK下载安装包了。谷歌官网推荐的是下载包含有Android SDK的Android Studio。<a href="https://developer.android.com/studio/">官网下载</a>地址</p></li><li><p><font color = "red"><strong> 安装路径需记住 </strong></font> ：本人安装路径为：E:\Program Files\Android\SDK_Tools</p></li></ol><p><img src="https://m.360buyimg.com/babel/jfs/t1/87812/3/29255/39841/62b9474fE6fd09a54/b52fbb814d641d1f.png" alt="目录"></p><ol start="3"><li>双击打开AVD Manager.exe（选择下列文件安装）选择完成之后点install</li></ol><p><img src="https://m.360buyimg.com/babel/jfs/t1/36673/34/16367/135571/62b947d0E35bf8fde/e82391d638b98122.png" alt="下载"></p><ol start="4"><li>勾选左下角  Accept License，开始安装</li></ol><p><img src="https://m.360buyimg.com/babel/jfs/t1/216102/34/19510/57309/62b94867E901dfbef/32f93d3c8c72f9c3.png" alt="Accept"></p><ol start="5"><li>耐心等待其下载完成</li></ol><p><img src="https://m.360buyimg.com/babel/jfs/t1/213735/7/20495/57747/62b948a8Ef5d95be8/458f6cb626d76972.png" alt="下载"></p><ol start="6"><li>配置SDK环境</li></ol><p>“右键 我的电脑”—“属性”—“高级系统设置”—“环境变量”—“系统变量”—“新建”</p><p>ANDROID_SDK_HOME其值为E:\Program Files\Android\SDK_Tools</p><p><img src="https://m.360buyimg.com/babel/jfs/t1/14597/4/16956/49620/62b97c9eE81609139/5ae3ef33e9c23834.png" alt="环境变量"></p><p>编辑Path变量，新增如下两项，<font style="background:green" font color = white><strong> %ANDROID_SDK_HOME%\platform-tools </strong></font> 、<font style="background:green" font color = white><strong> %ANDROID_SDK_HOME%\tools </strong></font> </p><p><img src="https://m.360buyimg.com/babel/jfs/t1/119511/30/23462/35517/62b97cf2E1900381f/d8be8bb741150705.png" alt="Path"></p><h3 id="运行第一个项目"><a href="#运行第一个项目" class="headerlink" title="运行第一个项目"></a>运行第一个项目</h3><p><img src="https://m.360buyimg.com/babel/jfs/t1/8552/30/18256/147697/62b954f9Eb9ea1f86/c853c46249cc52c1.png" alt="运行"></p><p><img src="https://m.360buyimg.com/babel/jfs/t1/177838/11/25850/13873/62b91a90Ead9d07eb/fe87b0ca60bff876.png" alt="第一个Android项目"></p><h3 id="分析第一个Android程序"><a href="#分析第一个Android程序" class="headerlink" title="分析第一个Android程序"></a>分析第一个Android程序</h3><h4 id="Project目录"><a href="#Project目录" class="headerlink" title="Project目录"></a>Project目录</h4><p><img src="https://m.360buyimg.com/babel/jfs/t1/198246/23/25013/22163/62b95440Ea92a2960/08d623ec793aa4a3.png" alt="Project目录"></p><ol><li><p><font color = "red"><strong> .gradle和.idea </strong></font> ：Android Studio自动生成的目录，无须关心。</p></li><li><p><font color = "red"><strong> app </strong></font> ：项目中的代码、资源等内容 几乎都是放置在这个目录当中的，后续开发工作也是在这个目录当中进行的。</p></li><li><p><font color = "red"><strong> build </strong></font> ：包含了一些在编译时自动生成的文件。</p></li><li><p><font color = "red"><strong> gradle </strong></font> ：这个目录下包含gradle wrapper的配置文件，使用gradle wrapper的方式无须提前下载gradle，Android Studio会根据本地缓存情况来决定是否需要下载gradle。Android Studio默认没有开启gradle wrapper，如需打开，可点击导航栏 —&gt; File —&gt; Settings —&gt; Build， Execution, Deployment —&gt; Gradle,进行配置更改.</p></li><li><p><font color = "red"><strong> .gitgnore </strong></font> ：用来指定目录或文件排除在版本控制之外。</p></li><li><p><font color = "red"><strong> build.gradle </strong></font> ：这是项目的全局gradle构建脚本，通常情况下这个文件内容无须更改。</p></li><li><p><font color = "red"><strong> gradle.properties </strong></font> ：这是项目的全局gradle配置文件，在这里配置的属性会影响到项目中所有的gradle编译脚本。</p></li><li><p><font color = "red"><strong> gradlew和gradlew.bat </strong></font> ：这两个文件是用来在命令行界面执行gradle命令的，其中gradlew是在Linux和Mac系统中使用的，gradlew.bat是在Windows系统中使用的。</p></li><li><p><font color = "red"><strong> ProjectName.iml </strong></font> ：iml文件是所有Intellij IDEA项目都会自动生成的一个文件（Android Studio基于Intellij IDEA），用于标识这是一个Intellij IDEA项目，我们无需修改。</p></li><li><p><font color = "red"><strong> local.properties </strong></font> ：用于指定本机中的Android SDK路径，一般情况下无需修改，除非本机的SDK位置发生变化。</p></li><li><p><font color = "red"><strong> settings.gradle </strong></font> ：这个文件用于指定项目中所有引入的模块。通常情况下模块的引入是自动完成的，需要手动修改的情况较少。</p></li></ol><p><font style="background:blue" font color = white> 我们不难发现，除app目录外其他目录均为自动生成的目录，所以app目录才是我们以后工作的重点 </font> </p><hr><h4 id="app目录"><a href="#app目录" class="headerlink" title="app目录"></a>app目录</h4><p><img src="https://m.360buyimg.com/babel/jfs/t1/126318/30/23870/10698/62b9574eE8636e973/ca6126a62c59951b.png" alt="app目录"></p><ol><li><font color = "red"><strong> build </strong></font> ：与外层build目录相似，主要也是包含了一些在编译时自动生成的文件，不过它里面的内容更为繁杂</li><li><font color = "red"><strong> libs </strong></font> ：如果项目中使用了第三方jar包，就需要把这些jar包都放在libs目录下。放在这个目录的jar包将会被自动添加到构建路径当中。</li><li><font color = "red"><strong> androidTest </strong></font> ：此处用来编写AndroidTest测试用例，可以对项目进行一个自动化测试。</li><li><font color = "red"><strong> java </strong></font> ：java目录是放置所有java代码的地方，展开该目录就可以看到已经创建的目录。</li><li><font color = "red"><strong> res  </strong></font> ：项目中所使用到的图片、布局、字符串等资源都要存放在这个目录中。此目录还存在很多子目录：图片存放在drawable目录下，布局放在layout下，字符串放在values目录下。</li><li><font color = "red"><strong> AndroidManifest.xml </strong></font> ：这是整个Android项目的配置文件，在程序中定义的所有四大组件都需要在这个文件里注册，另外还可以在这个文件中给应用程序添加权限说明。</li><li><font color = "red"><strong> test </strong></font> ：此处用来编写Unit Test测试用例，是对项目项目进行自动化测试的另一种方式。</li><li><strong>.gitgnore</strong> ：这个文件用于将app模块内的指定目录或文件排除在版本控制之外，作用和外层的.gitgnore文件类似。</li><li><strong>app.iml</strong> ：Intellij IDEA项目自动生成的文件，无需关心。</li><li><strong>build.gradle</strong> ：是app模块的gradle构建脚本，这个文件中会指定很多项目构建相关的配置。</li><li><strong>proguard-rules.pro</strong> ：这个文件用于指定代码的混淆规则，当代码开发完成后打成安装包文件，如果不希望被别人破解，通常会将代码进行混淆，从而让破解者难以阅读。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xray面板安装</title>
      <link href="/archives/25e76629.html"/>
      <url>/archives/25e76629.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="一、升级yum，安装curl依赖包"><a href="#一、升级yum，安装curl依赖包" class="headerlink" title="一、升级yum，安装curl依赖包"></a>一、升级yum，安装curl依赖包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update -y &amp;&amp; yum install curl -y</span><br></pre></td></tr></table></figure><p>其中：</p><p><code>yum update -y</code>为更新yum</p><p><code>yum install curl -y</code>为安装curl依赖包。</p><h2 id="二、重启系统"><a href="#二、重启系统" class="headerlink" title="二、重启系统"></a>二、重启系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="三、安装Xray面板"><a href="#三、安装Xray面板" class="headerlink" title="三、安装Xray面板"></a>三、安装Xray面板</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</span><br></pre></td></tr></table></figure><h2 id="四、centos安装宝塔面板"><a href="#四、centos安装宝塔面板" class="headerlink" title="四、centos安装宝塔面板"></a>四、centos安装宝塔面板</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>预装APP安装过程</title>
      <link href="/archives/3e55a450.html"/>
      <url>/archives/3e55a450.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="ecf902325778343057e11be1c72f278516b43994435e50592e4b3cd0e36b270e">1ffc7d1a99edb7ab7287058947423f9f3ae0e1543b1c5481e9de9dd6fb8de1c89d00fb7aceaa83b09d91a8631b4fffacdda14088534e0d9b9e695415048441cc0799387e4b8c0dabbc7072de37c834b0edce62226d4ec453d528d60d23e1f32f5b194b1b4b1c13a79ffed232256789d941cc1ec985f31e0da3cf5403093e9617c1317fa7831887de6e2ebfa0c0f2b77d539aa3c1c1ba96531ceaa4f6f80044f00a7033954ca297af0fdf5706336c38f40b80ec081c4cbd2746ecd4af40ed92c904cfd0b2b9ebf6e2558a4066688fb7a6b1c519791c2f1af63b7de97fa265129ccc937df790711f7c0d2f6b5de7c71ae34a222b1a6941c881978d6973e97bf8698222996f89006848393ad528f6c20bfe35e9b2363e636763b936dfa876bd5b8557f30f722fd7c12b310af7d0ac1bd0ba8f4abc591be878e54f307f636682443a4b28d92d4843e32589060fd2bad5799d93d9b99ace8439d3b0c68a1e7ac856534ff86700b47e73177896517971cd856232b1159dd70f679009f256b12049aee7268d785df90a16a8ad5a9a2a8309a6fd8d7051b2a7d1263d169f344fd2eb271d68251d272cf3323cbbfbfcafa3f1b29fc9e69d422d87d8d8ce4daa53e12d5df5de523fed9f8341da70f40e340d03624676eded916911adab93bc4d21ce8b91e499065b53df9e232be93846d744af6d811e0cb309b9c82f7c10c0e3de63cdfaba437a115da81342a971f9054a9454df18e269c686ef8df2d7af9e0828c9208d69cc1e150034d4911dd2e6f5d74204bcd4febc62534d46c4d9fea7d15c1e8e28f1548e467b6e6a18cae398d329a97a56234bd2061ba9c6fd8293ad3c19832c89960154ecaa8f3a2f5b584a3166290321609733bac68d970c4a53a49212ac1d33ab1eb7d5b9652de5062908bc9b6f8a307b38cd27fbbd2ca48bc25417a9742557b97ad3456bb0d84a45055172b905021fb7390990a73a476da0e28b8cd46a1f202df919f0eb6950b032253802c870171ceb35b46b3d48c7af3058cb23cf0a8b13dc74455a2e8131bb429fb7741bc2e375cbfaa31704f7ac3280dbe503ab8bdc4692cde8dd71892cf7f9f6631f034b91507f466111333836d890833cf41ddb71e0448262969a0e385814b0e1fa2a2c4f2a05d9cf4e8d54324bd56ec61fd33068b8a7698176413d19c8f6dedaddd2c9c7d6d560bcdfb6376a11b4d146c1cfd733900d3502e1ac28be04658c3d4fb5e36371f320cc53414efe3a1c9e5ba5d7f0d4bbc5a2aa3597886109a01b4398d39f67eebd94fc7375f67140f8b4e5486ac8a5f80480479c37df3fb41ca7f345e547583a1c942f5418c7b7a5c06de15d03973a0e454477255fae2a0daf947d56ccdebaa00f359c8953a33e9132639367de4231756cc06d26017c981ed3b163de3cc484844c18a0e2bd5c1800d34034c6424d9a0e845f93d3327cbe92649b2e7e989e39483b16be28a37f38a9dd4e55d8a3adfa62ffacd50d3098aa50ed2ba827fc06733d7ee7485e0f581c87dd012585e8c857691c3599e012380dba8cd2409a1e5a96e5678dab005e85405ef7a84e73e1059c9820d79b3e02e3843f6860a00dbf43fea847e34cef8c46ec355494245b7fcf6d372946e553f9984fc25d295656566e323780abf92bb42b6248bd1d98def7bf59591b755a9ca451902908ed30e3b1318aad149afd63b12fb0b0cdfdcf964fc49c1950c35def0380a6cb0a6212fcfd32cefd9b35464aeffb979be13a4b298cb1983a45dbc5ff9eeb69a101355695de764fdbaa3cf83f995cf2a4b1c3ed3a4c611ea65a54aeaf3f7e795f136898efe0765cd46150d4970d1043a1c535d1b3e630898707f563bc1ed7f7af27c77db19fc879775ef7ca0f2933686a09c46f9b8f835c0787fdf2945889b9c5ef6a92fbe9e11450af89ba5a9a630888285307a3297dea5358357c26ae080cc11ac8fecf8eb1a84053bee8b90d59ff1c08079d6287b398b416ec99cab571697b830535e6f3123de346880562cbf6487f6c3ba3da68152634ba2380dbbd05b48cc8016a98c1df4375f7d6dd0d3973844009368a5582ba2864fff1cf14edf44a3799a8d9e01b03cf3ccd199829adefaa5daa5268e8114d30531b920b12b7204dc814f2e5cc9490e41f9b9c456015bf1861f604b137c0fc87f16ab41d89881da3ef0cbdde763b6b176e9fa6ef8af520ac38bd744e9c6f2f93419a6d038ba4aa290a9a41f91be821f0e19cc81f9021d5bbc57b0d70a545fc2120240f93d76efd25b56810e30f2cf3fbc31ac4645bad274bd9f2a36e57151dc33c2de9bb34a2f3583dd41ea09606eb23e610</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记第公司开发环境搭建</title>
      <link href="/archives/12ce6b69.html"/>
      <url>/archives/12ce6b69.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="2226750b39d9aecf73ae1b4318eb1bf67190d7e55cc810d7e81295387a717869"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记第一次完成业务需求</title>
      <link href="/archives/55cbdc7c.html"/>
      <url>/archives/55cbdc7c.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="5ff81624128f4da33b3fa55eca10d9676ad4312bfc251a045c7357e61272a3cd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-push时冲突解决方法</title>
      <link href="/archives/80c83deb.html"/>
      <url>/archives/80c83deb.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、冲突原因"><a href="#一、冲突原因" class="headerlink" title="一、冲突原因"></a>一、冲突原因</h2><h3 id="1-1-多人同时修改同一文件"><a href="#1-1-多人同时修改同一文件" class="headerlink" title="1.1 多人同时修改同一文件"></a>1.1 多人同时修改同一文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">liaochongrong@urovo002-07:/home/ssd7/lcr_work/SQ45S$ git cherry-pick -n 4a7c5af22778e57440fdf09921b25e1a40a6d5e0</span><br><span class="line"></span><br><span class="line">error: 不能应用 4a7c5af... Product:SQ45S</span><br><span class="line">提示：冲突解决完毕后，用 &#x27;git add &lt;路径&gt;&#x27; 或 &#x27;git rm &lt;路径&gt;&#x27;</span><br><span class="line">提示：命令标记修正后的文件</span><br><span class="line"></span><br><span class="line">liaochongrong@urovo002-07:/home/ssd7/lcr_work/SQ45S$ git status</span><br><span class="line">位于分支 Pie_SQ45S_Release</span><br><span class="line">您的分支与上游分支 &#x27;origin/Pie_SQ45S_Release&#x27; 一致。</span><br><span class="line">未合并的路径：</span><br><span class="line">  （使用 &quot;git reset HEAD &lt;文件&gt;...&quot; 以取消暂存）</span><br><span class="line">  （使用 &quot;git add &lt;文件&gt;...&quot; 标记解决方案）</span><br><span class="line"></span><br><span class="line">    双方修改：   build/buildprop.mk</span><br><span class="line"></span><br><span class="line">尚未暂存以备提交的变更：</span><br><span class="line">  （使用 &quot;git add &lt;文件&gt;...&quot; 更新要提交的内容）</span><br><span class="line">  （使用 &quot;git checkout -- &lt;文件&gt;...&quot; 丢弃工作区的改动）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-2-缺少change-id"><a href="#1-2-缺少change-id" class="headerlink" title="1.2 缺少change-id"></a>1.2 缺少change-id</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">liaochongrong@urovo002-07:/home/ssd7/lcr_work/SQ45S$ git push origin HEAD:refs/for/Pie_SQ45S_Release</span><br><span class="line">对象计数中: 4, 完成.</span><br><span class="line">Delta compression using up to 64 threads.</span><br><span class="line">压缩对象中: 100% (4/4), 完成.</span><br><span class="line">写入对象中: 100% (4/4), 656 bytes | 0 bytes/s, 完成.</span><br><span class="line">Total 4 (delta 3), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (3/3)</span><br><span class="line">remote: Counting objects: 4, done</span><br><span class="line">remote: Processing changes: refs: 1, done    </span><br><span class="line">remote: ERROR: [19bc4b1] missing Change-Id in commit message footer</span><br><span class="line">remote: </span><br><span class="line">remote: Hint: To automatically insert Change-Id, install the hook:</span><br><span class="line">remote:   gitdir=$(git rev-parse --git-dir); scp -p -P 29418 liaochongrong@192.168.8.215:hooks/commit-msg $&#123;gitdir&#125;/hooks/</span><br><span class="line">remote: And then amend the commit:</span><br><span class="line">remote:   git commit --amend</span><br><span class="line">remote: </span><br><span class="line">To ssh://192.168.8.215:29418/NoUcode/SQ45S</span><br><span class="line"> ! [remote rejected] HEAD -&gt; refs/for/Pie_SQ45S_Release ([19bc4b1] missing Change-Id in commit message footer)</span><br><span class="line">error: 无法推送一些引用到 &#x27;ssh://192.168.8.215:29418/NoUcode/SQ45S&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://m.360buyimg.com/babel/jfs/t1/61562/20/19916/87101/630746a4E781cd8f2/30ce7c00b6bce0a7.png" alt="差异"></p><h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><h3 id="2-1-多人修改"><a href="#2-1-多人修改" class="headerlink" title="2.1 多人修改"></a>2.1 多人修改</h3><ul><li>通过 <code>git status</code>命令找到双方共同修改的文件，然后编辑文件，把多余的代码去掉即可。</li><li>可通过 <code>git diff 文件目录</code>来查看显示已写入暂存区和已经被修改但尚未写入暂存区文件的区别</li></ul><p><img src="https://m.360buyimg.com/babel/jfs/t1/132834/9/26175/55311/63074527Ebe1d9bb2/5731e9aaa5eb446d.png" alt="差异"></p><ul><li>如图，删除标识代码，此冲突即可解决。</li></ul><h3 id="2-2-缺少change-id"><a href="#2-2-缺少change-id" class="headerlink" title="2.2 缺少change-id"></a>2.2 缺少change-id</h3><ul><li>其实这个冲突的解决方法，git已经提示过我们了。就是这一段</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">remote: Hint: To automatically insert Change-Id, install the hook:</span><br><span class="line">remote:   gitdir=$(git rev-parse --git-dir); scp -p -P 29418 liaochongrong@192.168.8.215:hooks/commit-msg $&#123;gitdir&#125;/hooks/</span><br><span class="line">remote: And then amend the commit:</span><br><span class="line">remote:   git commit --amend</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>所以我们只需要执行 <code>gitdir=$(git rev-parse --git-dir); scp -p -P 29418 liaochongrong@192.168.8.215:hooks/commit-msg $&#123;gitdir&#125;/hooks/</code>以及 <code>git commit --amend</code>这两行命令即可。</li><li>当然如果不放心还可以reset 已有的提交：<code>git reset --soft 3bf39e60e2cad62f3ada0414f3cef64f386ccce3</code>，最后那一串为 commit id，reset完了之后，再重新进行提交操作。操作完成后即可看到change-id已经生成了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WP备份</title>
      <link href="/archives/b6be31da.html"/>
      <url>/archives/b6be31da.html</url>
      
        <content type="html"><![CDATA[<h2 id="argon主题选项"><a href="#argon主题选项" class="headerlink" title="argon主题选项"></a>argon主题选项</h2><h3 id="文本附加内容"><a href="#文本附加内容" class="headerlink" title="文本附加内容"></a>文本附加内容</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">您当前正在 - %link% .页面，阅读由“%author%” 撰写的《%title%》</span><br><span class="line">非常感谢您对我们的网站感兴趣并访问。在您使用本网站之前，请您仔细阅读本声明的所有条款。</span><br><span class="line"></span><br><span class="line">版权声明：</span><br><span class="line">1、本博客属个人所有，不涉及商业目的。</span><br><span class="line">2、本博客内容均为本人编写，图片版权属于原作者，图片仅供大家欣赏和分享，切勿做为商业目的使用。如果侵害了您的合法权益，请您及时与我们，我们会在第一时间删除相关内容！</span><br><span class="line">3、本博客所有原创作品，包括文字、资料、图片、网页格式，转载时请标注作者与来源。非经允许，不得用于赢利目的。</span><br><span class="line">4、本博客受中国知识产权、互联网法规和知识共享条例保护和保障，任何人不得进行旨在破坏或牟取私利的行为。</span><br><span class="line">5、做新时代合格网民，弘扬互联网精神：开放、平等、 协作 、分享；共同构建文明、清朗的网络环境</span><br><span class="line">6、本声明未涉及的问题参见国家有关法律法规，当本声明与国家法律法规冲突时，以国家法律法规为准。</span><br><span class="line">7、当您阅读到这里的时候，即表明已阅读并接受了上述各项条款;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="页脚内容"><a href="#页脚内容" class="headerlink" title="页脚内容"></a>页脚内容</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>Copyright  2022 Xiheya<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span>, All Rights Reserved.<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>本站已<span class="language-xml"><span class="tag">&lt;<span class="name">del</span>&gt;</span></span>稳定运行<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">del</span>&gt;</span></span>:<span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;blog_running_days&quot;</span> <span class="attr">class</span>=<span class="string">&quot;odometer&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> days , <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;blog_running_hours&quot;</span> <span class="attr">class</span>=<span class="string">&quot;odometer&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> h , <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;blog_running_mins&quot;</span> <span class="attr">class</span>=<span class="string">&quot;odometer&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> m , <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;blog_running_secs&quot;</span> <span class="attr">class</span>=<span class="string">&quot;odometer&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> s<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">no-pjax</span>&gt;</span></span></span><br><span class="line">var blog<span class="emphasis">_running_</span>days=document.getElementById(&quot;blog<span class="emphasis">_running_</span>days&quot;);</span><br><span class="line">var blog<span class="emphasis">_running_</span>hours=document.getElementById(&quot;blog<span class="emphasis">_running_</span>hours&quot;);</span><br><span class="line">var blog<span class="emphasis">_running_</span>mins=document.getElementById(&quot;blog<span class="emphasis">_running_</span>mins&quot;);</span><br><span class="line">var blog<span class="emphasis">_running_</span>secs=document.getElementById(&quot;blog<span class="emphasis">_running_</span>secs&quot;);</span><br><span class="line">function refresh<span class="emphasis">_blog_</span>running<span class="emphasis">_time()&#123;</span></span><br><span class="line"><span class="emphasis">    var time = new Date() - new Date(2021, 10, 16, 5, 20, 0);</span></span><br><span class="line"><span class="emphasis">    var d=parseInt(time/24/60/60/1000);</span></span><br><span class="line"><span class="emphasis">    var h=parseInt(time%(24*60*60*1000)/60/60/1000);</span></span><br><span class="line"><span class="emphasis">    var m=parseInt(time%(60*60*1000)/60/1000);</span></span><br><span class="line"><span class="emphasis">    var s=parseInt(time%(60*1000)/1000);</span></span><br><span class="line"><span class="emphasis">    blog_</span>running<span class="emphasis">_days.innerHTML=d;</span></span><br><span class="line"><span class="emphasis">    blog_</span>running<span class="emphasis">_hours.innerHTML=h;</span></span><br><span class="line"><span class="emphasis">    blog_</span>running<span class="emphasis">_mins.innerHTML=m;</span></span><br><span class="line"><span class="emphasis">    blog_</span>running<span class="emphasis">_secs.innerHTML=s;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis">refresh_</span>blog<span class="emphasis">_running_</span>time();</span><br><span class="line">if (typeof(bottomTimeIntervalHasSet) == &quot;undefined&quot;)&#123;</span><br><span class="line"><span class="code">    var bottomTimeIntervalHasSet = true;</span></span><br><span class="line"><span class="code">    setInterval(function()&#123;refresh_blog_running_time();&#125;,500);</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="主题颜色"><a href="#主题颜色" class="headerlink" title="主题颜色"></a>主题颜色</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#9a92b9</span></span><br><span class="line"></span><br><span class="line">banner副标题：记录我的日常生活&amp;学习笔记</span><br><span class="line">页面背景：https://img30.360buyimg.com/pop/jfs/t1/128389/8/25215/1839159/622820daEea902288/cdc24c6bd0f9c593.jpg</span><br></pre></td></tr></table></figure><hr><h3 id="左侧栏"><a href="#左侧栏" class="headerlink" title="左侧栏"></a>左侧栏</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">左侧栏标题</span><br><span class="line">与君共赴，万里征程。</span><br><span class="line"></span><br><span class="line">左侧栏子标题（格言）</span><br><span class="line">--hitokoto--</span><br><span class="line"></span><br><span class="line">左侧栏作者名称</span><br><span class="line">未可知.</span><br><span class="line"></span><br><span class="line">左侧栏作者头像地址</span><br><span class="line">https://img30.360buyimg.com/pop/jfs/t1/131661/35/25896/114014/62246b27Ec3b050cb/373a661d7463f92a.png</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="留言板与友链"><a href="#留言板与友链" class="headerlink" title="留言板与友链"></a>留言板与友链</h2><h3 id="留言板内容："><a href="#留言板内容：" class="headerlink" title="留言板内容："></a>留言板内容：</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">留言规则</span><br><span class="line"></span><br><span class="line">留言者应遵守国家相关法律法规，不得发表违反中华人民共和国宪法、法律和有关政策的言论;</span><br><span class="line">留言者承担因留言行为而直接或间接引起的法律责任;</span><br><span class="line">本博客拥有发布、编辑、删除公众留言的权利，凡不符合本须知规定的留言将予以删除;</span><br><span class="line">如果你有任何问题或是要求，可以在这里给我发送消息;</span><br><span class="line">如在本博客目留言，即表明已阅读并接受了上述各项条款;</span><br></pre></td></tr></table></figure><hr><h3 id="友链内容"><a href="#友链内容" class="headerlink" title="友链内容"></a>友链内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[friendlinks style=&quot;1-square&quot; sort=&quot;rand&quot;/]  </span><br><span class="line">//方形头像，随机排序</span><br></pre></td></tr></table></figure><p>友链格式 :</p><blockquote><p>博客名称：Rookie_L’s Blog</p><p>描述：一个小菜鸡自建的blog，主要用于记录自己的生活日常&amp;学习笔记</p><p>站点：<a href="https://solstice23.top/">https://solstice23.top</a></p><p>Avatar (头像)：<a href="https://solstice23.top/friendlink_image/avatar/">https://solstice23.top/friendlink_image/avatar/</a></p></blockquote><hr><h2 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h2><h3 id="顶部导航标签"><a href="#顶部导航标签" class="headerlink" title="顶部导航标签"></a>顶部导航标签</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-home&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 首页</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-comments&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 留言板</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-link&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 友情链接</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-clock-o&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 归档</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-star&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span>分类 <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-caret-down&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left:3px;&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-tags&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 标签<span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-caret-down&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left:3px;&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h3 id="左侧栏菜单导航"><a href="#左侧栏菜单导航" class="headerlink" title="左侧栏菜单导航"></a>左侧栏菜单导航</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">url：https://docs.oracle.com/javase/8/docs/api/</span><br><span class="line">标签：<span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-question-circle&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> API帮助文档</span><br><span class="line"></span><br><span class="line">url：https://leetcode-cn.com/</span><br><span class="line">标签：<span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-code&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> LeetCode</span><br><span class="line"></span><br><span class="line">url：https://codetop.cc/home</span><br><span class="line">标签：<span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-codepen&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> CodeTop</span><br><span class="line"></span><br><span class="line">url：https://github.com/</span><br><span class="line">标签：<span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-github-alt&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> GayHub</span><br><span class="line"></span><br><span class="line">url：https://www.programmercarl.com/</span><br><span class="line">标签：<span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-eye&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 代码随想录</span><br><span class="line"></span><br><span class="line">url：https://www.runoob.com/</span><br><span class="line">标签：<span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-child&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 笨鸟先飞</span><br></pre></td></tr></table></figure><hr><h3 id="左侧个人链接："><a href="#左侧个人链接：" class="headerlink" title="左侧个人链接："></a>左侧个人链接：</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> URL：https://cloud.icu007.work/ 标签： <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-cloud&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 可道云</span><br><span class="line"><span class="bullet">2.</span> URL：mailto:rookie<span class="emphasis">_l@icu007.work 标签：<span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-envelope&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 联系我</span></span><br><span class="line"><span class="emphasis">3. URL：https://alist.icu007.work/ 标签：<span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-hdd-o&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 分享盘</span></span><br><span class="line"><span class="emphasis">4. URL：https://drive.icu007.work/ 标签： <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-download&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 下载盘</span></span><br><span class="line"><span class="emphasis">5. URL：https://baidu.icu007.work 标签： <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-question&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 百度一下</span></span><br><span class="line"><span class="emphasis">6. URL： http://hiheya.github.io 标签： <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-user&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> 子站</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次office无法联网解决方法</title>
      <link href="/archives/eacc0609.html"/>
      <url>/archives/eacc0609.html</url>
      
        <content type="html"><![CDATA[<h2 id="登录onedrive显示无法连接服务器解决方法"><a href="#登录onedrive显示无法连接服务器解决方法" class="headerlink" title="登录onedrive显示无法连接服务器解决方法"></a>登录onedrive显示无法连接服务器解决方法</h2><p>今天更新了一下office三件套，但是更新完之后打开word显示无法连接服务器于是上网搜索后得之可以重置网络。具体操作如下：</p><ol><li>Cmd + r ：依次输入</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netsh int ip reset c:\resetlog.txt</span><br><span class="line">netsh winsock reset</span><br><span class="line">shutdown -r -t 0</span><br></pre></td></tr></table></figure><ol start="2"><li>命令行解析：<ol><li>netsh int ip reset c:\resetlog.txt 和 netsh winsock reset为重置网络</li><li>shutdown -r -t 0 为0s后重启电脑。</li></ol></li><li>重启电脑后再打开word就可以连上网啦！</li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之结构型模式</title>
      <link href="/archives/eea0cb26.html"/>
      <url>/archives/eea0cb26.html</url>
      
        <content type="html"><![CDATA[<h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题。</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>适配器模式</li><li>代理模式</li><li>桥接模式</li><li>装饰模式</li><li>组合模式</li><li>外观模式</li><li>享元模式</li></ul><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><ul><li>将一个类的接口转换成客户希望的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。</li><li>角色分析<ul><li>目标接口：客户所期待的接口，目标可以是具体的或抽象的类，也可以是接口。</li><li>需要适配的类：需要适配的类或适配者类。</li><li>适配器：通过包装一个需要适配的对象，把原接口转换成目标对象。</li></ul></li></ul><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ol><li>一个对象适配器可以把多个不同的适配者适配到同一个目标</li><li>可以适配一个适配者的子类，由于适配器和适配者之间是关联关系，根据“里氏代换原则”，适配者的子类也可以通过该适配器进行适配</li></ol><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol><li>对于Java、C#等不支持多重类继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者；</li><li>对于Java、C#等语言中，类适配模式中的目标抽象类只能为借口，不能为类，其使用有一定局限性。</li></ol><h5 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h5><ol><li>系统需要使用一些现有的类，而这些类的接口（方法名）不符合系统的需要，甚至没有这些类的源代码。</li><li>想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</li></ol><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>以网线适配器为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design_patterns.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/20/ 23:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//客户端类：电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="comment">//我们的电脑需要连接上转接器才可以上网</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">net</span><span class="params">(NetToUsb adapter)</span>&#123;</span><br><span class="line">        <span class="comment">//上网的具体实现，找一个转接头</span></span><br><span class="line">        adapter.handleRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//电脑</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        <span class="comment">//网线</span></span><br><span class="line">        <span class="type">Adaptee</span> <span class="variable">adaptee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adaptee</span>();</span><br><span class="line">        <span class="comment">//适配器</span></span><br><span class="line">        <span class="type">Adapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adapter</span>();</span><br><span class="line"></span><br><span class="line">        computer.net(adapter);</span><br><span class="line">        System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">        <span class="type">Adapter2</span> <span class="variable">adapter2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adapter2</span>(adaptee);</span><br><span class="line"></span><br><span class="line">        computer.net(adapter2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * //要被适配的类：网线</span></span><br><span class="line"><span class="comment"> * public class Adaptee &#123;</span></span><br><span class="line"><span class="comment"> *     public void request()&#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;连接网线开始上网&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * //接口转换器的抽象实现</span></span><br><span class="line"><span class="comment"> * public interface NetToUsb &#123;</span></span><br><span class="line"><span class="comment"> *     //作用：处理请求  网线---》USB</span></span><br><span class="line"><span class="comment"> *     public void handleRequest();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * // 1. 继承（类适配器，单继承有局限性）</span></span><br><span class="line"><span class="comment"> * public class Adapter extends Adaptee implements NetToUsb&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void handleRequest() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;我是通过类适配器实现的上网功能（继承）&quot;);</span></span><br><span class="line"><span class="comment"> *         super.request();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * // 2. 组合（对象适配器，常用）</span></span><br><span class="line"><span class="comment"> * public class Adapter2 implements NetToUsb&#123;</span></span><br><span class="line"><span class="comment"> *     private Adaptee adaptee;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Adapter2(Adaptee adaptee) &#123;</span></span><br><span class="line"><span class="comment"> *         this.adaptee = adaptee;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void handleRequest() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;我是通过对象适配器实现的上网功能（组合）&quot;);</span></span><br><span class="line"><span class="comment"> *         adaptee.request();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="https://img30.360buyimg.com/pop/jfs/t1/107257/36/27047/109837/62374e62Ea757324d/0bd6719328a41c3b.png" alt="适配器模式"></p><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><p><img src="https://img30.360buyimg.com/pop/jfs/t1/114080/12/24410/24486/62374f63Efae75338/75cd37914c79fc4b.png" alt="流程图"></p><hr><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为（Handle and Body）模式或接口（Interface）模式。</p><h4 id="实例模型"><a href="#实例模型" class="headerlink" title="实例模型"></a>实例模型</h4><p><img src="https://img30.360buyimg.com/pop/jfs/t1/222427/23/13634/246693/623821c8E65a1f2a6/61a2c6e9171b642d.png" alt="桥接模式"></p><p>分析：这个场景中有两个变化的维度：品牌，类型。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design_patterns.bridge;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/21/ 15:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Desktop</span>(<span class="keyword">new</span> <span class="title class_">Apple</span>());</span><br><span class="line">        computer.info();</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Laptop</span>(<span class="keyword">new</span> <span class="title class_">Lenovo</span>());</span><br><span class="line">        computer1.info();</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pad</span>(<span class="keyword">new</span> <span class="title class_">Apple</span>());</span><br><span class="line">        computer2.info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * public interface Brand &#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     void info();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class Apple implements Brand&#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void info() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.print(&quot;苹果&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class Lenovo implements Brand&#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void info() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.print(&quot;联想&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public abstract class Computer &#123;</span></span><br><span class="line"><span class="comment"> *     //组合 品牌</span></span><br><span class="line"><span class="comment"> *     protected Brand brand;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Computer(Brand brand) &#123;</span></span><br><span class="line"><span class="comment"> *         this.brand = brand;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *     //自带品牌</span></span><br><span class="line"><span class="comment"> *     public void info()&#123;</span></span><br><span class="line"><span class="comment"> *         brand.info();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * class Desktop extends Computer &#123;</span></span><br><span class="line"><span class="comment"> *     public Desktop(Brand brand) &#123;</span></span><br><span class="line"><span class="comment"> *         super(brand);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void info() &#123;</span></span><br><span class="line"><span class="comment"> *         super.info();</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;台式机&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * class Laptop extends Computer &#123;</span></span><br><span class="line"><span class="comment"> *     public Laptop(Brand brand) &#123;</span></span><br><span class="line"><span class="comment"> *         super(brand);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void info() &#123;</span></span><br><span class="line"><span class="comment"> *         super.info();</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;笔记本&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * class Pad extends Computer &#123;</span></span><br><span class="line"><span class="comment"> *     public Pad(Brand brand) &#123;</span></span><br><span class="line"><span class="comment"> *         super(brand);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void info() &#123;</span></span><br><span class="line"><span class="comment"> *         super.info();</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;平板&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://img30.360buyimg.com/pop/jfs/t1/185665/15/22072/110802/62382823E3f9573ed/9961e3f416e429b1.png" alt="桥接模式"></p><hr><h4 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h4><p><img src="https://img30.360buyimg.com/pop/jfs/t1/221646/10/13223/30157/62382a32E4b3d5add/64702d17712c4a28.png" alt="结构图"></p><hr><h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ul><li>桥接模式偶尔类似于多继承方案，但是多继承方案违背了类的单一职责原则，复用性比较差，类的个数也非常多，桥接模式是比多集成方案更好的解决方法，极大的减少了子类的个数，从而降低了管理和维护成本。</li><li>桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。符合<strong>开闭原则</strong>，就像一座桥，可以把两个变化的维度连接起来。</li></ul><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ul><li>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li><li>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性</li></ul><h4 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h4><ol><li><p>如果一个系统需要在构建的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响，在程序运作时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合</p></li><li><p>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</p></li><li><p>虽然在系统中使用继承时没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</p></li><li><p>场景</p><ol><li>Java语言通过Java虚拟机实现了平台无关性，</li><li>AWT的Peer架构</li><li>JDBC驱动程序也是桥接模式的应用之一。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之创建者模式</title>
      <link href="/archives/f5bc3448.html"/>
      <url>/archives/f5bc3448.html</url>
      
        <content type="html"><![CDATA[<h2 id="GOF23"><a href="#GOF23" class="headerlink" title="GOF23"></a>GOF23</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><ul><li>单例模式</li><li>工厂模式</li><li>抽象工厂模式</li><li>建造者模式</li><li>原型模式</li></ul><h3 id="结构性模式"><a href="#结构性模式" class="headerlink" title="结构性模式"></a>结构性模式</h3><ul><li>适配器模式</li><li>桥接模式</li><li>装饰模式</li><li>组合模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ul><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><ul><li>模板方法模式</li><li>命令模式</li><li>迭代器模式</li><li>观察者模式</li><li>中介者模式</li><li>备忘录模式</li><li>解释器模式</li><li>状态模式</li><li>策略模式</li><li>职责链模式</li><li>访问者模式</li></ul><h2 id="创建型模式-1"><a href="#创建型模式-1" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="饿汉单例模式"><a href="#饿汉单例模式" class="headerlink" title="饿汉单例模式"></a>饿汉单例模式</h4><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.single;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/15/ 16:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//饿汉单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hungry</span> &#123;</span><br><span class="line">    <span class="comment">//可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data1 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data2 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data3 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data4 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Hungry</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Hungry</span> <span class="variable">HUNGRY</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hungry</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Hungry <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HUNGRY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h5><p> 可能会浪费空间，尽管对象空间没有被使用，但是还是会被开辟出来。</p><hr><h4 id="懒汉式单例"><a href="#懒汉式单例" class="headerlink" title="懒汉式单例"></a>懒汉式单例</h4><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.single;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 10:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMan</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构造器私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyMan</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.实例化对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan lazyMan;            <span class="comment">//给lazyMan加上volatile可以避免指令重排  保证其原子性操作。</span></span><br><span class="line">    <span class="comment">//双重检测锁模式的  懒汉式单例   DLC懒汉式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>)&#123;</span><br><span class="line">                    lazyMan = <span class="keyword">new</span> <span class="title class_">LazyMan</span>();            <span class="comment">//不是一个原子性操作</span></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     *    1.分配内存空间</span></span><br><span class="line"><span class="comment">                     *    2.执行构造方法，初始化对象</span></span><br><span class="line"><span class="comment">                     *    3.把这个对象指向这个空间</span></span><br><span class="line"><span class="comment">                     *    就有可能会出现指令重排现象</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     *    正常：123</span></span><br><span class="line"><span class="comment">                     *    异常：132</span></span><br><span class="line"><span class="comment">                     *    当A线程进来时 执行了132---先分配内存空间，然后把对象指向这个空间 先占用这个空间，最后再初始化对象，给其赋值</span></span><br><span class="line"><span class="comment">                     *    恰巧此时B线程进来了，他执行123操作，但是因为A线程先占用了空间，让B线程误以为对象不为null，所以他会不执行if语句，直接return一个lazyMan对象</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ol><li>懒汉模式对象如果不加volatile就会出现指令重排。</li><li>而我们要保证其多线程安全，就需要加上双重锁</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">    <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>)&#123;</span><br><span class="line">        lazyMan = <span class="keyword">new</span> <span class="title class_">LazyMan</span>();            <span class="comment">//不是一个原子性操作</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.single;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 15:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Holder</span> &#123;</span><br><span class="line">    <span class="comment">//1.构造器私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Holder</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从静态内部类里返回HOLDER；</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Holder <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.HOLDER;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Holder</span> <span class="variable">HOLDER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Holder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>单例不安全，因为有反射。反射会破坏单例</p></blockquote><p>所以为了解决这个问题我们使用枚举来实现单例模式。</p><h4 id="枚举单例模式"><a href="#枚举单例模式" class="headerlink" title="枚举单例模式"></a>枚举单例模式</h4><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.single;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 15:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingle</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="keyword">public</span> EnumSingle <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为反射不能破解枚举，所以我们使用枚举来实现单例模式。</p><hr><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>实现了创建者和调用者的分离</li><li>详细分类：<ul><li>简单工厂模式</li><li>工厂方法模式</li><li>抽象工厂模式</li></ul></li><li>OOP七大原则<ul><li>开闭原则：一个软件的实体应当对扩展开放，对修改关闭。</li><li>依赖倒转原则：要针对接口编程，不要针对实现编程。</li><li>迪米特法则：只与你直接的朋友通信，而避免和陌生人通信。</li></ul></li><li>核心本质<ul><li>实例化对象不适用new，用工厂方法代替</li><li>将选择实现类，创建对象统一管理和控制，从而将调用者跟我们的实现类解耦</li></ul></li><li>三种模式：<ul><li>简单工厂模式<ul><li>用来生产同一等级结构中的任意产品（对于增加新的产品，需要球盖已有代码）</li></ul></li><li>工厂方法模式<ul><li>用来生产同一等级结构中的固定产品（支持增加任意产品）</li></ul></li><li>抽象工厂模式<ul><li>围绕一个超级工厂创建其他工厂。该工厂又称为其他工厂的工厂。</li></ul></li></ul></li></ul><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><h5 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.factory.simple;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 15:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Car car = new WuLing();</span></span><br><span class="line"><span class="comment">//        Car car1 = new Tesla();</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> CarFactory.getCar(<span class="string">&quot;五菱&quot;</span>);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car1</span> <span class="operator">=</span> CarFactory.getCar(<span class="string">&quot;特斯拉&quot;</span>);</span><br><span class="line">        car.name();</span><br><span class="line">        car1.name();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public interface Car &#123;</span></span><br><span class="line"><span class="comment"> *     void name();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class WuLing implements Car &#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void name() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;wuling&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class Tesla implements Car&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void name() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;Tesla!&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class CarFactory &#123;</span></span><br><span class="line"><span class="comment"> *     //方法一</span></span><br><span class="line"><span class="comment"> *     public static Car getCar(String car)&#123;</span></span><br><span class="line"><span class="comment"> *         if (car.equals(&quot;五菱&quot;))&#123;</span></span><br><span class="line"><span class="comment"> *             return new WuLing();</span></span><br><span class="line"><span class="comment"> *         &#125;else if (car.equals(&quot;特斯拉&quot;))&#123;</span></span><br><span class="line"><span class="comment"> *             return new Tesla();</span></span><br><span class="line"><span class="comment"> *         &#125;else &#123;</span></span><br><span class="line"><span class="comment"> *             return null;</span></span><br><span class="line"><span class="comment"> *         &#125;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *     //方法二</span></span><br><span class="line"><span class="comment"> *     public static Car getWuLing()&#123;</span></span><br><span class="line"><span class="comment"> *         return new WuLing();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *     public static Car getTesla()&#123;</span></span><br><span class="line"><span class="comment"> *         return new Tesla();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h5><blockquote><p>未实现开闭原则</p></blockquote><h5 id="实现结果"><a href="#实现结果" class="headerlink" title="实现结果"></a>实现结果</h5><p><img src="https://img30.360buyimg.com/pop/jfs/t1/89206/33/25588/96647/623197b2E30d11e56/4f8a3f7e68535bd5.png" alt="简单工厂模式"></p><h5 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h5><p><img src="https://img30.360buyimg.com/pop/jfs/t1/218618/28/14571/19961/62319e3bEae8dc9d7/b5e3fbf93cf17d9f.png" alt="流程图"></p><hr><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><h5 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.factory.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiheya.factory.simple.CarFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 15:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TeslaFactory</span>().getCar();</span><br><span class="line">        car.name();</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WuLingFactory</span>().getCar();</span><br><span class="line">        car1.name();</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaZhongFactory</span>().getCar();</span><br><span class="line">        car2.name();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * public interface Car &#123;</span></span><br><span class="line"><span class="comment"> *     void name();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public interface CarFactory &#123;</span></span><br><span class="line"><span class="comment"> *     Car getCar();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class DaZhong implements Car &#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void name() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;DaZhong!&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class DaZhongFactory implements CarFactory&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public Car getCar() &#123;</span></span><br><span class="line"><span class="comment"> *         return new DaZhong();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class Tesla implements Car &#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void name() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;Tesla!&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class TeslaFactory implements CarFactory&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public Car getCar() &#123;</span></span><br><span class="line"><span class="comment"> *         return new Tesla();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class WuLing implements Car &#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void name() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;wuling&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class WuLingFactory implements CarFactory&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public Car getCar() &#123;</span></span><br><span class="line"><span class="comment"> *         return new WuLing();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="弊端-1"><a href="#弊端-1" class="headerlink" title="弊端"></a>弊端</h5><blockquote><p>虽然实现了代码的开闭原则，并且可以动态拓展。但是工厂方法模式实现成本太高了。</p></blockquote><h5 id="实现结果-1"><a href="#实现结果-1" class="headerlink" title="实现结果"></a>实现结果</h5><p><img src="https://img30.360buyimg.com/pop/jfs/t1/145431/15/24425/109114/62319c34E3ae4bf73/066ed1f8e33301e1.png" alt="工厂方法模式"></p><h5 id="流程图-1"><a href="#流程图-1" class="headerlink" title="流程图"></a>流程图</h5><p><img src="https://img30.360buyimg.com/pop/jfs/t1/94722/17/25678/27668/62319f54E48e302d2/cc9aa3b7cceb910a.png" alt="工厂方法模式"></p><hr><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li><p>简单工厂模式（静态工厂模式）</p><ul><li>虽然某种程度上不符合设计原则，但实际使用最多！</li></ul></li><li><p>工厂方法模式</p><ul><li>不修改已有类的前提下，通过新的工厂类实现扩展</li></ul></li><li><p>抽象工厂模式</p><ul><li>不可以增加产品，可以增加产品族！</li></ul></li><li><p>应用场景</p><ul><li>JDK中的Calendar的getInstance方法</li><li>JDBC中的Connection对象的获取</li><li>Spring中IOC容器创建管理bean对象</li><li>反射中Class对象的newInstance方法</li></ul><hr></li></ul><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><ul><li>定义：抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们的类</li><li>适用场景<ul><li>客户端（应用层）不依赖于产品类实例如何被创建、实现的细节</li><li>强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复代码。</li><li>提供一个产品类的库，所有产品以同样的接口出现，从而使得客户端不依赖于具体的实现</li></ul></li><li>优点<ul><li>具体产品在应用层的代码隔离，无需关心创建的细节</li><li>将一个系列的产品统一到一起创建</li></ul></li><li>缺点<ul><li>规定了所有可能被创建的产品集合，产品簇中扩展新的产品困难；</li><li>增加了系统的抽象性和理解难度。</li></ul></li></ul><h5 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.factory.abstract1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 17:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==============小米系列产品================&quot;</span>);</span><br><span class="line">        <span class="type">XiaomiFactory</span> <span class="variable">xiaomiFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XiaomiFactory</span>();</span><br><span class="line">        <span class="type">IPhoneProduct</span> <span class="variable">xiaomi</span> <span class="operator">=</span> xiaomiFactory.iphoneProduct();</span><br><span class="line">        xiaomi.callup();</span><br><span class="line">        xiaomi.sendSMS();</span><br><span class="line">        <span class="type">IRouterProduct</span> <span class="variable">xiaomiRouter</span> <span class="operator">=</span> xiaomiFactory.irouterProduct();</span><br><span class="line">        xiaomiRouter.openWifi();</span><br><span class="line">        xiaomiRouter.setting();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==============华为系列产品================&quot;</span>);</span><br><span class="line">        <span class="type">HuaweiFactory</span> <span class="variable">huaweiFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuaweiFactory</span>();</span><br><span class="line">        <span class="type">IPhoneProduct</span> <span class="variable">huawei</span> <span class="operator">=</span> huaweiFactory.iphoneProduct();</span><br><span class="line">        huawei.callup();</span><br><span class="line">        huawei.sendSMS();</span><br><span class="line">        <span class="type">IRouterProduct</span> <span class="variable">huaweiRouter</span> <span class="operator">=</span> huaweiFactory.irouterProduct();</span><br><span class="line">        huaweiRouter.openWifi();</span><br><span class="line">        huaweiRouter.setting();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * //抽象产品工厂</span></span><br><span class="line"><span class="comment"> * public interface IProductFactory &#123;</span></span><br><span class="line"><span class="comment"> *     //生产手机</span></span><br><span class="line"><span class="comment"> *     IPhoneProduct iphoneProduct();</span></span><br><span class="line"><span class="comment"> *     //生产路由器</span></span><br><span class="line"><span class="comment"> *     IRouterProduct irouterProduct();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //手机产品接口</span></span><br><span class="line"><span class="comment"> * public interface IPhoneProduct &#123;</span></span><br><span class="line"><span class="comment"> *     void start();</span></span><br><span class="line"><span class="comment"> *     void shutdown();</span></span><br><span class="line"><span class="comment"> *     void callup();</span></span><br><span class="line"><span class="comment"> *     void sendSMS();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //路由器产品接口</span></span><br><span class="line"><span class="comment"> * public interface IRouterProduct &#123;</span></span><br><span class="line"><span class="comment"> *     void start();</span></span><br><span class="line"><span class="comment"> *     void shutdown();</span></span><br><span class="line"><span class="comment"> *     void openWifi();</span></span><br><span class="line"><span class="comment"> *     void setting();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //华为工厂</span></span><br><span class="line"><span class="comment"> * public class HuaweiFactory implements IProductFactory&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public IPhoneProduct iphoneProduct() &#123;</span></span><br><span class="line"><span class="comment"> *         return new HuaweiPhone();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public IRouterProduct irouterProduct() &#123;</span></span><br><span class="line"><span class="comment"> *         return new HuaweiRouter();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //华为手机</span></span><br><span class="line"><span class="comment"> * public class HuaweiPhone implements IPhoneProduct&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void start() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;Huawei  start&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void shutdown() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;Huawei  shutdown&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void callup() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;Huawei   callup&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void sendSMS() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;Huawei sendSMS&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //华为路由器</span></span><br><span class="line"><span class="comment"> * public class HuaweiRouter implements IRouterProduct&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void start() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;启动华为路由器&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void shutdown() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;关闭华为路由器&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void openWifi() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;华为由器打开WiFi&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void setting() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;配置华为路由器&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //小米工厂</span></span><br><span class="line"><span class="comment"> * public class XiaomiFactory implements IProductFactory&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public IPhoneProduct iphoneProduct() &#123;</span></span><br><span class="line"><span class="comment"> *         return new XiaomiPhone();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public IRouterProduct irouterProduct() &#123;</span></span><br><span class="line"><span class="comment"> *         return new XiaomiRouter();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //小米手机</span></span><br><span class="line"><span class="comment"> * public class XiaomiPhone implements IPhoneProduct&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void start() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;xiaomi  start&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void shutdown() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;xiaomi  shutdown&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void callup() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;xiaomi   callup&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void sendSMS() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;xiaomi sendSMS&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //小米路由器</span></span><br><span class="line"><span class="comment"> * public class XiaomiRouter implements IRouterProduct&#123;</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void start() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;启动小米路由器&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void shutdown() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;关闭小米路由器&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void openWifi() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;小米路由器打开WiFi&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public void setting() &#123;</span></span><br><span class="line"><span class="comment"> *         System.out.println(&quot;配置小米路由器&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="https://img30.360buyimg.com/pop/jfs/t1/132049/2/24786/137045/6231a961Eca4445cb/d6f57afda625beaa.png" alt="运行结果"></p><h5 id="流程图-2"><a href="#流程图-2" class="headerlink" title="流程图"></a>流程图</h5><p><img src="https://img30.360buyimg.com/pop/jfs/t1/147939/28/21156/588841/6231a9c8E57004dc1/53b9464f0c5c03a1.png" alt="流程图"></p><hr><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><ul><li>建造者模式也属于创建类模式，它提供了一种创建对象的最佳方式。</li><li>它将一个复杂对象的构建与他的表示分离，使得同样的构建过程可以创建不同的表示。</li></ul><h4 id="主要作用"><a href="#主要作用" class="headerlink" title="主要作用"></a>主要作用</h4><p>在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。</p><ul><li>用户只需要给出指定复杂对象的类型和内容，建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来）</li><li>例子：<ul><li>工厂（建造者模式）：负责制造汽车（组装过程和细节在工厂内）</li><li>汽车购买者（用户）：你只需要说出你需要的型号（对象的类型和内容），然后直接购买就可以使用了（不需要知道汽车是怎么组装的（车轮、车门、发动机、方向盘等等））</li></ul></li></ul><h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design_patterns.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/19/ 15:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//新建一个指挥</span></span><br><span class="line">        <span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>();</span><br><span class="line">        <span class="comment">//指挥 工人盖房子</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">build</span> <span class="operator">=</span> director.build(<span class="keyword">new</span> <span class="title class_">Worker</span>());</span><br><span class="line">        System.out.println(build.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * //抽象的建造者方法：盖房子</span></span><br><span class="line"><span class="comment"> * public abstract class Builder &#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     abstract void builderA();               //地基</span></span><br><span class="line"><span class="comment"> *     abstract void builderB();               //钢筋工程</span></span><br><span class="line"><span class="comment"> *     abstract void builderC();               //铺电线</span></span><br><span class="line"><span class="comment"> *     abstract void builderD();               //粉刷</span></span><br><span class="line"><span class="comment"> *     //完工：得到产品</span></span><br><span class="line"><span class="comment"> *     abstract Product getProduct();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * public class Product &#123;</span></span><br><span class="line"><span class="comment"> *     private String buildA;</span></span><br><span class="line"><span class="comment"> *     private String buildB;</span></span><br><span class="line"><span class="comment"> *     private String buildC;</span></span><br><span class="line"><span class="comment"> *     private String buildD;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getBuildA() &#123;</span></span><br><span class="line"><span class="comment"> *         return buildA;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getBuildB() &#123;</span></span><br><span class="line"><span class="comment"> *         return buildB;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getBuildC() &#123;</span></span><br><span class="line"><span class="comment"> *         return buildC;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getBuildD() &#123;</span></span><br><span class="line"><span class="comment"> *         return buildD;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setBuildA(String buildA) &#123;</span></span><br><span class="line"><span class="comment"> *         this.buildA = buildA;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setBuildB(String buildB) &#123;</span></span><br><span class="line"><span class="comment"> *         this.buildB = buildB;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setBuildC(String buildC) &#123;</span></span><br><span class="line"><span class="comment"> *         this.buildC = buildC;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setBuildD(String buildD) &#123;</span></span><br><span class="line"><span class="comment"> *         this.buildD = buildD;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public String toString() &#123;</span></span><br><span class="line"><span class="comment"> *         return &quot;Product&#123;&quot; +</span></span><br><span class="line"><span class="comment"> *                 &quot;buildA=&#x27;&quot; + buildA + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &quot;, buildB=&#x27;&quot; + buildB + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &quot;, buildC=&#x27;&quot; + buildC + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &quot;, buildD=&#x27;&quot; + buildD + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //具体的建造者：工人</span></span><br><span class="line"><span class="comment"> * public class Worker extends Builder&#123;</span></span><br><span class="line"><span class="comment"> *     private Product product;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Worker() &#123;</span></span><br><span class="line"><span class="comment"> *         product = new Product();  //工人负责创建产品</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     void builderA() &#123;</span></span><br><span class="line"><span class="comment"> *         product.setBuildA(&quot;打好了地基&quot;);</span></span><br><span class="line"><span class="comment"> *         System.out.println(product.getBuildA());</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     void builderB() &#123;</span></span><br><span class="line"><span class="comment"> *         product.setBuildB(&quot;铺好了钢筋&quot;);</span></span><br><span class="line"><span class="comment"> *         System.out.println(product.getBuildB());</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     void builderC() &#123;</span></span><br><span class="line"><span class="comment"> *         product.setBuildC(&quot;铺好了电线&quot;);</span></span><br><span class="line"><span class="comment"> *         System.out.println(product.getBuildC());</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     void builderD() &#123;</span></span><br><span class="line"><span class="comment"> *         product.setBuildD(&quot;粉好了墙壁&quot;);</span></span><br><span class="line"><span class="comment"> *         System.out.println(product.getBuildD());</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     Product getProduct() &#123;</span></span><br><span class="line"><span class="comment"> *         return product;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * //指挥：核心，负责构建一个工程，工程如何创建 由他决定。</span></span><br><span class="line"><span class="comment"> * public class Director &#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * //    指挥工人建造房子</span></span><br><span class="line"><span class="comment"> *     public Product build(Builder builder)&#123;</span></span><br><span class="line"><span class="comment"> *         builder.builderA();</span></span><br><span class="line"><span class="comment"> *         builder.builderB();</span></span><br><span class="line"><span class="comment"> *         builder.builderC();</span></span><br><span class="line"><span class="comment"> *         builder.builderD();</span></span><br><span class="line"><span class="comment"> *         //建造完成后返回一个房子；</span></span><br><span class="line"><span class="comment"> *         return builder.getProduct();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://img30.360buyimg.com/pop/jfs/t1/94001/3/25084/96682/6235853fE63d92745/47a444b879117310.png" alt="建造者模式"></p><hr><ul><li>上面示例是Builder模式的常规用法，导演类Director在Builder模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用着返回完整的产品类，但是有些情况下需要简化系统结构，可以把Director和抽象建造者进行结合。</li><li>通过静态内部类方式实现零件无序装配构造，这种方式使用更加灵活，更符合定义。内部有复杂对象的默认实现，使用时可以根据用户需求自由定义更改内容，并且无需改变具体的构造方式。就可以生产出不同复杂产品。</li><li>比如:麦当劳的套餐，服务员（具体建造者）可以随意搭配任意几种产品（零件）组成一款套餐（产品），然后出售给客户。彼地种方式少了指挥者，主要是因为第二种方式把指挥者交给用户来操作，使得产品的创建更加简单灵活。</li></ul><h4 id="无指挥类的建造者模式"><a href="#无指挥类的建造者模式" class="headerlink" title="无指挥类的建造者模式"></a>无指挥类的建造者模式</h4><h5 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design_patterns.builder.demo02;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/20/ 20:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//服务员</span></span><br><span class="line">        <span class="type">Worker</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>();</span><br><span class="line">        <span class="comment">//链式编程，在原来的基础上可以自由组合，如果组合，则返回默认套餐。</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> worker.buildA(<span class="string">&quot;炸鸡&quot;</span>).buildB(<span class="string">&quot;芬达&quot;</span>).getProduct();</span><br><span class="line"></span><br><span class="line">        System.out.println(product.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * //建造者</span></span><br><span class="line"><span class="comment"> * public abstract class Builder &#123;</span></span><br><span class="line"><span class="comment"> *     abstract Builder buildA(String msg);  //汉堡</span></span><br><span class="line"><span class="comment"> *     abstract Builder buildB(String msg);  //薯条</span></span><br><span class="line"><span class="comment"> *     abstract Builder buildC(String msg);  //可乐</span></span><br><span class="line"><span class="comment"> *     abstract Builder buildD(String msg);  //甜点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     abstract Product getProduct();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * public class Product &#123;</span></span><br><span class="line"><span class="comment"> *     private String BuildA = &quot;汉堡&quot;;</span></span><br><span class="line"><span class="comment"> *     private String BuildB = &quot;可乐&quot;;</span></span><br><span class="line"><span class="comment"> *     private String BuildC = &quot;薯条&quot;;</span></span><br><span class="line"><span class="comment"> *     private String BuildD = &quot;甜点&quot;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getBuildA() &#123;</span></span><br><span class="line"><span class="comment"> *         return BuildA;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setBuildA(String buildA) &#123;</span></span><br><span class="line"><span class="comment"> *         BuildA = buildA;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getBuildB() &#123;</span></span><br><span class="line"><span class="comment"> *         return BuildB;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setBuildB(String buildB) &#123;</span></span><br><span class="line"><span class="comment"> *         BuildB = buildB;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getBuildC() &#123;</span></span><br><span class="line"><span class="comment"> *         return BuildC;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setBuildC(String buildC) &#123;</span></span><br><span class="line"><span class="comment"> *         BuildC = buildC;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getBuildD() &#123;</span></span><br><span class="line"><span class="comment"> *         return BuildD;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setBuildD(String buildD) &#123;</span></span><br><span class="line"><span class="comment"> *         BuildD = buildD;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public String toString() &#123;</span></span><br><span class="line"><span class="comment"> *         return &quot;Product&#123;&quot; +</span></span><br><span class="line"><span class="comment"> *                 &quot;BuildA=&#x27;&quot; + BuildA + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &quot;, BuildB=&#x27;&quot; + BuildB + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &quot;, BuildC=&#x27;&quot; + BuildC + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &quot;, BuildD=&#x27;&quot; + BuildD + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * //具体的建造者</span></span><br><span class="line"><span class="comment"> * public class Worker extends Builder&#123;</span></span><br><span class="line"><span class="comment"> *     private Product product;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Worker() &#123;</span></span><br><span class="line"><span class="comment"> *         product = new Product();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     Builder buildA(String msg) &#123;</span></span><br><span class="line"><span class="comment"> *         product.setBuildA(msg);</span></span><br><span class="line"><span class="comment"> *         return this;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     Builder buildB(String msg) &#123;</span></span><br><span class="line"><span class="comment"> *         product.setBuildB(msg);</span></span><br><span class="line"><span class="comment"> *         return this;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     Builder buildC(String msg) &#123;</span></span><br><span class="line"><span class="comment"> *         product.setBuildC(msg);</span></span><br><span class="line"><span class="comment"> *         return this;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     Builder buildD(String msg) &#123;</span></span><br><span class="line"><span class="comment"> *         product.setBuildD(msg);</span></span><br><span class="line"><span class="comment"> *         return this;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     Product getProduct() &#123;</span></span><br><span class="line"><span class="comment"> *         return product;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h5><p><img src="https://img30.360buyimg.com/pop/jfs/t1/95436/33/25998/129820/623725c5E304641cc/e61ca442119d51a6.png" alt="建造者模式2"></p><hr><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>产品的建造和表示分离，实现了解耦。使用建造者模式可以使客户端不必知道产品内部组成的细节。</li><li>将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰.</li><li>具体的建造者类之间是相互独立的，这有利于系统的扩展。增加新的具体建造者无需修改原有类库的代码，符合“开闭原则”</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式，因此其适用范围受到一定的限制。</li><li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造类来实现这种变化，导致系统变得很庞大。</li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>需要生产的产品对象有复杂的内部结构，这些产品对象具有共性。</li><li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品、</li><li>适合于一个具有较多的零件（属性）的产品（对象）的创建过程。</li></ul><h4 id="建造者与抽象工厂模式的比较"><a href="#建造者与抽象工厂模式的比较" class="headerlink" title="建造者与抽象工厂模式的比较"></a>建造者与抽象工厂模式的比较</h4><ul><li>与抽象工厂模式相比，建造者模式返回一个组装好的完整产品，而抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族。</li><li>在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。</li><li>如果将抽象工厂模式堪称汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。</li></ul><hr><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol><li>实现一个接口：Cloneable;</li><li>重写一个方法：clone();</li><li>主要用于：Spring Bean：单例模式，原型模式</li><li>原型模式+工厂模式 &#x3D;&#x3D;&#x3D;&gt; new &lt;&#x3D;&gt; 原型模式</li></ol><h4 id="浅克隆模式"><a href="#浅克隆模式" class="headerlink" title="浅克隆模式"></a>浅克隆模式</h4><h5 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design_patterns.prototype.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/20/ 21:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bilibili</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="comment">//原型对象 v1</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">Video</span> <span class="variable">v1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Video</span>(<span class="string">&quot;xiheya&quot;</span>,date);</span><br><span class="line">        <span class="comment">//克隆对象 v2</span></span><br><span class="line">        <span class="type">Video</span> <span class="variable">v2</span> <span class="operator">=</span>(Video) v1.clone();</span><br><span class="line">        System.out.println(<span class="string">&quot;v1--&gt;&quot;</span> + v1);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1:hashcode--&gt;&quot;</span> + v1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;v2--&gt;&quot;</span> + v2);</span><br><span class="line">        System.out.println(<span class="string">&quot;v2:hashcode--&gt;&quot;</span> + v2.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">        date.setTime(<span class="number">123456</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1--&gt;&quot;</span> + v1);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1:hashcode--&gt;&quot;</span> + v1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;v2--&gt;&quot;</span> + v2);</span><br><span class="line">        System.out.println(<span class="string">&quot;v2:hashcode--&gt;&quot;</span> + v2.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * //原型模式的实现：</span></span><br><span class="line"><span class="comment"> * // 1.实现一个接口：Cloneable;</span></span><br><span class="line"><span class="comment"> * // 2.重写一个方法：clone();</span></span><br><span class="line"><span class="comment"> * // Video</span></span><br><span class="line"><span class="comment"> * public class Video implements Cloneable&#123;</span></span><br><span class="line"><span class="comment"> *     private String name;</span></span><br><span class="line"><span class="comment"> *     private Date creatTime;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     protected Object clone() throws CloneNotSupportedException &#123;</span></span><br><span class="line"><span class="comment"> *         return super.clone();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Video() &#123;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Video(String name, Date creatTime) &#123;</span></span><br><span class="line"><span class="comment"> *         this.name = name;</span></span><br><span class="line"><span class="comment"> *         this.creatTime = creatTime;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getName() &#123;</span></span><br><span class="line"><span class="comment"> *         return name;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setName(String name) &#123;</span></span><br><span class="line"><span class="comment"> *         this.name = name;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Date getCreatTime() &#123;</span></span><br><span class="line"><span class="comment"> *         return creatTime;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setCreatTime(Date creatTime) &#123;</span></span><br><span class="line"><span class="comment"> *         this.creatTime = creatTime;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public String toString() &#123;</span></span><br><span class="line"><span class="comment"> *         return &quot;Video&#123;&quot; +</span></span><br><span class="line"><span class="comment"> *                 &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &quot;, creatTime=&quot; + creatTime +</span></span><br><span class="line"><span class="comment"> *                 &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><p><img src="https://img30.360buyimg.com/pop/jfs/t1/191225/6/21536/243142/62372fb1Ef35280ba/f93ef2d79ffa0c9f.png" alt="原型模式"></p><hr><h4 id="深克隆模式"><a href="#深克隆模式" class="headerlink" title="深克隆模式"></a>深克隆模式</h4><h5 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design_patterns.prototype.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/20/ 21:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bilibili</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="comment">//原型对象 v1</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">Video</span> <span class="variable">v1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Video</span>(<span class="string">&quot;xiheya&quot;</span>,date);</span><br><span class="line">        <span class="comment">//克隆对象 v2</span></span><br><span class="line">        <span class="type">Video</span> <span class="variable">v2</span> <span class="operator">=</span>(Video) v1.clone();</span><br><span class="line">        System.out.println(<span class="string">&quot;v1--&gt;&quot;</span> + v1);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1:hashcode--&gt;&quot;</span> + v1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;v2--&gt;&quot;</span> + v2);</span><br><span class="line">        System.out.println(<span class="string">&quot;v2:hashcode--&gt;&quot;</span> + v2.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">        date.setTime(<span class="number">123456</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1--&gt;&quot;</span> + v1);</span><br><span class="line">        System.out.println(<span class="string">&quot;v1:hashcode--&gt;&quot;</span> + v1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;v2--&gt;&quot;</span> + v2);</span><br><span class="line">        System.out.println(<span class="string">&quot;v2:hashcode--&gt;&quot;</span> + v2.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * //原型模式的实现：</span></span><br><span class="line"><span class="comment"> * // 1.实现一个接口：Cloneable;</span></span><br><span class="line"><span class="comment"> * // 2.重写一个方法：clone();</span></span><br><span class="line"><span class="comment"> * // Video</span></span><br><span class="line"><span class="comment"> * public class Video implements Cloneable&#123;</span></span><br><span class="line"><span class="comment"> *     private String name;</span></span><br><span class="line"><span class="comment"> *     private Date creatTime;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     protected Object clone() throws CloneNotSupportedException &#123;</span></span><br><span class="line"><span class="comment"> *         Object obj = super.clone();</span></span><br><span class="line"><span class="comment"> *         //深克隆，序列化与反序列化</span></span><br><span class="line"><span class="comment"> *         Video v = (Video) obj;</span></span><br><span class="line"><span class="comment"> *         v.creatTime = (Date) this.creatTime.clone();//将对象的属性也序列化</span></span><br><span class="line"><span class="comment"> *         return obj;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Video() &#123;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Video(String name, Date creatTime) &#123;</span></span><br><span class="line"><span class="comment"> *         this.name = name;</span></span><br><span class="line"><span class="comment"> *         this.creatTime = creatTime;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public String getName() &#123;</span></span><br><span class="line"><span class="comment"> *         return name;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setName(String name) &#123;</span></span><br><span class="line"><span class="comment"> *         this.name = name;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public Date getCreatTime() &#123;</span></span><br><span class="line"><span class="comment"> *         return creatTime;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public void setCreatTime(Date creatTime) &#123;</span></span><br><span class="line"><span class="comment"> *         this.creatTime = creatTime;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"> *     public String toString() &#123;</span></span><br><span class="line"><span class="comment"> *         return &quot;Video&#123;&quot; +</span></span><br><span class="line"><span class="comment"> *                 &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment"> *                 &quot;, creatTime=&quot; + creatTime +</span></span><br><span class="line"><span class="comment"> *                 &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h5><p><img src="https://img30.360buyimg.com/pop/jfs/t1/129250/34/26723/177940/62373361E5f6f1c33/0b4b92fbad3950d6.png" alt="深克隆模式"></p><hr><h4 id="浅克隆与深克隆对比"><a href="#浅克隆与深克隆对比" class="headerlink" title="浅克隆与深克隆对比"></a>浅克隆与深克隆对比</h4><ol><li>浅克隆:克隆出来的对象和原型共同指向一个对象，克隆对象只是引用了这个对象。</li><li>深克隆：克隆出来的对象会把原型的属性也克隆出来。</li></ol><p><img src="https://img30.360buyimg.com/pop/jfs/t1/95695/34/23907/24394/623733c6E93986210/edce85c15f17f777.png" alt="对比"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/archives/735e5788.html"/>
      <url>/archives/735e5788.html</url>
      
        <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 17:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        bubbleSort(arr);</span><br><span class="line">        System.out.print(<span class="string">&quot;finish: [&quot;</span> );</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : arr) &#123;</span><br><span class="line">            System.out.print(x + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> -i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png" alt="冒泡排序"></p><hr><h2 id="冒泡排序的优化"><a href="#冒泡排序的优化" class="headerlink" title="冒泡排序的优化"></a>冒泡排序的优化</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 17:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        bubbleSort(arr);</span><br><span class="line">        System.out.print(<span class="string">&quot;finish: [&quot;</span> );</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : arr) &#123;</span><br><span class="line">            System.out.print(x + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;              <span class="comment">//确定冒泡次数</span></span><br><span class="line">            <span class="comment">//如果在某一次冒泡排序过程中，没有交换元素，则说明该数组已经有序。</span></span><br><span class="line">            <span class="comment">//冒泡步骤</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> -i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/111759/29/23517/111214/6231ae9aE3886fbe0/f5fb481fd9cb519f.png" alt="冒泡排序"></p><hr><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 17:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,-<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        selectSort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;          <span class="comment">//开始选择排序</span></span><br><span class="line">            <span class="comment">//初始 min = arr[i]; mindex = i;</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">mindex</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length - <span class="number">1</span> ; j++)&#123;</span><br><span class="line">                <span class="comment">//将min与其后面的数比较，如果min大于他后面的数  就更新min，及其下标</span></span><br><span class="line">                <span class="keyword">if</span> (min &gt; arr[j])&#123;</span><br><span class="line">                    min = arr[j];</span><br><span class="line">                    mindex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果 最小值的下标不等于 i 则交换 这两个元素的值</span></span><br><span class="line">            <span class="keyword">if</span> (mindex != i)&#123;</span><br><span class="line">                arr[mindex] = arr[i];</span><br><span class="line">                arr[i] = min;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/123581/35/24365/104905/6231b4aeEc88a0c04/b12977f679277cdd.png" alt="选择排序"></p><hr><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 18:08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        insertSort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//初始化insertdex  和  insertvalue</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">insertdex</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="type">int</span> <span class="variable">insertvalue</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            <span class="keyword">while</span> (insertdex &gt; <span class="number">0</span> &amp;&amp; insertvalue &lt; arr[insertdex - <span class="number">1</span>])&#123;      <span class="comment">//while循环，当insertdex &gt; 0 以及 insertvalue 小于 其前一个值时进入循环</span></span><br><span class="line">                <span class="comment">// 将 前一个值 赋值给 下标为 insertdex的数组空间内</span></span><br><span class="line">                arr[insertdex] = arr[insertdex - <span class="number">1</span>];</span><br><span class="line">                <span class="comment">// 下标往前移一位</span></span><br><span class="line">                insertdex--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当下标等于0  或者前面的数据均没有比insertvalue小时  结束循环，将insertvalue的值赋给 arr[insertdex]</span></span><br><span class="line">            arr[insertdex] = insertvalue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/96545/33/24065/115846/6231b9afE8789b655/9be8b857b6f51639.png" alt="插入排序"></p><hr><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 19:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr =&#123;<span class="number">1</span>,<span class="number">3</span>,-<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        quickSort(arr,<span class="number">0</span>,arr.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> left, <span class="type">int</span> right)</span>&#123;</span><br><span class="line">        <span class="comment">//递归退出条件</span></span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左指针与右指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> right;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r &amp;&amp; arr[r] &gt;= arr[left])r--;            <span class="comment">//右边的元素与arr[left]比较，直到出现一个比arr[left]小的数，r指针停止左移</span></span><br><span class="line">            <span class="keyword">while</span> (l &lt; r &amp;&amp; arr[l] &lt;= arr[left])l++;            <span class="comment">//左边的元素与arr[left]比较，直到出现一个比arr[left]大的数，l指针停止右移</span></span><br><span class="line">            <span class="keyword">if</span> (l == r)&#123;                                        <span class="comment">//当两个指针相遇时交换 arr[l]（arr[r]） 与 arr[left]的数据</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[l];</span><br><span class="line">                arr[l] = arr[left];</span><br><span class="line">                arr[left] = temp;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;                                              <span class="comment">//两个指针不相等时则交换 两指针内的数据 </span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[r];</span><br><span class="line">                arr[r] = arr[l];</span><br><span class="line">                arr[l] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(arr,left,l-<span class="number">1</span>);                           <span class="comment">//通过递归，将左边的元素进行快排</span></span><br><span class="line">        quickSort(arr,r+<span class="number">1</span>,right);                           <span class="comment">//通过递归，将右边的元素进行快排。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/221661/14/12935/99046/6231ce97E12e84d0b/b13bbf3d96137ee8.png" alt="快速排序"></p><hr><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/16/ 23:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">        mergeSort(arr,<span class="number">0</span>, arr.length - <span class="number">1</span>, temp);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span>[] temp)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//分</span></span><br><span class="line">            mergeSort(arr,<span class="number">0</span>,mid,temp);          <span class="comment">//将左边部分继续分</span></span><br><span class="line">            mergeSort(arr,mid+<span class="number">1</span>,right,temp);    <span class="comment">//将右边部分继续分</span></span><br><span class="line">            <span class="comment">//合</span></span><br><span class="line">            merge(arr,left,mid,right,temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//合</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right, <span class="type">int</span>[] temp)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> mid+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;                          <span class="comment">//临时数组下标索引</span></span><br><span class="line">        <span class="comment">//先将两部分合并</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt;= arr[j])&#123;</span><br><span class="line">                temp[t] = arr[i];</span><br><span class="line">                i++;t++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                temp[t] = arr[j];</span><br><span class="line">                j++;t++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果左边没有合并完全，则接着i继续合并</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid)&#123;</span><br><span class="line">            temp[t] = arr[i];</span><br><span class="line">            t++;i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果右边没有合并完全，则接着j继续合并</span></span><br><span class="line">        <span class="keyword">while</span> (j &lt;= right)&#123;</span><br><span class="line">            temp[t] = arr[j];</span><br><span class="line">            t++;j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//接着将temp中的数组填充到指定位置</span></span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">templeft</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="keyword">while</span> (templeft &lt;= right)&#123;</span><br><span class="line">            arr[templeft] = temp[t];</span><br><span class="line">            t++;templeft++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-5"><a href="#运行结果-5" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/6243/24/13518/120086/62320facE5b1eee5f/7044dbeb5270949a.png" alt="归并排序"></p><hr><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/17/ 0:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedixSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">10023</span>,<span class="number">3225</span>,<span class="number">302</span>,<span class="number">155</span>,<span class="number">9</span>,<span class="number">3326</span>,<span class="number">33</span>,<span class="number">5987</span>,<span class="number">663</span>,<span class="number">15596</span>&#125;;</span><br><span class="line">        redixSort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">redixSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[][] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][arr.length - <span class="number">1</span>];               <span class="comment">//桶里面所存的具体数值</span></span><br><span class="line">        <span class="type">int</span>[] bucketElementCounts = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];                    <span class="comment">//每个桶所存的元素个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(max &lt; arr[i]) max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxCount</span> <span class="operator">=</span> (max + <span class="string">&quot;&quot;</span>).length();                         <span class="comment">//获取最大数的位数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxCount; i++) &#123;</span><br><span class="line">            <span class="comment">//把数组中的数都放在桶里面</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; arr.length; k++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> arr[k] / (<span class="type">int</span>) Math.pow(<span class="number">10</span>, i) % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">                bucket[value][bucketElementCounts[value]] = arr[k];</span><br><span class="line">                bucketElementCounts[value]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; bucketElementCounts.length; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(bucketElementCounts[k] != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; bucketElementCounts[k]; x++) &#123;</span><br><span class="line">                        arr[index] = bucket[k][x];</span><br><span class="line">                        index++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                bucketElementCounts[k] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果-6"><a href="#运行结果-6" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/117860/3/21960/155113/62321b0aE741709bc/ce49136a8a12e016.png" alt="基数排序"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础小结</title>
      <link href="/archives/9e3ebe18.html"/>
      <url>/archives/9e3ebe18.html</url>
      
        <content type="html"><![CDATA[<h2 id="面向过程-面向对象"><a href="#面向过程-面向对象" class="headerlink" title="面向过程 &amp; 面向对象"></a>面向过程 &amp; 面向对象</h2><h3 id="面向过程思想—-自上而下"><a href="#面向过程思想—-自上而下" class="headerlink" title="面向过程思想—&gt;自上而下"></a>面向过程思想—&gt;自上而下</h3><p>面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</p><ul><li>步骤清晰简单，第一步做什么，第二步做什么……</li><li>面向过程适合处理一些较为简单的问题</li></ul><h3 id="面向对象思想—-自下而上"><a href="#面向对象思想—-自下而上" class="headerlink" title="面向对象思想—&gt;自下而上"></a>面向对象思想—&gt;自下而上</h3><p><strong>面向对象</strong>就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。</p><ul><li>物以类聚，<strong>分类</strong>的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li><li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题。</li></ul><p><strong>对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</strong></p><h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><ul><li>面向对象编程（Object_Oriented Programming， OOP）</li><li>面向对象编程的本质就是：<strong>以类的方式组织代码，以对象的形式（封装）数据</strong></li><li>抽象 —&gt;将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，<strong>那就是他们都是狗</strong>。</li><li>三大特征<ul><li><strong>封装</strong></li><li><strong>继承</strong></li><li><strong>多态</strong></li></ul></li><li>从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象</li><li>从代码运行的角度考虑，是先有类后有对象。类是对象的模板。</li></ul><h2 id="回顾方法及加深"><a href="#回顾方法及加深" class="headerlink" title="回顾方法及加深"></a>回顾方法及加深</h2><h3 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h3><ul><li>修饰符</li><li>返回类型</li><li><strong>break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别</strong></li><li>方法名：注意规范就可以（首字母小写驼峰法），见名知意</li><li>参数列表：（参数类型，参数名）……</li><li>异常抛出：</li></ul><h3 id="方法的调用-递归"><a href="#方法的调用-递归" class="headerlink" title="方法的调用:递归"></a>方法的调用:递归</h3><ul><li>静态方法</li><li>非静态方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.xiheya.oop;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author &#123;xiheya&#125;</span><br><span class="line"> * @Date: 2022/03/12/ 22:30</span><br><span class="line"> * @Description</span><br><span class="line"> */</span><br><span class="line">public class Demo02 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Demo02 demo02 = new Demo02();</span><br><span class="line">        int sum = demo02.add(1, 2);            //实例化对象demo02后，才可以调用非静态方法add</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        System.out.println(add(1, 2, 3));   //而静态方法add则可以直接调用</span><br><span class="line">    &#125;</span><br><span class="line">    public static int add(int a,int b, int c)&#123;      //静态方法，main方法中可以直接调用。</span><br><span class="line">        return a+b+c;</span><br><span class="line">    &#125;</span><br><span class="line">    public int add(int a,int b)&#123;                    //非静态方法，调用的话需要实例化对象后才能调用。</span><br><span class="line">        return a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><hr><ul><li>形参和实参</li><li>值传递和引用传递</li></ul><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.xiheya.oop;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author &#123;xiheya&#125;</span><br><span class="line"> * @Date: 2022/03/12/ 21:52</span><br><span class="line"> * @Description</span><br><span class="line"> */</span><br><span class="line">// 值传递和引用传递</span><br><span class="line">public class Demo01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int a = 1;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        change(a);                          //调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响</span><br><span class="line">        System.out.println(a);              //可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。</span><br><span class="line">        Person person = new Person();       //实例化一个类，new一个Person类。</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">        changeName(person);                 //由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，</span><br><span class="line">        System.out.println(person.name);    //这就是引用传递（实质上还是值传递）</span><br><span class="line">    &#125;</span><br><span class="line">    public static void change(int a)&#123;</span><br><span class="line">        a = 10;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void changeName(Person person)&#123;</span><br><span class="line">        //person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性</span><br><span class="line">        person.name = &quot;xiheya&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png" alt="值传递与引用传递"></p><hr><ul><li>this关键字</li></ul><h2 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h2><ul><li>类是一种抽象的数据类型，它是对某一类事物整体描述&#x2F;定义，但是并不能代表某一个具体的事物。<ul><li>动物、植物、手机、电脑</li><li>Person类、Pet类、Car类等，这些类都是用来描述&#x2F;定义某一类具体的事物应该具备的特点和行为</li></ul></li><li>对象是抽象概念的具体实例<ul><li>eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例</li><li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。</li></ul></li></ul><h2 id="创建和初始化对象"><a href="#创建和初始化对象" class="headerlink" title="创建和初始化对象"></a>创建和初始化对象</h2><ul><li><strong>使用new关键字创建对象</strong></li><li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</li><li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ul><li>1.必须和类的名字相同</li><li>2.必须没有返回类型，也不能写void</li></ul></li><li><strong>构造器方法必须掌握</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常02</title>
      <link href="/archives/1b27ed3d.html"/>
      <url>/archives/1b27ed3d.html</url>
      
        <content type="html"><![CDATA[<h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><h3 id="try-catch关键字"><a href="#try-catch关键字" class="headerlink" title="try catch关键字"></a>try catch关键字</h3><ul><li>try：监控类型</li><li>catch：想要捕获的异常，可以捕获异常</li><li>finally：可以处理善后工作，（可以不要finally）</li><li>使用 try catch关键字可以在出现异常时实现程序不终止，继续跑完程序。我们只需要在try catch中处理这些异常就可以了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/14/ 9:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//假设要捕获多个异常：我们要从小到大的去捕获</span></span><br><span class="line">        <span class="comment">// 快捷键 Ctrl + Alt + T  快速捕获异常。</span></span><br><span class="line">        <span class="keyword">try</span>&#123;                                    <span class="comment">//try  监控类型</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123;         <span class="comment">//catch（想要捕获的异常类型0  捕获异常）</span></span><br><span class="line">            System.out.println(<span class="string">&quot;程序出现异常，b不能为0&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;                              <span class="comment">//处理善后工作。可以不要finally，假设IO，资源 关闭</span></span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="throw-和-throws关键字"><a href="#throw-和-throws关键字" class="headerlink" title="throw 和 throws关键字"></a>throw 和 throws关键字</h3><ul><li>throw关键字一般是在方法体内主动抛出异常</li><li>throws关键字一般是在方法名中抛出异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Test</span>().test(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span> <span class="params">(<span class="type">int</span> a , <span class="type">int</span> b)</span><span class="keyword">throws</span> ArithmeticException&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ul><li>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需要继承Exception类即可。</li><li>在程序中使用自定义异常类，大体可以分为以下几个步骤：<ul><li>创建自定义异常类。</li><li>在方法中通过throw关键字抛出异常对象。</li><li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步。</li><li>再出现异常方法的调用者中捕获并处理异常。</li></ul></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.exception.demo02;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/15/ 0:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span> <span class="keyword">throws</span> MyException &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test(<span class="number">11</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;my exception&quot;</span>+ e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class MyException extends Exception&#123;</span></span><br><span class="line"><span class="comment">    private int detail;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public MyException(int a) &#123;</span></span><br><span class="line"><span class="comment">        this.detail = a;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public String toString() &#123;</span></span><br><span class="line"><span class="comment">        return &quot;MyException&#123;&quot; +</span></span><br><span class="line"><span class="comment">                &quot;detail=&quot; + detail +</span></span><br><span class="line"><span class="comment">                &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><hr><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/219736/2/14797/107450/622f6d4cEb0febe5b/e9410796da6a5f89.png" alt="自定义异常"></p><hr><h3 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h3><ul><li>处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理</li><li>在多重catch块后面，可以加一个catch（Exception）来处理可能会被漏掉的异常。</li><li>对于不确定的代码，也可以加上一个try-catch，处理潜在的异常。</li><li>尽量去处理异常，切忌只是简单地调用printStackTrace()去打印输出</li><li>具体如何处理异常，要根据不同的业务需求和异常类型去决定</li><li>尽量添加finally语句块去释放占用的资源。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常01</title>
      <link href="/archives/822ebc87.html"/>
      <url>/archives/822ebc87.html</url>
      
        <content type="html"><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>实际工作中，遇到的情况不可能是非常完美的。比如：你写的某个模块，用户输入不一定符合你的要求、你的程序要打开某个文件，这个文件可能不存在或者文件格式不对，你要读取数据库的数据，数据可能是空的等。我们的程序在跑着，内存或硬盘可能就满了。等等</li><li>软件程序再运行过程中，非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是：Exception，意思是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理，而不至于程序崩溃？</li><li>异常指程序运行中出现的不期而至的各种状况，如：文件找不到、网络连接失败、非法参数等。</li><li>异常发生在程序运行期间，他影响了程序正常的程序执行流程</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="简单分类"><a href="#简单分类" class="headerlink" title="简单分类"></a>简单分类</h4><p>需要掌握以下三种类型的异常</p><ol><li>检查性异常：最具代表的检查性异常时用户错误或问题引起的异常，这是程序羊无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单的忽略</li><li>运行时异常：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li><li><strong>错误ERROR</strong>：错误不是异常，而是脱离程序员控制的问题，错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，他们在编译时也检查不到的。</li></ol><h3 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h3><ul><li>Java把异常当作对象来处理，并定义一个基类java.lang,Throwable作为所有异常的超类</li><li>在Java API中已经定义了许多异常类，这些异常类分为两大类：<strong>错误ERROR</strong>和<strong>异常Exception</strong></li></ul><p><img src="https://img30.360buyimg.com/pop/jfs/t1/185417/8/21799/155982/622e14c1E0fbc4c54/bbd56e3a7d9a2d3a.png" alt="异常体系结构"></p><h4 id="ERROR"><a href="#ERROR" class="headerlink" title="ERROR"></a>ERROR</h4><ul><li>Error类对象是由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li><li>Java虚拟机运行时错误（Virtual MachineError），当JVM不再有继续执行操作所需的内存资源时将出现 <strong>OutOfMemoryError</strong>。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止；</li><li>还有发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误时不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数时程序运行时不允许出现的状况。</li></ul><h4 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h4><ul><li>在Exception分支中有一个重要的子类RuntimeException（运行时异常）<ul><li>ArrayIndexOutOfBoundsException（数组下标越界异常）</li><li>NullPointerException（空指针异常）</li><li>ArithmeticException（算数异常）</li><li>MissingResourceException（丢失资源）</li><li>ClassNotFoundException（找不到类）等异常</li></ul></li><li>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；</li><li>Error和Exception的区别：Error通常时灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机（JVM）一般会选择终止线程；Exception通常情况下时可以被程序处理的，并且在程序中应该尽可能地去处理这些异常。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象04</title>
      <link href="/archives/bc05bf18.html"/>
      <url>/archives/bc05bf18.html</url>
      
        <content type="html"><![CDATA[<h2 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h2><h3 id="静态变量与静态方法"><a href="#静态变量与静态方法" class="headerlink" title="静态变量与静态方法"></a>静态变量与静态方法</h3><ul><li>静态的变量  多线程中会用到(包含static关键字)</li><li>非静态的变量（不包含static关键字）</li><li>非静态方法中可以直接调用静态方法,而静态方法中无法调用非静态方法.</li><li>如果变量是静态变量我们就可以直接通过类名去访问这个变量,而非静态变量不可以直接通过类名来访问。</li><li>静态方法可以直接被调用，非静态方法需要实例化类对象之后，才可以通过对象来调用。</li></ul><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo07;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 20:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> age;                 <span class="comment">//静态的变量  多线程中会用到</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;                   <span class="comment">//非静态的变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;                      <span class="comment">//非静态方法</span></span><br><span class="line">        go();                               <span class="comment">//非静态方法中可以直接调用静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>&#123;                <span class="comment">//静态方法</span></span><br><span class="line">        <span class="comment">//run();                            而静态方法中无法调用非静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(s1.score);       <span class="comment">//可以看到非静态变量需要实例化类对象之后，才可以通过对象来访问。</span></span><br><span class="line">        System.out.println(s1.age);</span><br><span class="line"></span><br><span class="line">        System.out.println(Student.age);    <span class="comment">//如果变量是静态变量我们就可以直接通过类名去访问这个变量</span></span><br><span class="line">        <span class="comment">//System.out.println(Student.score);  而非静态变量不可以直接通过类名来访问。</span></span><br><span class="line">        go();                               <span class="comment">//静态方法可以直接被调用</span></span><br><span class="line">        <span class="comment">//run();</span></span><br><span class="line">        s1.run();                           <span class="comment">//非静态方法需要实例化类对象之后，才可以通过对象来调用。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p><strong>在程序运行过程中，先执行父类，再执行子类。先执行静态代码块（且静态代码块只执行一次），然后再执行匿名代码块。最后再执行构造方法。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo07;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 21:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img30.360buyimg.com/pop/jfs/t1/95087/34/23979/100331/622deca3E97877a38/3c8b3745c1e813d3.png" alt="静态代码块"></p><hr><h3 id="静态导入包（不常用）"><a href="#静态导入包（不常用）" class="headerlink" title="静态导入包（不常用）"></a>静态导入包（不常用）</h3><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line">System.out.println(random());</span><br><span class="line">System.out.println(PI);</span><br></pre></td></tr></table></figure><p>当包被静态导入之后，在程序中就可以直接通过包内的方法名来调用这个方法。但是并不常用。</p><hr><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li><strong><em>abstract</em>修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果修饰类，那么该类就是抽象类。</strong></li><li><strong>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。</strong></li><li>抽象类，不能用new关键字来创建对象，它是用来让子类继承的</li><li>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。</li><li>子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。</li><li>抽象类存在的意义：抽象出来，提高开发效率。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo08;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 21:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//用abstract 关键字修饰的类叫做抽象类，</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">    <span class="comment">//abstract 是一个约束，抽象方法 只有方法名字，没有方法的实现（没有方法体）  抽象方法由子类实现。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//1.不能new这个抽象类，只能靠子类去实现</span></span><br><span class="line">    <span class="comment">//2.抽象类中可以写普通方法</span></span><br><span class="line">    <span class="comment">//3.抽象方法必须在抽象类中</span></span><br><span class="line">    <span class="comment">//抽象的抽象：约束。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Action</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承抽象类，就一定要实现抽象类里面的抽象方法。不然这个类就变成抽象类，然后让子类来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo08;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 22:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//继承抽象类，就一定要实现抽象类里面的抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Action</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li><p>普通类：只有具体实现</p></li><li><p>抽象类：具体实现和规范（抽象方法）都有</p></li><li><p>接口：只有规范！自己无法写方法<del>专业的约束！约束和实现分离：面向接口编程</del></p></li><li><p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是……则必须能……”的思想。<strong>eg：如果你是天使，则必须能飞。如果你是汽车，则必须能跑。如果你是好人，则必须干掉坏人；如果你是坏人，则必须欺负好人。</strong></p></li><li><p><strong>接口的本质是契约</strong>，就像我们人间的法律一样，制定好后大家都遵守。</p></li><li><p>接口的精髓，是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计模式都只针对具备了抽象能力的语言（比如c++、Java、c#等）就是因为设计模式所研究的，时间上就是如何合理的去抽象。</p></li></ul><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo09;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 22:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类是继承  extends</span></span><br><span class="line"><span class="comment">// 类也可以实现接口 implements 接口</span></span><br><span class="line"><span class="comment">// 实现了接口的类，就必须重写接口中的方法</span></span><br><span class="line"><span class="comment">// 接口就间接的实现了多继承。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>,TimeService&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">timer</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public interface TimeService &#123;</span></span><br><span class="line"><span class="comment">    void timer();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// interface 定义的关键字 ， 接口都需要有实现类</span></span><br><span class="line"><span class="comment">public interface UserService &#123;</span></span><br><span class="line"><span class="comment">    //接口中所有属性类型 都是 public static final（但我们通常不在接口中定义属性）</span></span><br><span class="line"><span class="comment">    public static final int AGE = 99;</span></span><br><span class="line"><span class="comment">    //接口中所有定义其实默认都是抽象的 public abstract</span></span><br><span class="line"><span class="comment">    public abstract void add();</span></span><br><span class="line"><span class="comment">    void delete();</span></span><br><span class="line"><span class="comment">    void update();</span></span><br><span class="line"><span class="comment">    void query();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><hr><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>接口是一个约束</li><li>定义一些方法，让不同人实现。</li><li>方法的默认属性是 public abstract</li><li>常量的默认属性是public static final</li><li>接口不能被实例化<del>接口中没有构造方法</del></li><li>implements可以实现多个接口</li><li>必须要重写接口中的方法</li></ol><hr><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对于A类来说就称为内部类，而A类相对于B类来说就是外部类了。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.in();</span><br><span class="line">        inner.gerAge();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class Outer &#123;</span></span><br><span class="line"><span class="comment">    private int age = 10;</span></span><br><span class="line"><span class="comment">    public void out()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;I&#x27;m the outer&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public class Inner&#123;</span></span><br><span class="line"><span class="comment">        public void in()&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;I&#x27;m the inner&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        public void gerAge()&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(age);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><p>内部类可以获得外部类的私有属性</p></li><li><p>要通过外部类来实例化内部类。</p><p>Outer outer &#x3D; new Outer();<br>Outer.Inner inner &#x3D; outer.new Inner();</p></li></ul><hr><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.in();</span><br><span class="line">        inner.gerAge();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class Outer &#123;</span></span><br><span class="line"><span class="comment">    private int age = 10;</span></span><br><span class="line"><span class="comment">    public void out()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;I&#x27;m the outer&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public static class Inner1&#123;</span></span><br><span class="line"><span class="comment">        public void in()&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;I&#x27;m the inner1&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="comment">//局部内部类</span></span><br><span class="line">            <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span>&#123;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//匿名内部类：没有名字初始化类，不用将实例保存到变量中</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Apple</span>().eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat apple&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象03</title>
      <link href="/archives/22612abb.html"/>
      <url>/archives/22612abb.html</url>
      
        <content type="html"><![CDATA[<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li>该露的露，该藏的藏<ul><li>我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用</li></ul></li><li>封装（数据的隐藏）<ul><li>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。</li></ul></li><li>记住这句话：<strong>属性私有，get&#x2F;set</strong></li><li>封装的作用：<ul><li>1.提高程序的安全性，保护数据</li><li>2.隐藏代码的实现细节</li><li>3.统一接口</li><li>4.系统可维护性增加了</li></ul></li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 12:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="comment">//    属性私有</span></span><br><span class="line">    <span class="keyword">private</span> String name;        <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;            <span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> sex;           <span class="comment">//性别</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> id, <span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class Application &#123;</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">        Student Tom = new Student();</span></span><br><span class="line"><span class="comment">        System.out.println(Tom.getName());</span></span><br><span class="line"><span class="comment">        Tom.setName(&quot;Tom&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(Tom.getName());</span></span><br><span class="line"><span class="comment">        System.out.println(Tom.getId());</span></span><br><span class="line"><span class="comment">        Tom.setId(1234);</span></span><br><span class="line"><span class="comment">        System.out.println(Tom.getId());</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/213402/8/14777/201552/622d7354Ebfb0538a/f6e46e96693a982f.png" alt="封装"></p><hr><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</li><li><strong>extends</strong>的意思是”扩展“。子类是父类的扩展。</li><li><strong>Java中类只有单继承，没有多继承！</strong></li><li>继承是类和类之间的一种关系，除此之外，类和类之间的关系还有依赖、组合、聚合等。</li><li>继承关系的两个类，一个为子类（派生类）、一个为父类（基类）。子类继承父类，使用关键字extends来表示。</li><li>object类</li><li>super</li><li>方法重写</li></ul><p><strong>子类继承了父类，就会拥有父类的全部方法，前提是方法属性为<br>在Java中所有类都默认直接或间接继承Object；快捷键：ctrl+H</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 12:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//在Java中所有类都默认直接或间接继承Object</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;say some thing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为</span></span><br><span class="line"><span class="comment">//快捷键：ctrl+H</span></span><br><span class="line"><span class="comment">public class Teacher extends Person&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class Application &#123;</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">//        Student Tom = new Student();</span></span><br><span class="line"><span class="comment">//        System.out.println(Tom.getName());</span></span><br><span class="line"><span class="comment">//        Tom.setName(&quot;Tom&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(Tom.getName());</span></span><br><span class="line"><span class="comment">//        System.out.println(Tom.getId());</span></span><br><span class="line"><span class="comment">//        Tom.setId(1234);</span></span><br><span class="line"><span class="comment">//        System.out.println(Tom.getId());</span></span><br><span class="line"><span class="comment">        Teacher teacher = new Teacher();</span></span><br><span class="line"><span class="comment">        teacher.speak();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><img src="https://img30.360buyimg.com/pop/jfs/t1/91867/18/23639/150759/622d908dEc5b63cc7/e997d4b885bc1b6e.png" alt="继承"></p><p>可以看到Teacher类没有speak方法，但是实例化的teacher对象却可以调用speak方法，原因就是Teacher继承了Person类，而Person类中定义了speak方法。</p><hr><h3 id="super关键字："><a href="#super关键字：" class="headerlink" title="super关键字："></a>super关键字：</h3><p>super关键字可以在子类调用父类。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 12:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//在Java中所有类都默认直接或间接继承Object</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person类的构造方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;say some thing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//子类继承了父类，就会拥有父类的全部方法，前提是方法属性为</span></span><br><span class="line"><span class="comment">//快捷键：ctrl+H</span></span><br><span class="line"><span class="comment">public class Teacher extends Person&#123;</span></span><br><span class="line"><span class="comment">    public Teacher() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Teache的构造方法执行了&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public void test()&#123;</span></span><br><span class="line"><span class="comment">        print();</span></span><br><span class="line"><span class="comment">        this.print();</span></span><br><span class="line"><span class="comment">        super.print();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    public void print()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Teacher&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class Application &#123;</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">//        Student Tom = new Student();</span></span><br><span class="line"><span class="comment">//        System.out.println(Tom.getName());</span></span><br><span class="line"><span class="comment">//        Tom.setName(&quot;Tom&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(Tom.getName());</span></span><br><span class="line"><span class="comment">//        System.out.println(Tom.getId());</span></span><br><span class="line"><span class="comment">//        Tom.setId(1234);</span></span><br><span class="line"><span class="comment">//        System.out.println(Tom.getId());</span></span><br><span class="line"><span class="comment">        Teacher teacher = new Teacher();</span></span><br><span class="line"><span class="comment">        teacher.speak();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4><p><img src="https://img30.360buyimg.com/pop/jfs/t1/216992/40/14624/218209/622d97e7E8a269e74/ba7d7393e715a8e8.png" alt="super"></p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/207922/37/19475/234785/622d98a0E30c65ddb/2813111d970d715e.png" alt="构造方法"></p><p>可以看到，当对象被实例化之后，会调用构造器方法，如果有父类则先调用父类的构造器方法。这是因为子类的构造方法中：默认添加了super();关键字，所以会先调用父类的构造器方法！同时，调用父类的构造器必须放在第一行。</p><hr><h4 id="super注意点"><a href="#super注意点" class="headerlink" title="super注意点"></a>super注意点</h4><ol><li>super调用父类的构造方法，必须在构造方法的第一个</li><li>super必须只能出现在子类的方法或者构造方法中</li><li>super和this不能同时调用构造方法</li></ol><p>super与this的区别</p><ol><li>代表的对象不同：<ol><li>this：本身调用者这个对象</li><li>super：代表父类对象的应用</li></ol></li><li>前提：<ol><li>this：没有继承也可以使用</li><li>super：只能在继承条件才可以使用</li></ol></li><li>构造方法：<ol><li>this();本类的构造</li><li>super():父类的构造</li></ol></li></ol><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p><strong>静态方法是类的方法，而非静态方法是对象的方法。</strong> 有static时，对象调用的是自身类的方法，没有static时，对象调用的是自身对象的方法。</p><p><strong>静态方法和非静态方法差别很大</strong></p><ol><li>静态方法：方法的调用只和左边定义的数据类型有关</li><li>非静态：非静态方法才存在重写。</li></ol><p><strong>只有非静态的 public属性的方法才能被重写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 15:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;b---&gt;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class A extends B&#123;</span></span><br><span class="line"><span class="comment">    public void test()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;a---&gt;test&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class Application &#123;</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">        A a = new A();</span></span><br><span class="line"><span class="comment">        B b = new A();</span></span><br><span class="line"><span class="comment">        a.test();</span></span><br><span class="line"><span class="comment">        b.test();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo05;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 15:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;b---&gt;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class A extends B&#123;</span></span><br><span class="line"><span class="comment">    public void test()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;a---&gt;test&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class Application &#123;</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">        A a = new A();</span></span><br><span class="line"><span class="comment">        B b = new A();</span></span><br><span class="line"><span class="comment">        a.test();</span></span><br><span class="line"><span class="comment">        b.test();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://img30.360buyimg.com/pop/jfs/t1/213987/27/14642/174096/622da1edE609d5ba6/147aba0b6b34adc1.png" alt="方法重写"></p><hr><h4 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h4><p><strong>重写：需要有继承关系，子类重写父类的方法！</strong></p><ol><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符：范围可以扩大. public&gt;protected&gt;default&gt;private</li><li>抛出的异常：范围可以被缩小，但不能扩大。eg父类抛出的异常为：Exception，那么子类抛出的异常范围就需要比Exception要小。可以抛出为：ClassNotFoundException</li></ol><p><strong>重写：子类的方法和父类必须要一致，方法体不同。</strong></p><p><strong>为什么要重写</strong>：</p><ol><li>父类的功能，子类不一定需要，或者不一定满足</li></ol><hr><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li>动态编译：类型”可扩展性更强</li><li>多态即同一个方法可以根据发送对象的不同而采用多种不同的行为方式。</li><li>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多</li><li>多态存在的条件<ul><li>有继承关系</li><li>子类重写父类方法</li><li>父类引用指向子类对象</li></ul></li><li><strong>注意：多态是方法的多态，属性没有多态</strong></li><li>instanceof</li></ul><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo06;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 15:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class Student extends Person&#123;</span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public void run() &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Student run&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public void eat()&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Student eat&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public class Application &#123;</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">        //一个对象的实际类型是确定的</span></span><br><span class="line"><span class="comment">        // 可以指向的引用类型就不确了 父类的引用可以指向子类</span></span><br><span class="line"><span class="comment">        // Student 能调用的方法都是自己的，或者继承父类的、</span></span><br><span class="line"><span class="comment">        Student s1 = new Student();</span></span><br><span class="line"><span class="comment">        //Person 父类型，可以指向子类，但是不能调用子类独有的方法</span></span><br><span class="line"><span class="comment">        Person s2 = new Student();</span></span><br><span class="line"><span class="comment">        Object s3 = new Student();</span></span><br><span class="line"><span class="comment">        //对象执行哪些方法，主要看对象左边的类型，和右边关系不大</span></span><br><span class="line"><span class="comment">        // 子类重写了父类的方法，则执行子类的方法。</span></span><br><span class="line"><span class="comment">        s1.run();</span></span><br><span class="line"><span class="comment">        s2.run();</span></span><br><span class="line"><span class="comment">        ((Student)s2).eat();</span></span><br><span class="line"><span class="comment">        s1.eat();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/147128/13/24014/189407/622daf0dEbda502a0/b1b1cc4e335d0d70.png" alt="多态"></p><hr><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>多态是方法的多态；属性没有多态。</li><li>父类和子类，有联系 （类型转换异常–ClassCastException）</li><li>存在条件：继承关系，方法需要重写，父类引用指向子类对象。Father f1 &#x3D; new Son();</li><li><strong>哪些方法不能重写？</strong><ol><li>static方法，static代码块属于类，对象被创建时一同被执行</li><li><strong>final：常量 被final修饰的方法不能被重写，被final修饰的类不能被继承；被final修饰的变量一经赋值后续不能更改。</strong></li><li>private方法： 私有属性不能被继承</li></ol></li></ol><h3 id="instanceof关键字"><a href="#instanceof关键字" class="headerlink" title="instanceof关键字"></a>instanceof关键字</h3><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xiheya.oop.demo06.Teacher;</span><br><span class="line"><span class="keyword">import</span> com.xiheya.oop.demo06.Student;</span><br><span class="line"><span class="keyword">import</span> com.xiheya.oop.demo06.Person;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/13/ 11:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//X instanceof Y:能不能编译通过主要看X和Y是否存在父子关系。</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Student);     <span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Person);       <span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Object);       <span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Teacher);      <span class="comment">//false</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> String);       <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Student);      <span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Person);       <span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Object);       <span class="comment">//true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Teacher);      <span class="comment">//false</span></span><br><span class="line">        <span class="comment">//System.out.println(person instanceof String);     //编译报错</span></span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Student);     <span class="comment">//true</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Person);      <span class="comment">//true</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Object);      <span class="comment">//true</span></span><br><span class="line">        <span class="comment">//System.out.println(student instanceof Teacher);   //编译报错</span></span><br><span class="line">        <span class="comment">//System.out.println(student instanceof String);    //编译报错</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//类型之间的转换  父-------》子</span></span><br><span class="line">        <span class="comment">// 高-------------------低（强制转换）。</span></span><br><span class="line"><span class="comment">//        Person obj = new Student();</span></span><br><span class="line"><span class="comment">//        //student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型</span></span><br><span class="line"><span class="comment">//        ((Student) obj).go();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //类型之间的转换  子-------》父</span></span><br><span class="line"><span class="comment">//        Student student = new Student();</span></span><br><span class="line"><span class="comment">//        //由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。</span></span><br><span class="line"><span class="comment">//        Person person = student;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.父类引用指向子类的对象</span></span><br><span class="line"><span class="comment">2.把子类转换为父类：向上转型：（自动转换）</span></span><br><span class="line"><span class="comment">3.把父类转换为子类：向下转型：（强制转换）</span></span><br><span class="line"><span class="comment">4.方便方法的调用，减少代码重复率，简洁</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://img30.360buyimg.com/pop/jfs/t1/144913/10/23289/20567/622dbb9aE35c557d0/d9d1e32d67c5dbf0.png" alt="instanceof"></p><hr><h3 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h3><ol><li><p>父类引用指向子类的对象</p></li><li><p>把子类转换为父类：向上转型：（自动转换）</p></li><li><p>把父类转换为子类：向下转型：（强制转换）</p></li><li><p>方便方法的调用，减少代码重复率，简洁</p></li><li><p>由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。</p></li><li><p>student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型</p></li><li><p>类型之间的转换<br>高——————-低（强制转换）</p><p>低——————-高（自动转换）</p></li></ol><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类型之间的转换  父-------》子</span></span><br><span class="line">        <span class="comment">// 高-------------------低（强制转换）。</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//student.go();报错： 因为Person类中没有go方法。需要将Person类型强制转换为Student类型</span></span><br><span class="line">        ((Student) obj).go();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类型之间的转换  子-------》父</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//由Student类型转换为他的父类Person类型可以直接转换，但是可能会丢失一些自己本来的方法。</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> student;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.父类引用指向子类的对象</span></span><br><span class="line"><span class="comment">2.把子类转换为父类：向上转型：（自动转换）</span></span><br><span class="line"><span class="comment">3.把父类转换为子类：向下转型：（强制转换）</span></span><br><span class="line"><span class="comment">4.方便方法的调用，减少代码重复率，简洁</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象02</title>
      <link href="/archives/55661a2d.html"/>
      <url>/archives/55661a2d.html</url>
      
        <content type="html"><![CDATA[<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><ul><li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ul><li>1.必须和类的名字相同</li><li>2.必须没有返回类型，也不能写void</li></ul></li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo02;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/12/ 22:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//一个类即使什么都不写，也会存在一个构造方法</span></span><br><span class="line">    <span class="comment">// 显示的定义构造期。</span></span><br><span class="line"><span class="comment">//    属性：字段</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"><span class="comment">//    方法</span></span><br><span class="line"><span class="comment">//    实例化初始值</span></span><br><span class="line"><span class="comment">//    1.使用new关键字，实质上是调用构造器</span></span><br><span class="line"><span class="comment">//    2.构造器一般用来初始化值 .</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    一旦定义了有参构造，无参构造就必须显示定义</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setName(name);</span><br><span class="line">        <span class="built_in">this</span>.setAge(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot; is study&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//一个项目应该只存在一个main方法</span></span><br><span class="line"><span class="comment">public class Application &#123;</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">//类是一个抽象的事物，我们在使用它时要先实例化</span></span><br><span class="line"><span class="comment">        Student student = new Student();</span></span><br><span class="line"><span class="comment">        student.study();</span></span><br><span class="line"><span class="comment">        Student Tom = new Student(&quot;Tom&quot;,3);</span></span><br><span class="line"><span class="comment">        Tom.study();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    构造器：</span></span><br><span class="line"><span class="comment">        1.和类名相同</span></span><br><span class="line"><span class="comment">        2.没有返回值</span></span><br><span class="line"><span class="comment">    作用：</span></span><br><span class="line"><span class="comment">        1.new本质在调用构造器</span></span><br><span class="line"><span class="comment">        2.初始化对象的值</span></span><br><span class="line"><span class="comment">    注意点:</span></span><br><span class="line"><span class="comment">        1.定义有参构造后，如果想使用无参构造，无参构造一定要显式定义</span></span><br><span class="line"><span class="comment">    快捷键：Alt + Insert</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>构造器：<br>        1.和类名相同<br>        2.没有返回值<br>    作用：<br>        1.new本质在调用构造器<br>        2.初始化对象的值<br>    注意点:<br>        1.定义有参构造后，如果想使用无参构造，无参构造一定要显式定义<br>    <strong>快捷键：Alt + Insert</strong></p><h2 id="创建对象内存分析"><a href="#创建对象内存分析" class="headerlink" title="创建对象内存分析"></a>创建对象内存分析</h2><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop.demo03;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/12/ 23:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wow  wow  wow&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class Application &#123;</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">        Pet dog = new Pet();</span></span><br><span class="line"><span class="comment">        dog.name = &quot;旺财&quot;;</span></span><br><span class="line"><span class="comment">        dog.age = 3;</span></span><br><span class="line"><span class="comment">        dog .shout();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Pet cat = new Pet();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><ol><li>先将Application类中的main()方法以及常量池中的旺财，加载到方法区。</li><li>将main()方法压入栈底</li><li>Pet dog &#x3D; new Pet（实例化一个dog对象）时，将Pet类及其name、age属性和shout方法加载到方法区当中。</li><li>实例化dog对象时，会在栈当中引用dog变量名并指向堆中正在初始化的Pet类，而堆中的Pet又会指向方法去中的Pet。</li><li>Pet cat&#x3D; new Pet（实例化一个cat对象）时，将Pet类及其name、age属性和shout方法加载到方法区当中。</li><li>实例化cat对象时，会在栈当中引用dog变量名并指向堆中正在初始化的Pet类，而堆中的Pet又会指向方法去中的Pet。</li></ol><p>图解：</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/84746/36/24207/99884/622cc702E4c383ae1/294d1996197be10e.png" alt="图解"></p><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>类与对象<ol><li>类是一个模板—抽象；对象是一个具体的实例</li></ol></li><li>方法<ol><li>方法的定义及调用</li></ol></li><li>对应的应用<ol><li>引用类型：基本类型（8），对象是通过引用来操作的：栈—-&gt;堆（地址）</li></ol></li><li>属性：字段Field  成员变量<ol><li>默认初始化：<ol><li>数字 ： 0  0.0</li><li>char： u0000</li><li>boolean：false</li><li>引用：null</li></ol></li><li>属性的定义<ol><li>修饰符 + 属性类型 + 属性名 &#x3D; 属性值</li></ol></li></ol></li><li>对象的创建和使用<ol><li>必须使用new 关键字创造对象，构造器Person xiheya &#x3D; new Person();</li><li>对象的属性 xiheya.name</li><li>对象的方法 xiheya.sleep();</li></ol></li><li>类<ol><li>静态的属性  属性</li><li>动态的行为  方法</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象01</title>
      <link href="/archives/cc6f4b97.html"/>
      <url>/archives/cc6f4b97.html</url>
      
        <content type="html"><![CDATA[<h2 id="面向过程-面向对象"><a href="#面向过程-面向对象" class="headerlink" title="面向过程&amp; 面向对象"></a>面向过程&amp; 面向对象</h2><h3 id="面向过程思想—-自上而下"><a href="#面向过程思想—-自上而下" class="headerlink" title="面向过程思想—&gt;自上而下"></a>面向过程思想—&gt;自上而下</h3><p>面向对象就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</p><ul><li>步骤清晰简单，第一步做什么，第二步做什么……</li><li>面向过程适合处理一些较为简单的问题</li></ul><h3 id="面向对象思想—-自下而上"><a href="#面向对象思想—-自下而上" class="headerlink" title="面向对象思想—&gt;自下而上"></a>面向对象思想—&gt;自下而上</h3><p><strong>面向对象</strong>就是根据类创建对象，每个对象都有自己的属性和方法，而这些属性和方法都是围绕对象服务的，你会发现用到的属性和方法都是对象。</p><ul><li>物以类聚，<strong>分类</strong>的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li><li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题。</li></ul><p><strong>对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。</strong></p><h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><ul><li>面向对象编程（Object_Oriented Programming， OOP）</li><li>面向对象编程的本质就是：<strong>以类的方式组织代码，以对象的形式（封装）数据</strong></li><li>抽象   —&gt;将有共同特征的物体抽象成一个类，比如泰迪、哈士奇、金毛，他们都有个共同的特征，<strong>那就是他们都是狗</strong>。</li><li>三大特征<ul><li><strong>封装</strong>   </li><li><strong>继承</strong></li><li><strong>多态</strong></li></ul></li><li>从认识论的角度考虑：先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象</li><li>从代码运行的角度考虑，是先有类后有对象。类是对象的模板。</li></ul><h2 id="回顾方法及加深"><a href="#回顾方法及加深" class="headerlink" title="回顾方法及加深"></a>回顾方法及加深</h2><h3 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h3><ul><li>修饰符</li><li>返回类型</li><li><strong>break：（跳出switch，结束循环） 和 return（结束方法，返回一个结果）的区别</strong></li><li>方法名：注意规范就可以（首字母小写驼峰法），见名知意</li><li>参数列表：（参数类型，参数名）……</li><li>异常抛出：</li></ul><h3 id="方法的调用-递归"><a href="#方法的调用-递归" class="headerlink" title="方法的调用:递归"></a>方法的调用:递归</h3><ul><li>静态方法</li><li>非静态方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/12/ 22:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo02</span> <span class="variable">demo02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo02</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> demo02.add(<span class="number">1</span>, <span class="number">2</span>);            <span class="comment">//实例化对象demo02后，才可以调用非静态方法add</span></span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        System.out.println(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));   <span class="comment">//而静态方法add则可以直接调用</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b, <span class="type">int</span> c)</span>&#123;      <span class="comment">//静态方法，main方法中可以直接调用。</span></span><br><span class="line">        <span class="keyword">return</span> a+b+c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;                    <span class="comment">//非静态方法，调用的话需要实例化对象后才能调用。</span></span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><ul><li>形参和实参</li><li>值传递和引用传递</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.oop;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/12/ 21:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 值传递和引用传递</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        change(a);                          <span class="comment">//调用change方法时，传给chang的只是a的值，change方法中对a的一系列操作均不会对main中的a产生影响</span></span><br><span class="line">        System.out.println(a);              <span class="comment">//可以看到尽管在change方法中对a进行了赋值操作，但仍然没有改变a的值。这就是Java的值传递。</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();       <span class="comment">//实例化一个类，new一个Person类。</span></span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">        changeName(person);                 <span class="comment">//由于传递给changeName方法的是一个类对象，方法对person.name 的修改是对Person类中 name的修改，所以是一定可以修改成功的，</span></span><br><span class="line">        System.out.println(person.name);    <span class="comment">//这就是引用传递（实质上还是值传递）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">changeName</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">        <span class="comment">//person是一个对象，指向的是Person这个类，这是一个具体的人，可以改变属性</span></span><br><span class="line">        person.name = <span class="string">&quot;xiheya&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/105338/38/25767/135240/622cb020Eeaee7461/8344ccb832a825cb.png" alt="值传递与引用传递"></p><hr><ul><li>this关键字</li></ul><h2 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h2><ul><li><strong>类是一种抽象的数据类型，它是对某一类事物整体描述&#x2F;定义，但是并不能代表某一个具体的事物。</strong><ul><li>动物、植物、手机、电脑</li><li>Person类、Pet类、Car类等，这些类都是用来描述&#x2F;定义某一类具体的事物应该具备的特点和行为</li></ul></li><li><strong>对象是抽象概念的具体实例</strong><ul><li>eg：张三就是人的一个具体实例，而张三家的旺财就是狗的一个具体实例</li><li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。</li></ul></li></ul><h2 id="创建和初始化对象"><a href="#创建和初始化对象" class="headerlink" title="创建和初始化对象"></a>创建和初始化对象</h2><ul><li><strong>使用new关键字创建对象</strong></li><li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</li><li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点：<ul><li>1.必须和类的名字相同</li><li>2.必须没有返回类型，也不能写void</li></ul></li><li><strong>构造器方法必须掌握</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组03</title>
      <link href="/archives/b43ce0db.html"/>
      <url>/archives/b43ce0db.html</url>
      
        <content type="html"><![CDATA[<h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><ul><li><p>数组的工具类java.util.Arrays</p></li><li><p>由于数组对象本身并没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据进行一些基本操作。</p></li><li><p><strong>查看JDK帮助文档</strong></p></li><li><p>Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而”不用“使用对象来调用<strong>（注意：是”不用”而不是“不能”）</strong></p></li><li><p>具有以下常用功能：</p><ul><li>给数组赋值：通过fill方法。</li><li>对数组排序：通过sort方法，按升序</li><li>比较数组：通过equals方法比较数组中元素值是否相等</li><li>查找数组元素：通过binarySearch方法能对排列好的数组进行二分查找法操作</li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.Array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/12/ 16:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">65</span>,<span class="number">98</span>,<span class="number">54</span>,<span class="number">21</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(a));         <span class="comment">//Arrays 里的toString方法</span></span><br><span class="line">        Arrays.sort(a);                                 <span class="comment">//sort，将a中的数据从小到大排列</span></span><br><span class="line">        System.out.println(Arrays.toString(a));         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/214285/35/14784/132267/622c58b6Ed4b0a90a/7d2d32977748d2fb.png" alt="方法调用"></p></li></ul><hr><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul><li>冒泡排序是最出名的算法之一，总共有八大排序！</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.Array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/12/ 16:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//冒泡排序：</span></span><br><span class="line">    <span class="comment">// 1.比较两个相邻的数，如果第一个数比第二个数大，则交换他们的位置。</span></span><br><span class="line">    <span class="comment">// 2.每一次排序都会产生一个最大或最小的数字；</span></span><br><span class="line">    <span class="comment">// 3.下一轮则可以少一次排序</span></span><br><span class="line">    <span class="comment">// 4.依次循环直到结束</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] a)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a.length-i-<span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j] &gt; a[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    temp = a[j];</span><br><span class="line">                    a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">                    a[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/146835/17/23128/89205/622c640bEcd377f10/1c0d484bf68a1ec7.png" alt="冒泡排序"></p><hr><h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><ul><li>需求：编写五子棋游戏中，有存盘退出和续上盘的功能。</li><li>介绍：当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组。</li><li>稀疏数组的处理方式是：<ul><li>记录数组一共有几行几列，有多少个不同值</li><li>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模</li></ul></li><li>稀疏数组与原数组图示：</li></ul><p><img src="https://img30.360buyimg.com/pop/jfs/t1/87424/23/24953/40132/622c9a2dE118667fd/967867ab4c66a1ea.png" alt="原数组与稀疏数组"></p><hr><p><strong>设计一个程序实现 稀疏数组与普通数组 的互换</strong></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.Array;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/12/ 17:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        array[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        array[<span class="number">1</span>][<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">        printArray(array);                                  <span class="comment">//打印原数组</span></span><br><span class="line">        <span class="type">int</span>[][] array1 = toArray(array);                    <span class="comment">//将原数组转换为稀疏数组</span></span><br><span class="line">        printArray(array1);                                 <span class="comment">//打印转换好的稀疏数组</span></span><br><span class="line">        <span class="type">int</span>[][] restore = restore(array1);                  <span class="comment">//将稀疏数组再转换为普通数组</span></span><br><span class="line">        printArray(restore);                                <span class="comment">//打印转换完成后的数组</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[][] array)</span>&#123;           <span class="comment">//通过for_each遍历方法，打印数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;start to print the array:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : array) &#123;                          <span class="comment">//for_each遍历外层</span></span><br><span class="line">            System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;                        <span class="comment">//for_each遍历内层</span></span><br><span class="line">                System.out.print(anInt + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] toArray(<span class="type">int</span>[][] a)&#123;               <span class="comment">//将普通数组转换为稀疏数组的方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;                                        <span class="comment">//用sum来统计，不为0元素的个数，sum为稀疏数组的行号。即int[][] temp = new int[sum+1][3];</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : a) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">                <span class="keyword">if</span> (anInt != <span class="number">0</span>)&#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][] temp = <span class="keyword">new</span> <span class="title class_">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];                   <span class="comment">//统计完sum声明并创建稀疏数组temp</span></span><br><span class="line">        temp[<span class="number">0</span>][<span class="number">0</span>] = a.length;                              <span class="comment">//temp[0][0] 存放行数</span></span><br><span class="line">        temp[<span class="number">0</span>][<span class="number">1</span>] = a[<span class="number">0</span>].length;                           <span class="comment">//temp[0][1] 存放列数</span></span><br><span class="line">        temp[<span class="number">0</span>][<span class="number">2</span>] = sum;                                   <span class="comment">//temp[0][2] 存放数组内有效数据个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">tempnum</span> <span class="operator">=</span> <span class="number">1</span>;                                    <span class="comment">//稀疏数组行号tempnum</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;                <span class="comment">//遍历普通数组，当遍历到普通数字内有效数字时</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    temp[tempnum][<span class="number">0</span>] = i;                   <span class="comment">//将原普通数组行号赋值给temp[tempnum][0]</span></span><br><span class="line">                    temp[tempnum][<span class="number">1</span>] = j;                   <span class="comment">//将原普通数组行号赋值给temp[tempnum][1]</span></span><br><span class="line">                    temp[tempnum][<span class="number">2</span>] = a[i][j];             <span class="comment">//将原普通数组第i行j列的数据 赋值给temp[tempnum][2]</span></span><br><span class="line">                    tempnum++;                              <span class="comment">//装载完成后，稀疏数组行号 tempnum  自增1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] restore (<span class="type">int</span>[][] array)&#123;              <span class="comment">//将稀疏数组还原为普通数组的方法</span></span><br><span class="line">        <span class="type">int</span>[][] result = <span class="keyword">new</span> <span class="title class_">int</span>[array[<span class="number">0</span>][<span class="number">0</span>]][array[<span class="number">0</span>][<span class="number">1</span>]];     <span class="comment">//声明并创建还原后的数组：result</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; array.length ; i++) &#123;               <span class="comment">//遍历稀疏数组，取出原普通数组的行号和列号</span></span><br><span class="line">            result[array[i][<span class="number">0</span>]][array[i][<span class="number">1</span>]] = array[i][<span class="number">2</span>];     <span class="comment">//array[i][0]代表原数组有效数组的行号、array[i][1]代表其列号，遍历到这里时，将原数组第array[i][0]行第array[i][1]列的数据array[i][2]赋值回去。</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;                                              <span class="comment">//返回还原完成后的普通数组。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/93458/11/24636/39688/622c9987E9c3afe46/8673d96930c28c8c.png" alt="输出结果"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组02</title>
      <link href="/archives/c33bd04d.html"/>
      <url>/archives/c33bd04d.html</url>
      
        <content type="html"><![CDATA[<h2 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h2><ul><li>Java内存分析</li></ul><p><img src="https://img30.360buyimg.com/pop/jfs/t1/89824/16/24315/269122/622c0669Eba17f2c4/761d898097ac2650.png" alt="内存分析"></p><p><strong>数组的声明在栈当中，创建空间及赋值操作在堆中。</strong></p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/209995/30/19535/37747/622c0d89E5b6c096c/06b455084f8a6f4b.png" alt="声明与创建"></p><h2 id="三种初始化"><a href="#三种初始化" class="headerlink" title="三种初始化"></a>三种初始化</h2><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">Man[] mans = &#123;<span class="keyword">new</span> <span class="title class_">Man</span>(<span class="number">1</span>,<span class="number">1</span>),<span class="keyword">new</span> <span class="title class_">Man</span>(<span class="number">2</span>,<span class="number">2</span>)&#125;;</span><br></pre></td></tr></table></figure><h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h3 id="数组的默认初始化"><a href="#数组的默认初始化" class="headerlink" title="数组的默认初始化"></a>数组的默认初始化</h3><ul><li>数组是引用类型，他的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.Array;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/12/ 10:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//静态初始化</span></span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        System.out.println(a[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">//动态初始化,包含默认初始化</span></span><br><span class="line">        <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        b[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">        System.out.println(b[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(b[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行截图：</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/217840/37/14582/106438/622c0a8cE3a4d7f15/ba713efe44baedf2.png" alt="初始化"></p><hr><h3 id="数组边界"><a href="#数组边界" class="headerlink" title="数组边界"></a>数组边界</h3><ul><li>下标的合法区间：[0,length-1],如果越界就会报错</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">System.out.println(a[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>ArrayIndexOutOfBoundsException:数组下标越界异常</strong></li><li>小结<ul><li>数组是相同数据类型（数据类型可以为任意类型）的有序集合</li><li>数组也是对象，数组元素相当于对象的成员变量</li><li>数组长的确定的，不可变的。如果越界，则报：ArrayIndexOutOfBounds</li></ul></li></ul><hr><h2 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h2><h3 id="简单for循环"><a href="#简单for循环" class="headerlink" title="简单for循环"></a>简单for循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.Array;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/12/ 11:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="For-Each循环"><a href="#For-Each循环" class="headerlink" title="For-Each循环"></a>For-Each循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.Array;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/12/ 11:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : a) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="数组作方法入参"><a href="#数组作方法入参" class="headerlink" title="数组作方法入参"></a>数组作方法入参</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.Array;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/12/ 11:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; a.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(a[i]);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        for (int i : a) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(i);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        printArray(a);</span><br><span class="line">        <span class="type">int</span>[] result = reverseArray(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=================&quot;</span>);</span><br><span class="line">        printArray(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] a)</span>&#123;         <span class="comment">//将数组作为参数传入方法中，然后打印数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] reverseArray(<span class="type">int</span>[] a)&#123;      <span class="comment">//将数组作为方法返回值，反转数组后返回结果数组。</span></span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[a.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>,j = result.length-<span class="number">1</span> ; i &lt; a.length; i++,j--) &#123;</span><br><span class="line">            result[i] = a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="数组作返回值"><a href="#数组作返回值" class="headerlink" title="数组作返回值"></a>数组作返回值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.Array;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/12/ 11:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; a.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(a[i]);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        for (int i : a) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(i);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        printArray(a);</span><br><span class="line">        <span class="type">int</span>[] result = reverseArray(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;\n=================&quot;</span>);</span><br><span class="line">        printArray(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] a)</span>&#123;         <span class="comment">//将数组作为参数传入方法中，然后打印数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] reverseArray(<span class="type">int</span>[] a)&#123;      <span class="comment">//将数组作为方法返回值，反转数组后返回结果数组。</span></span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[a.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>,j = result.length-<span class="number">1</span> ; i &lt; a.length; i++,j--) &#123;</span><br><span class="line">            result[i] = a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>运行结果：</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/133563/2/26013/113070/622c14c1E4a86293b/ac9c5bc577d6a7d5.png" alt="数组操作"></p><hr><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><ul><li>多维数组可以看成是数组的数组<del>（套娃）</del>，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组。</li><li>二维数组</li></ul><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">5</span>]  <span class="comment">//声明并创建一个两行五列的数组</span></span><br></pre></td></tr></table></figure><ul><li>解析：二维数组a可以看一个两行五列的数组</li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.Array;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/12/ 11:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * array:</span></span><br><span class="line"><span class="comment">         * 1 2</span></span><br><span class="line"><span class="comment">         * 3 4</span></span><br><span class="line"><span class="comment">         * 5 6</span></span><br><span class="line"><span class="comment">         * 7 8</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span>[][] array = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;, &#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\nprint  array[&quot;</span> + i + <span class="string">&quot;],nums&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                System.out.print(array[i][j]+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/109101/32/23645/105709/622c184bEde50375c/38f9c69b5b129b8c.png" alt="二维数组"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组01</title>
      <link href="/archives/5a3281f7.html"/>
      <url>/archives/5a3281f7.html</url>
      
        <content type="html"><![CDATA[<h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><ul><li>数组是相同类型数据的有序集合</li><li>数组描述的是相同类型的若干个数据，按照一定先后次序排列组合而成。</li><li>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它。</li></ul><hr><h3 id="数组声明创建"><a href="#数组声明创建" class="headerlink" title="数组声明创建"></a>数组声明创建</h3><ul><li>首先必须声明数组变量，才能再程序中使用数组。语法如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar;       <span class="comment">//首选方法</span></span><br><span class="line">dataType arrayRefVar[];  <span class="comment">//效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure><ul><li>Java语言使用new操作符来创建数组，语法如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType [] arrayRefVar = <span class="keyword">new</span> <span class="title class_">dataType</span>[arraySize];</span><br></pre></td></tr></table></figure><ul><li>数组的元素是通过索引访问的，数组索引从0开始。</li><li>获取数组长度：arrays.length</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.xiheya.Array;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author &#123;xiheya&#125;</span><br><span class="line"> * @Date: 2022/03/12/ 10:21</span><br><span class="line"> * @Description</span><br><span class="line"> */</span><br><span class="line">public class Demo01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] nums;                     //1.声明一个数组</span><br><span class="line">        nums = new int[10];             //2.给数组开辟空间，创建一个数组</span><br><span class="line"></span><br><span class="line">        int[] numrs = new int[10];      //直接声明数组并创建</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="数组的四个基本特点"><a href="#数组的四个基本特点" class="headerlink" title="数组的四个基本特点"></a>数组的四个基本特点</h3><ul><li>其长度是确定的。数组一旦被创建，它的大小就是不可以改变的。</li><li>其元素必须是相同类型，不允许出现混合类型。</li><li>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</li><li>数组变量属引用类型，数组也可以看成是对象，数组中每个元素相当于该对象的成员变量。</li><li>数组本身就是对象，Java中对象是在堆中的，因此 数组无论保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中的</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java方法</title>
      <link href="/archives/7a37a823.html"/>
      <url>/archives/7a37a823.html</url>
      
        <content type="html"><![CDATA[<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>Java方法是语句的集合，它们在一起执行一个功能<ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对象当中</li><li>方法在程序中被创建，在其他地方被引用</li></ul></li><li>设计方法的原则<ul><li>方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的<strong>原子性，就是一个方法只完成一个功能，这样利于我们后期的扩展</strong></li></ul></li><li>方法的命名规则：<strong>首字母小写，后面是驼峰命名规则。</strong></li></ul><p><strong>设计一个方法：实现简单的两个数的加法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/11/ 16:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(add(<span class="number">1</span>,<span class="number">2</span>)); <span class="comment">//方法的调用</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b)</span>&#123;    <span class="comment">//方法的定义</span></span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Java的方法类似于其他语言的函数，是一段<strong>用来完成特定功能的代码片段</strong>，一般情况下，定义一个方法包含以下语句：</li><li><strong>方法包含一个方法头和一个方法体</strong>下面是一个方法的所有部分<ul><li><strong>修饰符</strong>：修饰符是可选的，它告诉编译器该如何调用该方法。定义了该方法的访问类型</li><li><strong>返回值类型</strong>：方法可能会返回值，returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType是关键字void。</li><li><strong>方法名</strong>：是方法的实际名称。方法名和参数表共同构成方法签名。</li><li><strong>参数类型</strong>： 参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数<ul><li>形式参数：在方法被调用时用于接收外界输入的数据。</li><li>实参：调用方法时实际传给方法的数据。</li></ul></li><li><strong>方法体</strong>：方法体包含具体的语句，定义该方法功能</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class="line">……</span><br><span class="line">方法体</span><br><span class="line">……</span><br><span class="line"><span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>小tips</strong>：值传递和应用传递 <strong>Java为值传递</strong></p><ul><li>值传递(pass by value)：在调用函数时，将实际参数复制一份传递到函数中，这样在函数中对参数进行修改，就不会影响到原来的实际参数；</li><li>引用传递(pass by reference):在调用函数时，将实际参数的地址直接传递到函数中。这样在函数中对参数进行的修改，就会影响到实际参数；</li></ul><hr><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><ul><li>重载就是在一个类中，<strong>有相同的函数名称</strong>，但形参不同的函数。</li><li>方法重载的规则<ul><li>方法名称必须相同</li><li>参数列表必须不同（个数不同、或类型不同、参数排列顺序不同等）</li><li>方法的返回类型可以相同也可以不相同</li><li><strong>仅仅返回类型不同不足以成为方法的重载。</strong></li></ul></li><li>实现理论：<ul><li>方法名称相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</li></ul></li></ul><p><strong>实现max()函数的重载</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/11/ 21:56</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> max(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(max);</span><br><span class="line">        <span class="type">double</span> <span class="variable">dmax</span> <span class="operator">=</span> max(<span class="number">20.0</span>,<span class="number">30.0</span>);</span><br><span class="line">        System.out.println(dmax);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;                             <span class="comment">//三目运算符：进行判断，a大于b吗？如果大于返回a，否则返回b。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span>&#123;         <span class="comment">// 方法重载，方法名一样均为max，但是返回值与参数类型不一样，所以可以构成重载</span></span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;                             <span class="comment">//三目运算符：进行判断，a大于b吗？如果大于返回a，否则返回b。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/144758/6/25718/101275/622b5709Ebd1e27b5/75a5ef236a3b61b4.png" alt="运行结果"></p><hr><h3 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h3><ul><li>有时候你希望运行一个程序时候再给他传递消息，这要靠传递命令行参数来给main()函数实现</li><li>通过在运行时使用命令行给main()函数来实现。</li></ul><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><ul><li>JDK 1.5开始，Java支持传递同类型的可变参数给一个方法。</li><li>在方法声明中，在指定参数类型后加一个省略号（……）</li><li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明</li></ul><p><strong>设计一个程序计算出可变字长数组的最大值</strong></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/11/ 22:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;       <span class="comment">//可变参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> [] test1 = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>&#125;;</span><br><span class="line">        <span class="type">Demo04</span> <span class="variable">demo04</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo04</span>();</span><br><span class="line">        demo04.printMax(<span class="number">10.0</span>,<span class="number">20.0</span>,<span class="number">30.0</span>);</span><br><span class="line">        demo04.printMax(test1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMax</span><span class="params">(<span class="type">double</span>... i)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i.length == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;error!!the length is 0&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> i[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i[j] &gt; result)&#123;</span><br><span class="line">                result = i[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;the max number is &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/62091/27/17177/112808/622b5c9aE22522567/07f6d7aff5cd42a3.png" alt="可变参数"></p><hr><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ul><li>A方法可以调用B方法，这是很常见的。</li><li>而递归就是：<strong>A方法调用A方法，自己调用自己</strong></li><li>利用递归可以用简单的程序解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可以描述出解题过程所需要的多次重复计算，大大减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合</li><li>递归结构包括两个部分：<ul><li><strong>递归头：什么时候不调用自身方法。如果没有头，会陷入死循环</strong></li><li><strong>递归体：什么时候需要调用自身方法。</strong></li></ul></li></ul><p><strong>设计一个程序计算递归</strong></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/11/ 22:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(function(<span class="number">3</span>));        <span class="comment">//打印出6的阶乘</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">function</span><span class="params">(<span class="type">int</span> n)</span>&#123;              <span class="comment">//计算阶乘的方法</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n*function(n-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img30.360buyimg.com/pop/jfs/t1/187601/21/21695/79046/622b5f66E5bd55680/8cf9080773c4a685.png" alt="递归"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java流程控制03</title>
      <link href="/archives/5ac22c70.html"/>
      <url>/archives/5ac22c70.html</url>
      
        <content type="html"><![CDATA[<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><ul><li>while 是最基本的循环</li><li>语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(布尔表达式)&#123;</span><br><span class="line">    <span class="comment">//循环内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>只要布尔表达式为true，则循环一直执行下去</li><li><strong>我们大多数情况下会让循环停止下来，我们需要一个让表达式失效的方式来结束循环</strong></li><li>少部分情况循环需要一直执行，比如服务器的请求响应监听</li><li>循环条件一直为true就会造成无限循环【死循环】，正常业务中，应当避免死循环。它会影响程序性能或者造成程序卡死崩溃</li></ul><p><strong>设计一个程序计算1+2+3+4+5+……+100；</strong></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.struct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/08/ 17:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhileDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>( i &lt; <span class="number">100</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            total += i ;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="do-……-while循环"><a href="#do-……-while循环" class="headerlink" title="do …… while循环"></a>do …… while循环</h3><ul><li>对于while语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件时 也至少执行一次。</li><li>do ……while循环 和while循环相似，不同的是，多……while循环至少会执行一次。</li><li>语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure><ul><li>while和do-While的区别：<ul><li>while先判断后执行，dowhile是先执行后判断！</li><li>Do……while总是保证循环体会被至少执行一次！这是他们的主要差别</li></ul></li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.struct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/08/ 17:56</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoWhileDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            i++;</span><br><span class="line">            total += i;</span><br><span class="line">        &#125;<span class="keyword">while</span>(i &lt; <span class="number">100</span>);</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ul><li>虽然所有循环结构都可以用while或者do……while表示，但Java提供了另一种语句—for循环，使一些循环结构变得更加简单。</li><li>for循环语句是支持迭代的一种通用结构，是最有效，最灵活的循环</li><li>for循环执行的次数在执行前就确定。语法格式如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 布尔表达式 ; 更新)&#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>设计一个程序计算出0-100的奇数和与偶数和</strong></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.struct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/08/ 22:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oddtotal</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//奇数和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">eventotal</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//偶数和</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                eventotal += i;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                oddtotal += i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;偶数和：\t&quot;</span>+eventotal);</span><br><span class="line">        System.out.println(<span class="string">&quot;奇数和: \t&quot;</span>+oddtotal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行截图</strong></p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/118310/15/21353/108352/6228618aEbef0fb54/833806668fd876ba.png" alt="运行结果"></p><p><strong>设计一个程序输出1-1000之间能被5整除的数，每行输出三个</strong></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.struct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/08/ 22:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oddtotal</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//奇数和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">eventotal</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//偶数和</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                eventotal += i;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                oddtotal += i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;偶数和：\t&quot;</span>+eventotal);</span><br><span class="line">        System.out.println(<span class="string">&quot;奇数和: \t&quot;</span>+oddtotal);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i%<span class="number">5</span>) == <span class="number">0</span>)&#123;                    <span class="comment">//对</span></span><br><span class="line">                System.out.print(i+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (((i+<span class="number">1</span>) % (<span class="number">5</span>*<span class="number">3</span>)) == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>设计一个程序打印出99乘法表</strong></p><p>程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.struct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/09/ 16:56</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;           <span class="comment">//行由i控制，第i行输出i个依次类推</span></span><br><span class="line">                System.out.print( j + <span class="string">&quot;*&quot;</span> + i + <span class="string">&quot;=&quot;</span> + i*j + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();                   <span class="comment">//输出完一行就换一次行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/209292/37/19171/117235/62286e6fE53dcfc2e/196b64fb564fe713.png" alt="输出结果2"></p><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><ul><li>Java5引入了一种主要用于数组或集合的增强for循环。</li><li>增强for循环语法格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句:表达式)&#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限制在循环语句块，其值与此时数组元素的值相等。</li><li>表达式：表达式是要访问的数组名，或者是返回值为数组的方法。</li></ul><p>代码示例：简单的遍历代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.struct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/09/ 18:56</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> [] numbers = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : numbers)&#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h3><ul><li>break在任何循环语句的主体部分，均可用break控制循环的流程。<strong>break用于强行退出循环，不执行循环中剩余的语句</strong>。（break语句也可以在switch语句中使用）</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.struct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/09/ 19:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Break</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i  == <span class="number">30</span>)&#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">                <span class="keyword">break</span>;                              <span class="comment">//break;程序运行到这里的时候就会跳出循环，但是还会执行循环后面的语句</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;我还可以继续运行&quot;</span>);         <span class="comment">//跳出循环后程序还是会继续运行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：当i自增到30时，会跳出这个for循环，但是程序还会继续往下运行。</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/221351/31/12303/124973/6228d19cE7d14fe26/dc9f80fe880977db.png" alt="输出结果0"></p><hr><ul><li>continue语句用在循环语句体中，<strong>用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。</strong></li></ul><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.struct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/09/ 19:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Continue</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">100</span>)&#123;</span><br><span class="line">            i ++;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">                <span class="keyword">continue</span>;                       <span class="comment">//每当遇到能被10整除的数时换行之后自动跳过本次循环，但是后续循环还会继续运行。</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(i+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：输出时遇到能被10整除的数自动跳过。</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/101932/7/25404/115745/6228ceebEcd5cb408/370e34fed6ef0449.png" alt="输出结果"></p><ul><li>拓展：关于goto关键字<ul><li>goto关键字很早就在程序设计中出现，但仍是Java的一个保留字，并未在语言中得到正式使用；Java没有goto，然而我们在break和continue这两个关键字上，可以看到goto的影子——带标签的break和continue</li><li>标签是指后面跟一个冒号的标识符，例如：label；</li><li>对Java来说唯一用到标签的地方是在循环语句之前，而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，由于break和continue关键字通常只中断当前循环，但若随同标签使用，他们就会中断到存在标签的地方。</li></ul></li></ul><h3 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">设计一个程序打印出一个三角形。</span><br><span class="line"><span class="strong">****</span><span class="strong">****</span>**</span><br><span class="line"><span class="strong">****</span>  <span class="strong">****</span></span><br><span class="line"><span class="strong">***    **</span>*</span><br><span class="line">**      **</span><br><span class="line"><span class="bullet">*</span>        *</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.struct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/11/ 15:56</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">5</span>; j &gt;= i; j--) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt; i; k++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">5</span>; k &gt;= i; k--) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java流程控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java流程控制02</title>
      <link href="/archives/2dc51ce6.html"/>
      <url>/archives/2dc51ce6.html</url>
      
        <content type="html"><![CDATA[<h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><ul><li>Java的基本结构就是顺序结构，除非特别指明，否则就按照顺序一句一句执行</li><li>顺序结构是最简单的算法结构</li><li>语句与语句之间，框与框之间是按从上到下的顺序进行的，他是由若干个依次执行的处理步骤组成的，<strong>他是一个任何算法都离不开的一种基本算法结构</strong></li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.struct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/08/ 16:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">orderDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;helloworld1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;helloworld2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;helloworld3&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;helloworld4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为Java的基本结构是顺序结构，所以会依次输出helloworld1234</p><p><strong>输出结果：</strong></p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/127527/10/24234/104851/62271075Ea824da0b/7f876f7510c79bb4.png" alt="顺序结构"></p><hr><h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><h3 id="if单选择结构"><a href="#if单选择结构" class="headerlink" title="if单选择结构"></a>if单选择结构</h3><ul><li>很多时候需要判断一个东西是否可行，然后再去执行，这个时候我们就需要用到if语句</li><li>语法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式为true就执行这里面的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/08/ 16:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ifDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="keyword">if</span> (s.equals(<span class="string">&quot;helloworld&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;End&quot;</span>);</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为是单判断语句，所以输出时会先判断输入的内容是否为helloworld，如果是的话就输出helloworld后输出End，如果不是就直接输出End</p><p><strong>输出结果</strong></p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/209689/16/18972/92480/62271278Ede476681/e0ba51a97236559b.png" alt="输出结果2"></p><hr><h3 id="if双选择结构"><a href="#if双选择结构" class="headerlink" title="if双选择结构"></a>if双选择结构</h3><p>语法和单选择结构类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式为true就执行这里面的语句</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式为false就执行这里面的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>设计一个程序，输入分数大于60时输出及格，否则输出不及格</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/08/ 16:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入成绩&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.nextInt() &gt; <span class="number">60</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您的成绩及格&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您的成绩不及格&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="if多选择结构"><a href="#if多选择结构" class="headerlink" title="if多选择结构"></a>if多选择结构</h3><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式 <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式1为true就执行这里面的语句</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式 <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式2为true就执行这里面的语句</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式 <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式3为true就执行这里面的语句</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//如果以上布尔表达式为false就执行这里面的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>设计一个程序输入的分数为100时输出满分；90-100为A；80-90为B；70-80为C；60-70为D；小于60为不及格，其余成绩为不合法</strong></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/08/ 16:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入成绩&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (score == <span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;满分！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &lt; <span class="number">100</span> &amp;&amp; score &gt;= <span class="number">90</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;A!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &lt; <span class="number">90</span> &amp;&amp; score &gt;= <span class="number">80</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;B!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &lt; <span class="number">80</span> &amp;&amp; score &gt;= <span class="number">70</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;C!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &lt; <span class="number">70</span> &amp;&amp; score &gt;= <span class="number">60</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;D!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(score &lt; <span class="number">60</span> &amp;&amp; score &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您的成绩不及格&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成绩不合法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="嵌套的if结构"><a href="#嵌套的if结构" class="headerlink" title="嵌套的if结构"></a>嵌套的if结构</h3><ul><li>使用嵌套的if……else语句是合法的。也就是说你可以在另一个if或者else if语句中使用if或者else if语句，你可以像if语句一样嵌套else if……else</li><li>语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式为true就执行</span></span><br><span class="line">    <span class="keyword">if</span>(布尔表达式<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">//如果布尔表达式2为true就执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="switch多选择结构"><a href="#switch多选择结构" class="headerlink" title="switch多选择结构"></a>switch多选择结构</h3><ul><li>多选择结构还有一个实现方式就是switch case语句</li><li>switch case语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支</li><li>语法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//可选</span></span><br><span class="line">    <span class="comment">//你可以有任意数量的case语句</span></span><br><span class="line">        <span class="keyword">default</span> : <span class="comment">//可选</span></span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>switch 语句中的变量类型可以是<ul><li>byte 、short、int或者char</li><li><strong>从Java SE 7开始 switch就支持字符串String型了</strong></li><li>同时case标签必须为字符串常量或字面量</li></ul></li></ul><p><strong>设计一个程序，根据ABCD输出不同的评价。</strong></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.struct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/08/ 17:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">grade</span> <span class="operator">=</span> <span class="string">&#x27;G&#x27;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (grade)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span> :</span><br><span class="line">                System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span> :</span><br><span class="line">                System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span> :</span><br><span class="line">                System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span> :</span><br><span class="line">                System.out.println(<span class="string">&quot;再接再厉&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span> :</span><br><span class="line">                System.out.println(<span class="string">&quot;挂科&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;未知成绩&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong>Java SE 7 新特性</strong></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.struct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/08/ 17:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;hahaha&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (name)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;xiheya&quot;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;right&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;hahaha&quot;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;???&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java流程控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java流程控制01</title>
      <link href="/archives/b4cc4d5c.html"/>
      <url>/archives/b4cc4d5c.html</url>
      
        <content type="html"><![CDATA[<h2 id="用户交互Scanner"><a href="#用户交互Scanner" class="headerlink" title="用户交互Scanner"></a>用户交互Scanner</h2><ul><li>Java给我们提供了一个工具类，我们可以根据这个工具类来获取用户的输入。java.util.Scanner是Java5的新特征，<strong>我们可以通过Scanner类来获取用户的输入</strong></li><li>基本语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure><ul><li>通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取前我们一般需要使用hasNext()与hasNextLine()来判断是否还有输入的数据.</li></ul><hr><ol><li>使用hasNext()方法判断是否还有输入的数据；next()方法接收输入的字符</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/07/ 23:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//声明一个Scanner类型的变量</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//声明一个String类型的变量</span></span><br><span class="line">        <span class="comment">//String str;</span></span><br><span class="line">        <span class="comment">//判断是否还有输入的数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请从键盘上输入任意字符，以空格键或回车键结束&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;从键盘上输入字符为：&quot;</span> + str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用完一定要记得关闭！！！</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><ol start="2"><li>使用hasNextLine()方法判断是否还有输入的数据；nextLine()方法接收输入的字符</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/07/ 23:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//声明一个Scanner类型的变量</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//声明一个String类型的变量</span></span><br><span class="line">        <span class="comment">//String str;</span></span><br><span class="line">        <span class="comment">//判断是否还有输入的数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请从键盘上输入任意字符，以回车键结束&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextLine())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;从键盘上输入字符为：&quot;</span> + str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用完一定要记得关闭！！！</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><ol start="3"><li>不判断是否还有输入的数据；直接nextLine()方法接收输入的字符</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/07/ 23:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//声明一个Scanner类型的变量</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//声明一个String类型的变量</span></span><br><span class="line">        <span class="comment">//String str;</span></span><br><span class="line">        <span class="comment">//判断是否还有输入的数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请从键盘上输入任意字符，以回车键结束&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;从键盘上输入字符为：&quot;</span> + str);</span><br><span class="line">        <span class="comment">//用完一定要记得关闭！！！</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong>IO流的类用完一定要关掉，不然他会在后台一直占用资源!!!!</strong></p><h3 id="next-与nextLine-方法的区别"><a href="#next-与nextLine-方法的区别" class="headerlink" title="next()与nextLine()方法的区别"></a>next()与nextLine()方法的区别</h3><ul><li>Scanner是一个扫描器，我们录取到键盘的数据，先存到缓存区等待读取，它判断读取结束的标示是  空白符；比如空格，回车，tab 等等。</li></ul><p><img src="https://img30.360buyimg.com/pop/jfs/t1/108362/23/25929/88054/62262eb1E3b5bef2f/061ac863a73b599d.png" alt="API"></p><ul><li>next()方法是读取到空白符就结束了<ol><li>一定要读取到有效字符后才可以结束输入</li><li>对输入有效字符之前遇到的空白，next()方法会自动将其去掉。</li><li>只有输入有效字符后才将其后面输入的空白符作为分隔符或结束符</li><li><strong>next</strong>()不能得到带有空格的字符串</li></ol></li><li>nextLine()方法是读取到了回车就结束即：\t.<ol><li>以enter为结束符，也就是说nextLine()方法 返回的是输入回车之前的所有字符</li><li>可以获得空白符</li></ol></li></ul><hr><h3 id="Scanner中的其他方法"><a href="#Scanner中的其他方法" class="headerlink" title="Scanner中的其他方法"></a>Scanner中的其他方法</h3><ol><li><strong>hasNextInt()</strong> 方法与 **hasNextfloat()**方法可以判断下一个是否还有整数或小数输入。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/08/ 12:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0f</span>;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请从键盘上输入任意整数&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextInt())&#123;</span><br><span class="line">            i = scanner.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的整数为&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error！您输入的不是整数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请从键盘上输入任意小数&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextFloat())&#123;</span><br><span class="line">            f = scanner.nextFloat();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的小数为&quot;</span> + f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error！您输入的不是小数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img30.360buyimg.com/pop/jfs/t1/105157/26/23793/13664/6226e0cdE6a4ab3cb/4be574caab1b11c7.png" alt="输出结果"></p><hr><ol start="2"><li><strong>hasNextdouble()方法</strong>：判断接下来输入的是不是double型；</li></ol><p>学到这里可以做一个简易的数字求和程序，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xiheya.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> &#123;xiheya&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/03/08/ 12:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请从键盘上输入任意个数，以字符型数据结束&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextDouble())&#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line">            total = total + x;</span><br><span class="line">            m++;</span><br><span class="line">            System.out.println(<span class="string">&quot;您输入了&quot;</span> + m + <span class="string">&quot;个数，和为：&quot;</span> + total);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">v</span> <span class="operator">=</span> total / m;</span><br><span class="line">        System.out.println(<span class="string">&quot;您结束了输入，此次您输入了&quot;</span> + m + <span class="string">&quot;个数，和为：&quot;</span> + total + <span class="string">&quot;这些数的平均值为：&quot;</span> + v);</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/125778/15/24705/127198/6226e3bdE5d810fb2/9dd413f8f1e4e2a6.png" alt="求和程序"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java流程控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法04</title>
      <link href="/archives/ad476873.html"/>
      <url>/archives/ad476873.html</url>
      
        <content type="html"><![CDATA[<h2 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h2><ul><li>为了更好地组织类，Java提供了包机制，用于区别类名的命名空间</li><li>包语句的语法格式为</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pkg1[.pkg2[.pkg3...]];</span><br></pre></td></tr></table></figure><ul><li>*** 一般利用公司域名倒置作为包名***</li><li>为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。使用import语句可完成此项功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> package1[.package2...].(classname|*);</span><br></pre></td></tr></table></figure><h2 id="JavaDoc生成文档"><a href="#JavaDoc生成文档" class="headerlink" title="JavaDoc生成文档"></a>JavaDoc生成文档</h2><p>Win + r 后输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javadoc -encoding UTF-8 -charset UTF-8 ***.java</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法03</title>
      <link href="/archives/3323fdd0.html"/>
      <url>/archives/3323fdd0.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、运算符"><a href="#一、运算符" class="headerlink" title="一、运算符"></a>一、运算符</h2><h3 id="1-1-Java语言支持的运算符"><a href="#1-1-Java语言支持的运算符" class="headerlink" title="1.1 Java语言支持的运算符"></a>1.1 Java语言支持的运算符</h3><h3 id="1-2-算术运算符"><a href="#1-2-算术运算符" class="headerlink" title="1.2 算术运算符"></a>1.2 算术运算符</h3><h4 id="1-2-1-符号"><a href="#1-2-1-符号" class="headerlink" title="1.2.1 符号"></a><strong>1.2.1 符号</strong></h4><p>算术运算符符号：**+   ,   -   ,   *   ,   &#x2F;   ,   ++   ,   –**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//算数运算符的基本操作</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line">        System.out.println(a+b);</span><br><span class="line">        System.out.println(a-b);</span><br><span class="line">        System.out.println(a*b);</span><br><span class="line">        System.out.println(a/(<span class="type">double</span>)b);</span><br><span class="line">        System.out.println(a%b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img30.360buyimg.com/pop/jfs/t1/148544/13/22533/14522/6225a46dE4784cb8c/0af0c243012edde2.png" alt="输出结果"></p><hr><h4 id="1-2-2-小tips"><a href="#1-2-2-小tips" class="headerlink" title="1.2.2 小tips"></a>1.2.2 <strong>小tips</strong></h4><ul><li><p>当参与运算的变量中有<strong>long</strong>型时，输出的结果也为<strong>long</strong>型</p></li><li><p>若参与运算的变量中五<strong>long</strong>型时，<strong>无论参与运算的变量是何类型</strong>，则输出结果均为<strong>int</strong>型</p></li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//算数运算符的基本操作</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="type">short</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line">        System.out.println((String) (a+b));</span><br><span class="line">        System.out.println((String) (b+c));</span><br><span class="line">        System.out.println((String) (c+d));</span><br><span class="line">        System.out.println((String) (b+d));</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img30.360buyimg.com/pop/jfs/t1/130784/18/22547/135851/6225a642Ed39e84f6/f1da4cc8820f49fb.png" alt="test"></p><hr><p>** 自增（++）、自减（–）运算符**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//++  --  自增 自减  一元运算符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a++;                <span class="comment">//执行这行代码时，先进行赋值操作把a的初始值1赋值给b；然后a再执行自增操作a = a+1 = 2。</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ++a;                <span class="comment">//执行这行代码时，先进行a = 2自增操作a = a+1 =3；然后再执行赋值操作把a值3赋值给c。</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img30.360buyimg.com/pop/jfs/t1/110217/22/23354/120513/6225ab39E72783746/456fafc3cbbcbd8c.png" alt="自增自减"></p><hr><h3 id="1-3-赋值运算符"><a href="#1-3-赋值运算符" class="headerlink" title="1.3 赋值运算符"></a>1.3 赋值运算符</h3><h4 id="1-3-1-符号"><a href="#1-3-1-符号" class="headerlink" title="1.3.1 符号"></a>1.3.1 符号</h4><p>赋值运算符符号：**&#x3D;**</p><h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法格式如下</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;  <span class="comment">//初始化int类型变量a，并将10赋值给a。</span></span><br></pre></td></tr></table></figure><hr><h3 id="1-4-关系运算符"><a href="#1-4-关系运算符" class="headerlink" title="1.4 关系运算符"></a>1.4 关系运算符</h3><h4 id="1-4-1-符号"><a href="#1-4-1-符号" class="headerlink" title="1.4.1 符号"></a>1.4.1 符号</h4><p>：关系运算符符号：**&gt;   ,   &lt;   ,   &gt;&#x3D;   ,   &lt;&#x3D;   ,   &#x3D;&#x3D;   ,   !&#x3D;   ,   instanceof**</p><ul><li><strong>关系运算符返回的是 布尔值，其结果只有true和false两种情况，常用于if语句中</strong></li></ul><h4 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//关系运算符返回的是 布尔值，其结果只有true和false两种情况，常用于if语句中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span> ;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span> ;</span><br><span class="line">        System.out.println(a == b);</span><br><span class="line">        System.out.println(a != b);</span><br><span class="line">        System.out.println(a &lt; b);</span><br><span class="line">        System.out.println(a &gt; b);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img30.360buyimg.com/pop/jfs/t1/93862/1/21707/83677/6225a800E75cd18a9/34f214e69921edad.png" alt="result"></p><hr><h3 id="1-5-逻辑运算符"><a href="#1-5-逻辑运算符" class="headerlink" title="1.5 逻辑运算符"></a>1.5 逻辑运算符</h3><h4 id="1-5-1-符号"><a href="#1-5-1-符号" class="headerlink" title="1.5.1 符号"></a>1.5.1 符号</h4><p>逻辑运算符符号：**&amp;&amp;   ,   ||   ,   !**</p><h4 id="1-5-2-语法格式"><a href="#1-5-2-语法格式" class="headerlink" title="1.5.2 语法格式"></a>1.5.2 语法格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;a&amp;&amp;b:\t&quot;</span>+(a &amp;&amp; b));             <span class="comment">//逻辑与运算：只要有一个是假的，则结果就是假的</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a||b:\t&quot;</span>+(a || b));             <span class="comment">//逻辑或运算：只要有一个是真的，则结果就是真的</span></span><br><span class="line">        System.out.println(<span class="string">&quot;!(a&amp;&amp;b):\t&quot;</span>+!(a &amp;&amp; b));         <span class="comment">//逻辑非运算：结果取反</span></span><br><span class="line">        <span class="comment">//短路运算：当与运算中第一个变量为假时，就不会再去判断第二个变量。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">d</span> <span class="operator">=</span> b &amp;&amp; (c++ &gt; <span class="number">5</span>);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img30.360buyimg.com/pop/jfs/t1/114452/5/20887/125235/6225aebeE1a0cac60/c63f3bb94e130e05.png" alt="result01"></p><hr><h3 id="1-6-位运算符"><a href="#1-6-位运算符" class="headerlink" title="1.6 位运算符"></a>1.6 位运算符</h3><h4 id="1-6-1-符号"><a href="#1-6-1-符号" class="headerlink" title="1.6.1 符号"></a>1.6.1 符号</h4><p>位运算符符号：**&amp;  ,  |  ,  ^  ,  ~  ,  &gt;&gt;  ,  &lt;&lt;   ,  &gt;&gt;&gt;**</p><h4 id="1-6-2-语法格式"><a href="#1-6-2-语法格式" class="headerlink" title="1.6.2 语法格式"></a>1.6.2 语法格式</h4><p>语法格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        A = 0010 1101</span></span><br><span class="line"><span class="comment">        B = 1011 1001</span></span><br><span class="line"><span class="comment">        -------------------</span></span><br><span class="line"><span class="comment">        A&amp;B =   0010 1001</span></span><br><span class="line"><span class="comment">        A|B =   1011 1101</span></span><br><span class="line"><span class="comment">        A^B =   1001 0100   异或运算：变量真假相同时结果为假，不同时为真</span></span><br><span class="line"><span class="comment">        ~B  =   0100 0110</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//快速计算2*8</span></span><br><span class="line">        System.out.println(<span class="number">2</span>&lt;&lt;<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="1-7-条件运算符"><a href="#1-7-条件运算符" class="headerlink" title="1.7 条件运算符"></a>1.7 条件运算符</h3><h4 id="1-7-1-符号"><a href="#1-7-1-符号" class="headerlink" title="1.7.1 符号"></a>1.7.1 符号</h4><p>条件运算符符号：<strong>x ? y : z :</strong></p><h4 id="1-7-2-语法格式"><a href="#1-7-2-语法格式" class="headerlink" title="1.7.2 语法格式"></a>1.7.2 语法格式</h4><p>语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="comment">// 条件运算符 x ? y : z</span></span><br><span class="line">        <span class="comment">// 先判断x是否为真，若x为真，则结果是y；若x为假，则结果是z</span></span><br><span class="line">        System.out.println((a&gt;b) ? <span class="number">50</span> : <span class="number">60</span>);</span><br><span class="line">        System.out.println((a&lt;b) ? <span class="number">50</span> : <span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="1-8-扩展赋值运算符"><a href="#1-8-扩展赋值运算符" class="headerlink" title="1.8 扩展赋值运算符"></a>1.8 扩展赋值运算符</h3><h4 id="1-8-1-符号"><a href="#1-8-1-符号" class="headerlink" title="1.8.1 符号"></a>1.8.1 符号</h4><p>扩展赋值运算符符号：**+&#x3D;  ,  -&#x3D;  ,  <em>&#x3D;  ,  &#x2F;&#x3D;</em>*</p><h4 id="1-8-2-语法格式"><a href="#1-8-2-语法格式" class="headerlink" title="1.8.2 语法格式"></a>1.8.2 语法格式</h4><p>语法格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        a+=b;</span><br><span class="line">        System.out.println(a); <span class="comment">// a = a+b --&gt;30 = 10+20</span></span><br><span class="line">        a-=b;</span><br><span class="line">        System.out.println(a); <span class="comment">// a = a-b --&gt;10 = 30-20</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符串连接符 +</span></span><br><span class="line">        <span class="comment">//当+号两侧的任意一侧出现了String类型，则它会自动将两侧的变量都转换为String类型并进行连接。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span> + a + b);</span><br><span class="line">        <span class="comment">//但是如果String类型前面出现了运算，则会先运算再连接。</span></span><br><span class="line">        System.out.println(b+ a + <span class="string">&quot;&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img30.360buyimg.com/pop/jfs/t1/211389/19/18820/122997/6225b52dEbff02f91/33d468e313578960.png" alt="result02"></p><hr><h3 id="1-9-运算符优先级"><a href="#1-9-运算符优先级" class="headerlink" title="1.9 运算符优先级"></a>1.9 运算符优先级</h3><table><thead><tr><th align="center"><strong>优先级</strong></th><th align="center"><strong>运算符</strong></th><th align="center"><strong>简介</strong></th><th align="center"><strong>结合性</strong></th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>[ ]</code>、<code> .</code>、<code>( )</code></td><td align="center">方法调用，属性获取</td><td align="center">从左向右</td></tr><tr><td align="center">2</td><td align="center">!、~、 ++、 –</td><td align="center">一元运算符</td><td align="center">从右向左</td></tr><tr><td align="center">3</td><td align="center">* 、&#x2F; 、%</td><td align="center">乘、除、取模（余数）</td><td align="center">从左向右</td></tr><tr><td align="center">4</td><td align="center">+ 、 -</td><td align="center">加减法</td><td align="center">从左向右</td></tr><tr><td align="center">5</td><td align="center">&lt;&lt;、 &gt;&gt;、 &gt;&gt;&gt;</td><td align="center">左位移、右位移、无符号右移</td><td align="center">从左向右</td></tr><tr><td align="center">6</td><td align="center">&lt; 、&lt;&#x3D; 、&gt;、 &gt;&#x3D;、 instanceof</td><td align="center">小于、小于等于、大于、大于等于， 对象类型判断是否属于同类型</td><td align="center">从左向右</td></tr><tr><td align="center">7</td><td align="center">&#x3D;&#x3D; 、!&#x3D;</td><td align="center">2个值是否相等，2个值是否不等于。 下面有详细的解释</td><td align="center">从左向右</td></tr><tr><td align="center">8</td><td align="center">&amp;</td><td align="center">按位与</td><td align="center">从左向右</td></tr><tr><td align="center">9</td><td align="center">^</td><td align="center">按位异或</td><td align="center">从左向右</td></tr><tr><td align="center">10</td><td align="center">|</td><td align="center">按位或</td><td align="center">从左向右</td></tr><tr><td align="center">11</td><td align="center">&amp;&amp;</td><td align="center">短路与</td><td align="center">从左向右</td></tr><tr><td align="center">12</td><td align="center">||</td><td align="center">短路或</td><td align="center">从左向右</td></tr><tr><td align="center">13</td><td align="center">?:</td><td align="center">条件运算符</td><td align="center">从右向左</td></tr><tr><td align="center">14</td><td align="center">&#x3D;、 +&#x3D; 、-&#x3D; 、*&#x3D; 、&#x2F;&#x3D;、 %&#x3D;、 &amp;&#x3D;、 |&#x3D;、 ^&#x3D;、 &lt;、&lt;&#x3D; 、&gt;、&gt;&#x3D; 、&gt;&gt;&#x3D;</td><td align="center">混合赋值运算符</td><td align="center">从右向左</td></tr></tbody></table><p>点击查看<a href="http://110.42.139.30:8000/index.php/2022/03/07/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%B3%A8%E9%87%8A%E3%80%81%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/">Java基础语法之注释、标识符、数据类型（一）</a></p><p>点击查看<a href="http://110.42.139.30:8000/index.php/2022/03/07/java%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%92%8C%E5%8F%98%E9%87%8F%EF%BC%88%E4%BA%8C%EF%BC%89/">Java基础语法之类型转换和变量（二）</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法02</title>
      <link href="/archives/4424cd46.html"/>
      <url>/archives/4424cd46.html</url>
      
        <content type="html"><![CDATA[<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li>由于Java是强类型语言，所以要进行有些运算的时候，需要用到类型转换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//低-----------------------------------------&gt;高</span></span><br><span class="line"><span class="type">byte</span>,<span class="type">short</span>,<span class="type">char</span> ---&gt;  <span class="type">int</span> ---&gt; <span class="type">long</span> ---&gt; <span class="type">double</span>;</span><br><span class="line"><span class="comment">//小数的优先级一定大于整数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>运算中，不同类型的数据先转换为同一类型，然后再进行运算</li><li>强制类型转换:              (类型)变量名;         高—&gt;低</li><li>自动类型转换:                                              低—&gt;高</li><li>注意点：<ul><li>不能对布尔值进行转换</li><li>不能打对象类型转换为不相干的类型<ul><li>把高容量类型转换到低容量类型时，需要强制转换<br>* 2.转换可能会出现内存溢出或精度问题</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">128</span> ;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>) i;          <span class="comment">//内存溢出</span></span><br><span class="line">        <span class="comment">//强制转换 (类型)变量名;         高---&gt;低</span></span><br><span class="line">        <span class="comment">//自动转换                     低---&gt;高</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 注意点：</span></span><br><span class="line"><span class="comment">        * 1.不能对布尔值进行转换</span></span><br><span class="line"><span class="comment">        * 2.不能打对象类型转换为不相干的类型</span></span><br><span class="line"><span class="comment">        * 3.把高容量类型转换到低容量类型时，需要强制转换</span></span><br><span class="line"><span class="comment">        * 4.转换可能会出现内存溢出或精度问题</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        System.out.println((<span class="type">int</span>) <span class="number">30.7</span>);</span><br><span class="line">        System.out.println((<span class="type">int</span>) <span class="number">43.33f</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;=========================&quot;</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> c + <span class="number">1</span>;</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        System.out.println((<span class="type">char</span>) d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>变量：即为可以变化的量</li><li>Java是一种强类型语言，每个变量都必须声明其类型。</li><li>Java变量时程序中最基本的存储单元，其要素包括变量名，变量类型和作用域</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type varName [=value][&#123;,varName[=value]&#125;];</span><br><span class="line"><span class="comment">//数据类型 变量名 = 值；可以用逗号隔开来声明多个同类型变量</span></span><br><span class="line"><span class="type">int</span> a,b,c = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>注意事项</strong><ul><li>每个变量都有类型，类型可以是基本类型，也可以是引用类型</li><li>变量名必须是合法的标识符</li><li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束。</li></ul></li><li>变量的命名规范<ul><li>所有变量、方法、类名：<strong>见名知意</strong></li><li>类成员变量：首字母小写和驼峰原则：monthSalary</li><li>局部变量：首字母小写和驼峰规则</li><li>常量：大写字母和下划线：MAX_VALUE</li><li>类名：首字母大写和驼峰原则：Man、GoodMan</li><li>方法名：首字母小写和驼峰原则：run(),runRun();</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法01</title>
      <link href="/archives/dd2d9cfc.html"/>
      <url>/archives/dd2d9cfc.html</url>
      
        <content type="html"><![CDATA[<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>平时编写代码时，在代码量较少的时候。代码的可读性更强，但是当项目结构一旦复杂起来，我们就需要注释。</li><li><strong>注释不会被执行</strong>，只是给我们写代码的人看的</li><li><em><strong>书写注释是一个非常好的编程习惯</strong></em></li></ul><h3 id="Java中的注释"><a href="#Java中的注释" class="headerlink" title="Java中的注释"></a>Java中的注释</h3><ul><li>单行注释 &#x2F;&#x2F;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//我是单行注释</span></span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>多行注释&#x2F;**&#x2F;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*我是多行注释</span></span><br><span class="line"><span class="comment">        我是多行注释</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>文档注释&#x2F;** *&#x2F;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *我是文档注释</span></span><br><span class="line"><span class="comment">        我是文档注释</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Java标识符"><a href="#Java标识符" class="headerlink" title="Java标识符"></a>Java标识符</h2><p><strong>关键字</strong></p><ul><li><em><strong>Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符</strong></em></li></ul><p><strong>标识符注意点</strong></p><ul><li>所有标识符都应该以字母（A-Z或者a-z），美元（￥）或者下划线（_）开始</li><li>首字符过后可以是字母（A-Z或者a-z）、美元（￥）、下划线（_）或者数字的任何字符组合</li><li><em><strong>不能使用关键字作为变量名或方法名</strong></em></li><li>标识符是<strong>大小写敏感</strong>的</li><li><strong>不建议使用中文或者拼音作为变量名或方法名</strong></li></ul><h2 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h2><ul><li>强类型语言<ul><li>要求变量的使用<strong>必须要严格符合规定</strong>，所有变量都必须先定义后才能使用</li></ul></li><li>Java数据类型分为两大类<ul><li>基本类型(primitive type)</li><li>引用类型(reference type)</li></ul></li></ul><p><strong>基本类型</strong></p><table><thead><tr><th align="center">No.</th><th align="center">数据类型</th><th align="center">大小&#x2F;位</th><th align="center">可表示数据范围</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>byte</code>（字节型）</td><td align="center">8</td><td align="center">-128~127</td><td align="center">0</td></tr><tr><td align="center">2</td><td align="center"><code>short</code>（短整型）</td><td align="center">16</td><td align="center">-32768~32767</td><td align="center">0</td></tr><tr><td align="center">3</td><td align="center"><code>int</code>（整型）</td><td align="center">32</td><td align="center">-2147483648~2147483647</td><td align="center">0</td></tr><tr><td align="center">4</td><td align="center"><code>long</code>（长整型）</td><td align="center">64</td><td align="center">-9223372036854775808~9223372036854775807</td><td align="center">0</td></tr><tr><td align="center">5</td><td align="center"><code>float</code>（单精度）</td><td align="center">32</td><td align="center">-3.4E38~3.4E38</td><td align="center">0.0</td></tr><tr><td align="center">6</td><td align="center"><code>double</code>（双精度）</td><td align="center">64</td><td align="center">-1.7E308~1.7E308</td><td align="center">0.0</td></tr><tr><td align="center">7</td><td align="center"><code>char</code>（字符）</td><td align="center">16</td><td align="center">0~255</td><td align="center">‘\u0000’</td></tr><tr><td align="center">8</td><td align="center"><code>boolean</code>（布尔）</td><td align="center">-</td><td align="center">true或false</td><td align="center">false</td></tr></tbody></table><p><strong>引用类型</strong></p><p>引用数据类型非常多，大致包括：<br>类、 接口类型、 数组类型、 枚举类型、 注解类型、 字符串型</p><p>如<strong>String为引用类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//整型：int(4字节)、byte(1字节)、short(2字节)还有long(8字节)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num01</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">num02</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">short</span> <span class="variable">num03</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">num04</span> <span class="operator">=</span> <span class="number">40l</span>;</span><br><span class="line">        <span class="comment">//浮点型：float(4字节)、double(8字节)</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">num05</span> <span class="operator">=</span> <span class="number">50.66f</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">num06</span> <span class="operator">=</span> <span class="number">66.66</span>;</span><br><span class="line">        <span class="comment">//字符：char(2字节)</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">usr</span> <span class="operator">=</span> <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">        <span class="comment">//布尔值：boolean</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>小科普</strong></p><ul><li><strong>位(bit)</strong>:是计算机内部数据存储的最小单位，10100101是一个八位二进制数</li><li><strong>字节(Byte)</strong>: 是计算机中数据处理的基本单位，习惯上用大写的B来表示</li><li>1B(Byte,字节) &#x3D; 8bit(位)</li><li><strong>字符</strong>:是指计算机中使用的字母、数字、字和符号<ul><li>1bit &#x3D; 1位;</li><li>1Byte &#x3D; 1B &#x3D; 8b;</li><li>1024B &#x3D; 1KB</li><li>1024KB &#x3D; 1M</li><li>1024M &#x3D; 1G</li></ul></li></ul><h3 id="Java数据类型拓展"><a href="#Java数据类型拓展" class="headerlink" title="Java数据类型拓展"></a>Java数据类型拓展</h3><ul><li>整数拓展， 0b表示二进制数、0表示八进制、十进制直接输入、0x表示十六进制</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//整数拓展， 0b表示二进制数、0表示八进制、十进制直接输入、0x表示十六进制</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0b10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">010</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0x10</span>;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(i1);</span><br><span class="line">        System.out.println(i2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>浮点数扩展 <ul><li>银行业务表示，</li><li>常使用数学工具类BigDecimal，来表示银行业务。float数据类型是有限的，而且是离散的。它会舍入误差只表示一个大概的数，—–&gt;接近但不等于！最好避免完全使用浮点数进行比较！！！</li></ul></li><li>a</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//浮点数扩展 银行业务表示，</span></span><br><span class="line">        <span class="comment">//通常使用数学工具类BigDecimal，来表示银行业务。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line">        <span class="comment">//float             float数据类型是有限的，而且是离散的。它会舍入误差只表示一个大概的数，-----&gt;接近但不等于</span></span><br><span class="line">        <span class="comment">//double</span></span><br><span class="line">        <span class="comment">//最好避免完全使用浮点数进行比较</span></span><br><span class="line">        <span class="comment">//最好避免完全使用浮点数进行比较</span></span><br><span class="line">        <span class="comment">//最好避免完全使用浮点数进行比较</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0.1f</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1.0</span>/<span class="number">10</span>;</span><br><span class="line">        System.out.println(f == d);</span><br><span class="line">        System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line">        <span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">12345667486234f</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">f2</span> <span class="operator">=</span> f1 + <span class="number">1</span>;</span><br><span class="line">        System.out.println(f1 == f2);</span><br><span class="line">        System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字符扩展<ul><li>System.out.println((int)c1);        &#x2F;&#x2F;将char型的c1 强制转换为int型的Unicode编码</li><li>所有字符的本质还是数字，他们存放在一个Unicode编码表内（97 &#x3D; a 、 65 &#x3D; A） ，他占两个字节；</li><li>转义字符：  \t 制表符、 \n 换行符……</li></ul></li><li>a</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//字符扩展</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;荣&#x27;</span>;</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println((<span class="type">int</span>)c1);        <span class="comment">//将char型的c1 强制转换为int型的Unicode编码</span></span><br><span class="line"></span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println((<span class="type">int</span>)c2);        <span class="comment">//将char型的c2 强制转换为int型的Unicode编码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="string">&#x27;\u0066&#x27;</span>;                 <span class="comment">//将Unicode编码0066转义为char型数据c3</span></span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        <span class="comment">//所有字符的本质还是数字，他们存放在一个Unicode编码表内（97 = a 、 65 = A） ，他占两个字节；</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//转义字符  \t 制表符、 \n 换行符……</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello\t World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>布尔值扩展：<ul><li>less is more   代码要精简易读；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//布尔值扩展</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (flat == <span class="literal">true</span>)&#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;&#125;;</span><br><span class="line">        <span class="comment">//less is more   代码要精简易读；</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/archives/5d36ff15.html"/>
      <url>/archives/5d36ff15.html</url>
      
        <content type="html"><![CDATA[<h2 id="Markdown-基本语法"><a href="#Markdown-基本语法" class="headerlink" title="Markdown 基本语法"></a>Markdown 基本语法</h2><h3 id="一-标-题"><a href="#一-标-题" class="headerlink" title="一.标 题:"></a>一.标 题:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.1 一级标题 #+空格+文本+回车 </span><br><span class="line"></span><br><span class="line">1.2 二级标题 ##+空格+文本+回车 </span><br><span class="line"></span><br><span class="line">1.3 三级标题 ###+空格+文本+回车 </span><br><span class="line"></span><br><span class="line">.....以此类推</span><br></pre></td></tr></table></figure><hr><h3 id="二-字体"><a href="#二-字体" class="headerlink" title="二.字体"></a>二.字体</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">粗体：文本两边加**</span><br><span class="line">eg: **Hello World**</span><br></pre></td></tr></table></figure><p><strong>Hello World</strong></p><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">斜体：文本两边加*</span><br><span class="line">eg: *Hello World*</span><br></pre></td></tr></table></figure><p>   <em>Hello World</em></p><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">粗体加斜体：文本两边加***</span><br><span class="line">eg: ***Hello World***</span><br></pre></td></tr></table></figure><p><em><strong>Hello World</strong></em></p><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">中间横线：文本两边加~~</span><br><span class="line">eg: ~~Hello World~~</span><br></pre></td></tr></table></figure><p> <del>Hello World</del></p><hr><h3 id="三-引用"><a href="#三-引用" class="headerlink" title="三.引用"></a>三.引用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">右箭头后面接上文本&gt;</span><br><span class="line">eg: &gt;与君共赴，万里征程。</span><br></pre></td></tr></table></figure><blockquote><p>与君共赴，万里征程。</p></blockquote><hr><h3 id="四-分割线"><a href="#四-分割线" class="headerlink" title="四.分割线"></a>四.分割线</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">三个-（减号）表示分割线</span><br><span class="line">eg: ---</span><br></pre></td></tr></table></figure><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">三个*（减号）表示分割线</span><br><span class="line">eg: ***</span><br></pre></td></tr></table></figure><hr><h3 id="五-图片"><a href="#五-图片" class="headerlink" title="五.图片"></a>五.图片</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">插入图片：!+[图片名字]+(图片路径)</span><br><span class="line">eg:![示例1](https://images.unsplash.com/photo-1646408271568-977e12b6425a?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1170&amp;q=80)</span><br></pre></td></tr></table></figure><p><img src="https://images.unsplash.com/photo-1646408271568-977e12b6425a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80" alt="示例1"></p><hr><h3 id="六-超链接"><a href="#六-超链接" class="headerlink" title="六. 超链接"></a>六. 超链接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法：[标题](链接地址)</span><br><span class="line">eg:[Idea快捷键](http://110.42.139.30:8000/index.php/2022/03/06/13/)</span><br></pre></td></tr></table></figure><p><a href="http://110.42.139.30:8000/index.php/2022/03/06/13">idea快捷键</a></p><hr><h3 id="七-列表"><a href="#七-列表" class="headerlink" title="七. 列表"></a>七. 列表</h3><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：1 + . + 空格</span><br></pre></td></tr></table></figure><ol><li>A</li><li>B</li><li>C</li></ol><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法： - + 空格</span><br></pre></td></tr></table></figure><ul><li>A</li><li>B</li><li>C</li></ul><hr><h3 id="八-表格"><a href="#八-表格" class="headerlink" title="八.表格"></a>八.表格</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">| 名字 | 性别 | 生日     |</span><br><span class="line"></span><br><span class="line">| ---- | ---- | -------- |</span><br><span class="line"></span><br><span class="line">| 张三 | 男   | 2000.1.1 |</span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>名字</th><th>性别</th><th>生日</th></tr></thead><tbody><tr><td>张三</td><td>男</td><td>2000.1.1</td></tr></tbody></table><h3 id="九-代码"><a href="#九-代码" class="headerlink" title="九.代码"></a>九.代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法 ``` + 编程语言名称</span><br><span class="line">eg ```shell</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br></pre></td></tr></table></figure><h3 id="十-快捷键"><a href="#十-快捷键" class="headerlink" title="十.快捷键"></a>十.快捷键</h3><h4 id="文本编辑快捷键"><a href="#文本编辑快捷键" class="headerlink" title="文本编辑快捷键"></a>文本编辑快捷键</h4><ul><li>无序列表：输入-之后输入空格 &#x2F; ctrl + shift + ] (对选中行可用)</li><li>有序列表：输入数字 + “.”之后输入空格 &#x2F; ctrl + shift + [ (对选中行可用)</li><li>引用内容：&gt; + 空格 &#x2F; ctrl + shift + q (对选中内容可用)</li><li>任务列表：-[空格]空格 文字</li><li>标题：ctrl + 数字</li><li>表格：ctrl + t</li><li>目录：[TOC]</li><li>任务列表：- [ ] 文字（注意 “-” 后与 “[]“ 中间都有空格）</li><li>选中一整行：ctrl + l (字母L)</li><li>选中单词：ctrl + d</li><li>选中相同格式的文字：ctrl + e</li><li>跳转到文章开头：ctrl + home</li><li>跳转到文章结尾：ctrl + end</li><li>搜索：ctrl + f</li><li>替换：ctrl + h</li><li>引用：输入&gt;之后输入空格</li><li>代码块： ctrl + shift + k</li><li>行内代码：ctrl + shift + &#96; (对选中行可用)</li><li>加粗：ctrl + b</li><li>倾斜：ctrl + i</li><li>下划线：ctrl + u</li><li>删除线：alt + shift + 5</li><li>插入链接：ctrl + k</li><li>插入公式：ctrl + shift + m</li><li>插入图片：ctrl + shift + i</li><li>保存：ctrl + s</li><li>另存为：ctrl + shift + s</li></ul><h4 id="编辑模式快捷键"><a href="#编辑模式快捷键" class="headerlink" title="编辑模式快捷键"></a>编辑模式快捷键</h4><ul><li>源码模式编辑切换：ctrl + &#x2F;</li><li>打字机模式切换：F9</li><li>专注模式切换：F8</li><li>全屏模式切换：F11</li><li>Typora内部窗口焦点切换：ctrl + tab</li><li>侧边栏显示&#x2F;隐藏切换：ctrl + shift + L</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java运行机制及IDEA安装教程</title>
      <link href="/archives/6b48db66.html"/>
      <url>/archives/6b48db66.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java运行机制及IDEA安装教程"><a href="#Java运行机制及IDEA安装教程" class="headerlink" title="Java运行机制及IDEA安装教程"></a>Java运行机制及IDEA安装教程</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><ol><li>新建一个Java文件<ul><li>文件后缀名为.java</li><li>Hello.java</li></ul></li><li>编写代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>编译java文件  cmd：javac Hello.java。会生成一个class文件</p></li><li><p>运行class文件 cmd：java Hello</p></li><li><p><strong>可能会遇到的问题</strong></p><ol><li>Java是大小写敏感的语言，每个单词的大小写不能出现问题</li><li>尽量使用中文</li><li>文件名与类名必须保持一致</li></ol><hr></li></ol><h3 id="Java运行机制"><a href="#Java运行机制" class="headerlink" title="Java运行机制"></a>Java运行机制</h3><ul><li>编译型：先整个程序通过编译器先编译完成后再运行(操作系统、c&#x2F;c++)</li><li>解释型：执行什么就读取什么(网页、Javascript)</li><li>Java程序运行机制</li></ul><p><img src="https://img30.360buyimg.com/pop/jfs/t1/216026/11/15424/19299/62373668E88ab9271/8335afd2a83f0fc5.png" alt="java_run"></p><hr><h2 id="IDEA安装教程"><a href="#IDEA安装教程" class="headerlink" title="IDEA安装教程"></a>IDEA安装教程</h2><h3 id="1-打开jetbrains官网下载IDEA"><a href="#1-打开jetbrains官网下载IDEA" class="headerlink" title="1. 打开jetbrains官网下载IDEA"></a>1. 打开jetbrains官网下载IDEA</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/120004/31/23287/83690/6237369aEfcaf86ee/1341013e53c23cf5.png"></p><ul><li><p>下载地址：<a href="https://www.jetbrains.com/zh-cn/idea/download/#section=windows">https://www.jetbrains.com/zh-cn/idea/download/#section=windows</a></p></li><li><p>点击<a href="https://www.jetbrains.com/zh-cn/idea/download/#section=windows">此处</a>进入IDEA下载界面</p></li></ul><p><img src="https://img30.360buyimg.com/pop/jfs/t1/114487/39/23094/72904/623736b3E95bd557c/6e25a3fa36db191e.png"></p><h3 id="2-打开安装包之后，无脑next。"><a href="#2-打开安装包之后，无脑next。" class="headerlink" title="2. 打开安装包之后，无脑next。"></a>2. 打开安装包之后，<del>无脑next。</del></h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/198629/33/20709/45058/623736ceEd59fdd11/a717d392d82f8ad0.png"></p><h3 id="3-安装目录不建议放在C盘"><a href="#3-安装目录不建议放在C盘" class="headerlink" title="3. 安装目录不建议放在C盘"></a>3. <strong>安装目录不建议放在C盘</strong></h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/217105/6/15162/49712/623736e8Ea3906364/843e0641342b9718.png"></p><hr><h2 id="创建一个Java程序"><a href="#创建一个Java程序" class="headerlink" title="创建一个Java程序"></a>创建一个Java程序</h2><ol><li><p>双击打开IDEA快捷方式，首先new一个Project</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/121170/18/24773/77888/623737f3Ecdc108e4/ebb5390c0cf9950d.png" alt="new_project"></p></li><li><p>然后选择Java语言导入JDK环境</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/92215/16/24676/66704/62373815E42130a06/66f052194fdcc4b6.png" alt="JDK"></p></li><li><p>鼠标右击src文件夹 new一个 java class</p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/181017/16/22231/364250/6237383cEd4ba2e02/58d0e87d267ffbca.png" alt="new class"></p></li><li><p>编写hello world</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img30.360buyimg.com/pop/jfs/t1/179802/26/21860/77145/6237385dE25eb7d73/e0a4a0a96b8c321a.png" alt="HELLO WORLD"></p><blockquote></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的特性与优势</title>
      <link href="/archives/ef009d9b.html"/>
      <url>/archives/ef009d9b.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java的特性和优势"><a href="#Java的特性和优势" class="headerlink" title="Java的特性和优势"></a>Java的特性和优势</h2><h3 id="Java特性"><a href="#Java特性" class="headerlink" title="Java特性"></a>Java特性</h3><ul><li>简单性</li><li>面向对象</li><li>可移植性</li><li>高性能</li><li>分布式</li><li>动态性</li><li>多线程</li><li>安全性</li><li>健壮性</li></ul><hr><h3 id="Java三大版本"><a href="#Java三大版本" class="headerlink" title="Java三大版本"></a>Java三大版本</h3><ul><li><strong>JavaSE ： 标准版（桌面程序，控制台开发……</strong></li><li><del><strong>JavaME： 嵌入式开发（手机、小家电）</strong></del></li><li><strong>JavaEE： 企业级开发（web端，服务器开发）</strong></li></ul><hr><h3 id="JDK、JRE、JVM"><a href="#JDK、JRE、JVM" class="headerlink" title="JDK、JRE、JVM"></a>JDK、JRE、JVM</h3><blockquote><p>JDK： Java Development Kit</p><p>JRE： Java Runtime Environment</p><p>JVM： Java Virtual Machine</p></blockquote><p><img src="https://img30.360buyimg.com/pop/jfs/t1/212587/24/15283/47108/623735e3E54606284/e9980567ac36697e.png" alt="三者区别与联系"></p><p><img src="https://img30.360buyimg.com/pop/jfs/t1/212860/32/15267/43018/6237360eEb30a738c/d04f6b8f15c13028.png" alt="架构图"></p><hr><h3 id="Java开发环境安装"><a href="#Java开发环境安装" class="headerlink" title="Java开发环境安装"></a>Java开发环境安装</h3><h4 id="卸载JDK"><a href="#卸载JDK" class="headerlink" title="卸载JDK"></a>卸载JDK</h4><ol><li>删除Java安装目录</li><li>删除环境变量中的JAVA_HOME</li><li>删除环境变量中的Path下关于Java的目录</li></ol><h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><ol><li>打开官网找到电脑对应的版本，并下载到本地。<a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">JDk下载页面</a></li><li>双击安装包进行安装</li><li>记住安装的路径</li><li><strong>配置环境变量</strong><ol><li>我的电脑—&gt; 右键 —&gt; 属性</li><li>高级系统设置 —&gt; 环境变量 —&gt; 新建系统变量</li><li>配置变量名： JAVA_HOME  值：Java的安装目录</li><li>配置Path：鼠标右击Path— 值为%JAVA_HOME%&#x2F;lib</li></ol></li><li>检查JDK是否安装成功<ol><li>Win + r ：cmd</li><li>输入java -version</li><li>若打印出Java版本信息，则安装成功。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见dos命令</title>
      <link href="/archives/794bccc2.html"/>
      <url>/archives/794bccc2.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本Dos命令及计算机发展史"><a href="#基本Dos命令及计算机发展史" class="headerlink" title="基本Dos命令及计算机发展史"></a>基本Dos命令及计算机发展史</h2><h3 id="一、打开cmd窗口方式"><a href="#一、打开cmd窗口方式" class="headerlink" title="一、打开cmd窗口方式"></a>一、打开cmd窗口方式</h3><ol><li>开始 + 系统+命令提示符</li><li><strong>Win键+R 输入cmd打开控制台</strong></li><li>在任意的文件夹下面，按住Shift键 + 鼠标右击，在此窗口打开命令行窗口</li><li>资源管理器的地址栏前面加上cmd路径</li><li><strong>管理员身份运行，选择以管理员身份运行</strong></li></ol><h3 id="二、常用的Dos命令"><a href="#二、常用的Dos命令" class="headerlink" title="二、常用的Dos命令"></a>二、常用的Dos命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">盘符切换</span></span><br><span class="line">D:</span><br><span class="line">C:</span><br><span class="line">E:</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入任意目录 <span class="built_in">cd</span> change directory</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">跨盘：</span></span><br><span class="line">cd /d E:\data\usr\root</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">不跨盘</span></span><br><span class="line">cd data</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">返回上一级目录</span></span><br><span class="line">cd ..</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前目录下所有文件</span></span><br><span class="line">dir </span><br><span class="line">ll</span><br><span class="line">ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">清理屏幕 cls clear screen</span></span><br><span class="line">cls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">退出终端 <span class="built_in">exit</span></span></span><br><span class="line">eixt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看IP ipconfig</span></span><br><span class="line">ipconfig</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打开应用 calc 计算器；mspaint 画图软件； notepad 记事本</span></span><br><span class="line">calc </span><br><span class="line">mspaint</span><br><span class="line">notepad</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件操作</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建目录 md make directory</span></span><br><span class="line">md test</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建文件</span></span><br><span class="line"><span class="meta prompt_">cd&gt;</span><span class="language-bash">test.txt</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除文件</span></span><br><span class="line">del test.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">移除目录 rd remove directory</span></span><br><span class="line">rd test</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="计算机语言发展史"><a href="#计算机语言发展史" class="headerlink" title="计算机语言发展史"></a>计算机语言发展史</h2><h3 id="一、第一代语言"><a href="#一、第一代语言" class="headerlink" title="一、第一代语言"></a>一、第一代语言</h3><ul><li>机器语言<ul><li>计算机的基本计算方式都是基于<em>二进制</em>的方式</li><li>二进制：01010110100100101</li><li>这种代码是直接输入给计算机使用的，不经过任何转换</li></ul></li></ul><h3 id="二、第二代语言"><a href="#二、第二代语言" class="headerlink" title="二、第二代语言"></a>二、第二代语言</h3><ul><li>汇编语言<ul><li>解决人类无法读懂机器语言的问题</li><li>指令代替二进制</li></ul></li><li>目前应用<ul><li>逆向工程</li><li>机器人</li><li>病毒</li><li>…</li></ul></li></ul><h3 id="三、第三代语言"><a href="#三、第三代语言" class="headerlink" title="三、第三代语言"></a>三、第三代语言</h3><ul><li>摩尔定律<ul><li>当价格不变时，集成电路上可容纳的集体管数目，约每隔18个月便会增加一倍，性能也会提升一倍。换言之，每一美元所能买到的电脑性能，将每隔18个月翻两倍以上</li></ul></li><li><h2 id="高级语言-大体上分为：面向过程和面向对象两大类-c语言是经典的面向过程的语言，c-和Java是典型的面向对象的语言"><a href="#高级语言-大体上分为：面向过程和面向对象两大类-c语言是经典的面向过程的语言，c-和Java是典型的面向对象的语言" class="headerlink" title="高级语言- 大体上分为：面向过程和面向对象两大类  - c语言是经典的面向过程的语言，c++和Java是典型的面向对象的语言"></a>高级语言<br>- 大体上分为：<strong>面向过程</strong>和<strong>面向对象</strong>两大类<br>  - <em><strong>c语言</strong></em>是经典的面向过程的语言，<strong>c++和Java</strong>是典型的面向对象的语言</h2></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> Dos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新增系统属性</title>
      <link href="/archives/51d15a97.html"/>
      <url>/archives/51d15a97.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、需求描述"><a href="#一、需求描述" class="headerlink" title="一、需求描述"></a>一、需求描述</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">使用adb命令获取下列属性：</span><br><span class="line">- 主板SN：</span><br><span class="line">- IMEI：</span><br><span class="line">- IMEI2：</span><br><span class="line">- MEID：</span><br><span class="line">- WIFI：</span><br><span class="line">- BT(bluetooth?)：</span><br><span class="line">- OSVersion：</span><br><span class="line">- SEVersion：</span><br><span class="line">- UFSVersion：</span><br><span class="line">- QCN：</span><br><span class="line">- MP版本：</span><br><span class="line">- 写号激活状态：</span><br><span class="line">- 密钥下载成功状态：</span><br></pre></td></tr></table></figure><h2 id="二、需求分析"><a href="#二、需求分析" class="headerlink" title="二、需求分析"></a>二、需求分析</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- 主板SN：</span><br><span class="line">- IMEI：</span><br><span class="line">- IMEI2：</span><br><span class="line">- MEID：</span><br><span class="line">- WIFI：</span><br><span class="line">- BT(bluetooth?)：</span><br><span class="line">- OSVersion：</span><br><span class="line">- SEVersion：</span><br><span class="line">- QCN：</span><br><span class="line">- MP版本：</span><br></pre></td></tr></table></figure><ul><li>以上一些属性在现有版本里面可以找到。</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- UFSVersion：</span><br><span class="line">- 写号激活状态：</span><br><span class="line">- 密钥下载成功状态：</span><br></pre></td></tr></table></figure><ul><li>而这三个属性找不到，就需要自己新增。</li></ul><h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h2><ul><li>在build&#x2F;buildprop.mk 文件中新增这三个属性</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ADDITIONAL<span class="built_in">_</span>BUILD<span class="built_in">_</span>PROPERTIES += persist.urv.ufs.version=false</span><br><span class="line">ADDITIONAL<span class="built_in">_</span>BUILD<span class="built_in">_</span>PROPERTIES += persist.urv.writenum.status=false</span><br><span class="line">ADDITIONAL<span class="built_in">_</span>BUILD<span class="built_in">_</span>PROPERTIES += persist.urv.keydownload.status=false</span><br></pre></td></tr></table></figure><ul><li><p>上述是比较简单的处理方法，就是通过宏新增三个属性并给他赋初值false。</p></li><li><p>还可以在&#x2F;device&#x2F;qcom&#x2F;sepolicy&#x2F;vendor&#x2F;common目录下的property_contexts文件给属性申请权限</p></li></ul><p>eg：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">persist.urv.ufs.version                 u:object<span class="built_in">_</span>r:system<span class="built_in">_</span>prop:s0</span><br><span class="line">persist.urv.writenum.status                 u:object<span class="built_in">_</span>r:system<span class="built_in">_</span>prop:s0</span><br><span class="line">persist.urv.keydownload.status                 u:object<span class="built_in">_</span>r:system<span class="built_in">_</span>prop:s0</span><br></pre></td></tr></table></figure><h2 id="四、后续修改"><a href="#四、后续修改" class="headerlink" title="四、后续修改"></a>四、后续修改</h2><ul><li>可以通过找到对应更新相关状态代码逻辑的地方通过SystemProperties.set(“persist.sys.white.packagename” ,value);  方法去赋值  value就是需要赋的值。</li><li>系统属性设置的值理论上都是String类型的，但可以通过系统原生的接口SystemProperties.getBoolean（XXX，XX）；SystemProperties.getInt（XXX，XX）；SystemProperties.get（XXX，XX）；分别去返回boolean,Int,String类型的数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机硬件知识</title>
      <link href="/archives/c81dbfc9.html"/>
      <url>/archives/c81dbfc9.html</url>
      
        <content type="html"><![CDATA[<h2 id="计算机硬件"><a href="#计算机硬件" class="headerlink" title="计算机硬件"></a>计算机硬件</h2><h3 id="冯诺依曼体系结构"><a href="#冯诺依曼体系结构" class="headerlink" title="冯诺依曼体系结构"></a>冯诺依曼体系结构</h3><p><img src="https://img30.360buyimg.com/pop/jfs/t1/96048/15/24870/113440/623738e1Ef4676b40/9f4e1bc1d4db85ad.png" alt="冯诺依曼体系结构"></p><p><strong>冯诺依曼体系结构是现代计算机的基础</strong></p><ol><li>输入数据和程序的<strong>输入设备</strong></li><li>记忆程序和数据的<strong>存储器</strong></li><li>完成数据加工处理的<strong>运算器</strong></li><li>控制程序执行的<strong>控制器</strong></li><li>输出处理结果的<strong>输出设备</strong></li></ol><hr><p><strong>一、中央处理器</strong>（CPU）是计算机的大脑，从内存中获取指令，然后执行这些指令。</p><p>CPU 包括</p><ol><li><strong>控制单元</strong>：用于控制和协调其他组件</li><li><strong>算术逻辑单元</strong>：用于完成数值运算</li></ol><p>每台计算机都有一个内部时钟，该时钟以固定速度发射电子脉冲。时钟速度越快，在给定时间段内执行的越多。速度单位：赫兹（Hz）</p><p>1 Hz相当于一个脉冲。1KHz &#x3D; 1024Hz；1MHz &#x3D; 1024 KHz；</p><hr><p><strong>二、存储设备</strong></p><ul><li>内存中的信息在断电时会丢失，可以考虑将程序与数据永久的保存在存储设备上。</li><li>存储设备主要有：</li></ul><ol><li><strong>磁盘驱动器</strong>                   -&gt;硬盘</li><li><strong>光盘驱动器</strong>                   -&gt;CD和DVD</li><li><strong>USB闪存驱动器</strong>           -&gt;U盘</li></ol><hr><p><strong>三、内存</strong></p><p>比特（bit）和字节（byte）</p><ul><li><strong>一个 0 或一个 1 存储为一个比特（ bit）也叫位，是计算机中最小存储单位。</strong></li><li>**计算机中最基本的存储单位是字节（byte） **</li></ul><p>​1Byte &#x3D; 8 bit；</p><p>​1KB &#x3D; 1024B；1MB &#x3D; 1024 KB；</p><p>​1GB &#x3D; 1024MB；1TB &#x3D; 1024GB</p><ul><li><strong>一个程序和他的数据在被CPU执行前，必须移到计算机的内存中。</strong></li><li>内存读取速度比硬盘读取速度快好多好多，<strong>而CPU的读取速度比内存又要快好多好多</strong></li></ul><hr><p><strong>计算机输入输出设备</strong></p><ul><li>输入设备：鼠标 键盘</li><li>输出设备：显示器和打印机</li></ul><hr><p><strong>计算机两大鼻鼻祖</strong></p><ol><li>阿兰图灵：计算机科学之父和人工智能之父</li><li>冯诺依曼：计算机之父和博弈论之父</li></ol><hr><p><strong>操作系统</strong></p><ul><li>操作系统是运行在计算机上的重要程序，它可以管理系统控制计算机的活动。</li><li>硬件、操作系统、应用程序控制计算机的活动。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高通方案编译及刷机流程</title>
      <link href="/archives/3b092706.html"/>
      <url>/archives/3b092706.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="4762429176b118b7fcb203645fa21b4c5d07c3cab2d67ac904fd9599624360b4">1ffc7d1a99edb7ab7287058947423f9f3ae0e1543b1c5481e9de9dd6fb8de1c89c9e6fbfc127e23f67154864cdd18930325b842bb0151a688bdf81832d003c54abdfb4db53d3ee0f65915f036a80394b1ccfb3dca4f7abf9b3a178a9641358451bca0c01341c118e70737c600262a83da181ce7664e92c694b1b73793e468885a49e2eff44d10ce214a40f28bd9d45bf0b5fcbdb93bfe9bcaed8dc3b0cfd5ebf592be639dd2a3b8017933e27c6c91fff7b0288d3f55f38f9e00d1658a14e0b71f72be661c339f8278a368099ceedfe494bc4371e4c25df9416c36a2967afadad02c445995faa713af2557b6ffd1a8446b92761b6c66744e8fe9488043c50c656bd555d7eec249c6d120bcc86cdd394b7126f9a6e714839f00c91c5246724656b2381e94eda21d9a1f081578a96f11389a8159797920b991d2a91ea12c4ebd8bb3b1c94292b794b8ae0220c7d3c7cc0e2bd0454805b7bbd125fadce2a05cdae0a4bebe24ca8ab5857569292e53b31f0e679b6a6eae8ad195ac50fac82cb709125bbe7932f0b0c3f0eb5547d1576a2fd805dbf73c847544d17029ce4a8253b8f40ebaa5a1dbd1f70aa4ed39c3f6d739b9009bd95800ce52696d4dc18c89ed38a5dad65bfaecb0a0734c2ca39195670a5d21c41541467508c9c00055138c4aea0a41f71cc99912eac838cfef5003a94d2c429ede715ac534e45ebe4fc24310b03779659430a3a84d95bf77dc524230eb2b9cd127864fad2cbb09c1635a1382b2b52b2e9f9e55737826b7efe1a0713e3751af8537a94804c295f2a09e32a683274e348ac26268dacd9a0bb4e19a9eb06016c3318540de9f2e481228e24c74d0b9a492f55f843247ff1e0ae5958cb6248deeff55a356d5da41722893310db5fd02b5e63d695ffd4c2742fc3814f709e1787e5266b0e876d91c296a50a79f64c210b9cd80d8849324fb1797be450351d981619d4646b95a22312e75f7ae11897ba5f4d1532775d2bfbefc8f758eadda97641e7b0153134431d7cb738190a670661cf986fafc41a8354d5bd10f32e4cf193a978bda76125b4997afc98983d996d42f997d3b5e8e5427a6edc6a52ba4cc9de03ad9ff494265b61532670364672573042e2829de48f7d8350cc78aefe1657bad83343d477c5028cab6bee7e9f8dc915285659298cf5a8593e29c2e5612498407e684ceb7013402b1232e4347521358d0fcd72a2f8fc048aa1b5a0f1ab03cfaea63157c68f5a9597e6dfeb410f76e5d384972f57b74359a198b0362962b52a5b1c50814bac70e2c78b80205f067bc209441d49769c4687e2bbfd3ac52717bde68f79829d7848b6137aee6bc3a819a6a631a6737c1c4308647f22a6c6c56bbf4276c956a9b676d0b3086ea945d37f97be346a5c638038db00d11766ea25b02671297f8a799d751a72122ef6adc50ffe18b1e6b62707d1c8043a5a4c0d8df38fbdf7fdd77146ee7ad12467d0a91ea78a7a83b2a88f4d0ba00db648bc3c5eb6e3aef906a68a48557623fee557a0925a13ff93863e75a3ad55ca066f48de7933a5a5e02ede25a34aca7d98e248585b214da5802c37a8397336712c7515327550c8396c718d1cf5a5b12383abd5414df8206835a0a5125b7ac51fa4f87a3966dcd8388f64e4d235a70b03a8813c8f029f9137225a32bf6d8103266806983af5ec5536c7f03fcc43166f7efc08aadb7ddbbf211553cbf8d0d734768269ee72aad85364285d8e9dbe82104b38200304d04b35c7a7ddc2734a3298edaa0d6c43e48ef939319bbff80d5856cc1ac2372103f279c94be95feed68eee2beb6340a1e5edcf521917622e0dd20718f89f4b5a81da4206e44fd8b888848e59f50fff2fab3d762891a102682f1916df7a002b9af6cc8a2be73f9171b588414a912f188a107879dd65def4eef7e0de3b7c3802980691f249a05742c87527c80e05cd02b4afbdcc3627efc63414d349f4e4adc8a99e219b6b62f53c3bfcc712dcf22406fc57259a8256704ebd0832557b2b91a8a07e2fcdb7880a9f09fbf546d94f7e88eb95000d1ab4f1e3e030bab72317a1b60e5c5f1b74e4bbbffe89a7d83425653a0fb7f89739929aefa1e3dd9f5c6bcbbd96db6b2aeaebacc546a4d2a1288bd9a1b4d8c48c8815fa83d789e96001dfea1cc26958744908274346b100417014caf40a95b7f5bb10f10f278f95faf0445b3dc16a15f79c91c36fb178c51791ac8029aa498afda352106f358d93a363d578aa686fd119189071607ed1a4f7fc0d8e713910868ab0e4feee480d8ba17cd5200b5fee71de0200211dd7cd05e212694f4ace59537a7b2b0aadd39fa0aa621b6f86a3496ff79bb06ed5f9abff18af4e4c74155bac02eeb5020326417c8b23a096e41d04c2007759e606d345943b6f759653c3bdb4dc448663f94c39bf15990e4605278b6c10529bf0fcac68c7984997cce4f7660e6aa1e04b2d532011c83c4d17dc9f65209368c34cec3212c198f53e4ebd8a301456955a6568e72b0197fa0691e885554b6f100a5508b3354cb66d3050a699b0748d9f1c5d3e0319ddc0929356bba34e585fd4fe6364d50680794e5392c1985c626747cc78</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
